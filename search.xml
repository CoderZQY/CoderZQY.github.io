<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CS144-Lab0</title>
    <url>/2023/12/23/CS144-Lab0/</url>
    <content><![CDATA[<h1 id="Lab-Checkpoint-0-networking-warmup"><a href="#Lab-Checkpoint-0-networking-warmup" class="headerlink" title="Lab Checkpoint 0: networking warmup"></a>Lab Checkpoint 0: networking warmup</h1><h2 id="1-Set-up-GNU-Linux-on-your-computer"><a href="#1-Set-up-GNU-Linux-on-your-computer" class="headerlink" title="1. Set up GNU/Linux on your computer"></a>1. Set up GNU/Linux on your computer</h2><p>CS144 的任务需要 GNU/Linux 操作系统和一个支持 C++ 2020 标准的 C++ 编译器（非常激进 … ）</p>
<p>我的运行环境：<strong>ubuntu-22.04.3</strong> with <strong>g++ 13.2.0</strong></p>
<a id="more"></a>

<h2 id="2-Networking-by-hand"><a href="#2-Networking-by-hand" class="headerlink" title="2. Networking by hand"></a>2. Networking by hand</h2><h3 id="2-1-Fetch-a-Web-page"><a href="#2-1-Fetch-a-Web-page" class="headerlink" title="2.1 Fetch a Web page"></a>2.1 Fetch a Web page</h3><p><strong>注意事项：</strong>在与远程服务器建立 telnet 连接之后，需要稍微快速地输入请求内容。否则，外部主机将关闭连接。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">telnet</span> cs<span class="number">144</span>.keithw.org http</span><br><span class="line"><span class="attribute">GET</span> /hello HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">Host</span>: cs<span class="number">144</span>.keithw.org </span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="comment"># enter: Sends an empty line</span></span><br></pre></td></tr></table></figure>
<p>获得以下输出，并且关闭连接。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Tue, 19 Dec 2023 12:32:18 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Thu, 13 Dec 2018 15:45:29 GMT</span><br><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>&quot;e-57ce93446cb64&quot;</span><br><span class="line"><span class="attribute">Accept-Ranges</span><span class="punctuation">: </span>bytes</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>14</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain</span><br><span class="line"></span><br><span class="line">Hello, CS144!</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在一些情况下，由于安全性问题，Telnet 并不被推荐作为远程登录的方式，因为它在传输过程中使用的是明文传输，存在安全风险。相比之下，SSH（Secure Shell）是一个更加安全的替代方案，它提供了加密的连接和更高的安全性。</p>
</blockquote>
<h3 id="2-2-Send-yourself-an-email"><a href="#2-2-Send-yourself-an-email" class="headerlink" title="2.2 Send yourself an email"></a>2.2 Send yourself an email</h3><p>由于没有 SUNet ID，这里跳过。</p>
<h3 id="2-3-Listening-and-connecting"><a href="#2-3-Listening-and-connecting" class="headerlink" title="2.3 Listening and connecting"></a>2.3 Listening and connecting</h3><p>作为一个简单的服务器：等待客户端发起连接。</p>
<ul>
<li><p><code>netcat</code> terminal window</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">netcat -v -l -p <span class="number">9090</span></span><br><span class="line"><span class="comment"># netcat output here</span></span><br><span class="line">Listening <span class="keyword">on</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="number">9090</span></span><br><span class="line">Connection received <span class="keyword">on</span> localhost <span class="number">42352</span></span><br><span class="line">hello~</span><br><span class="line">^C</span><br></pre></td></tr></table></figure></li>
<li><p><code>telnet</code> terminal window</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">telnet localhost <span class="number">9090</span></span><br><span class="line"><span class="comment"># telnet output here</span></span><br><span class="line">Trying <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>...</span><br><span class="line">Connected <span class="keyword">to</span> localhost.</span><br><span class="line">Escape <span class="built_in">character</span> <span class="keyword">is</span> &#x27;^]&#x27;.</span><br><span class="line">hello~</span><br><span class="line">Connection closed <span class="keyword">by</span> foreign host.</span><br></pre></td></tr></table></figure>
<h2 id="3-Writing-a-network-program-using-an-OS-stream-socket"><a href="#3-Writing-a-network-program-using-an-OS-stream-socket" class="headerlink" title="3. Writing a network program using an OS stream socket"></a>3. Writing a network program using an OS stream socket</h2></li>
</ul>
<p>实现一个程序 <code>webget</code>，用于访问外部网页，类似于 wget。</p>
<p><strong>注意事项：</strong></p>
<ul>
<li>HTTP 头部的每一行末尾都是以 <code>\r\n</code> 结尾，而不是 <code>\n</code> ；</li>
<li>需要包含 <code>Connection: close</code> 的 HTTP 头部，或通过 <code>shutdown</code> 以指示远程服务器在处理完当前请求后直接关闭。</li>
<li>除非获取到 EOF，否则必须循环从远程服务器读取信息，因为网络数据的传输可能断断续续，需要多次 read。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_URL</span><span class="params">( <span class="keyword">const</span> <span class="built_in">string</span>&amp; host, <span class="keyword">const</span> <span class="built_in">string</span>&amp; path )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  TCPSocket sock&#123;&#125;;</span><br><span class="line">  sock.connect( Address( host, <span class="string">&quot;http&quot;</span> ) );</span><br><span class="line">  <span class="built_in">string</span> message = <span class="string">&quot;GET &quot;</span> + path + <span class="string">&quot; HTTP/1.1\r\nHOST: &quot;</span> + host + <span class="string">&quot;\r\n\r\n&quot;</span>;</span><br><span class="line">  sock.write(message);</span><br><span class="line">  sock.shutdown(SHUT_WR);</span><br><span class="line">  <span class="keyword">while</span>( !sock.closed() &amp;&amp; !sock.eof() )&#123;</span><br><span class="line">    <span class="built_in">string</span> buffer;</span><br><span class="line">    sock.read(buffer);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; buffer;</span><br><span class="line">  &#125;</span><br><span class="line">  sock.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行测试，结果如下：</p>
<img src="/2023/12/23/CS144-Lab0/check_webget result.png" alt="check_webget result" style="zoom: 67%;">

<h2 id="4-An-in-memory-reliable-byte-stream"><a href="#4-An-in-memory-reliable-byte-stream" class="headerlink" title="4. An in-memory reliable byte stream"></a>4. An in-memory reliable byte stream</h2><p>实现一个在<strong>内存</strong>中的有序可靠字节流（有点类似于管道）</p>
<blockquote>
<p>后续实验会在<strong>不可靠网络</strong>中实现一个这样的可靠字节流，也就是<strong>传输控制协议（Transmission Control Protocol，TCP）</strong></p>
</blockquote>
<p><strong>注意事项：</strong></p>
<ul>
<li>若要实现高性能的 ByteStream，需要使用<strong>移动语义</strong> <code>std::move(data)</code> 以<strong>尽可能避免拷贝</strong></li>
<li>支持<strong>流量控制</strong>，以限制内存消耗，只有当缓冲区有空余时，Writer 才能继续写入。</li>
<li>必须考虑到字节流大于缓冲区大小的情况，即使缓冲区只有 $1$ 字节大小，所实现的程序也必须支持正常的写入读取操作。</li>
</ul>
<p>整体代码：</p>
<ul>
<li><code>byte_stream.hh</code> 代码</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string_view&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reader</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Writer</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ByteStream</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="keyword">uint64_t</span> capacity_;</span><br><span class="line">  <span class="comment">// Please add any additional state to the ByteStream here, and not to the Writer and Reader interfaces.</span></span><br><span class="line">  <span class="keyword">bool</span> is_closed_ &#123; <span class="literal">false</span> &#125;;</span><br><span class="line">  <span class="keyword">bool</span> has_error_ &#123; <span class="literal">false</span> &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint64_t</span> num_bytes_pushed_ &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="keyword">uint64_t</span> num_bytes_popped_ &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="keyword">uint64_t</span> num_bytes_buffered_ &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; data_queue_ &#123;&#125;;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="built_in">std</span>::string_view&gt; view_queue_ &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">ByteStream</span><span class="params">( <span class="keyword">uint64_t</span> capacity )</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Helper functions (provided) to access the ByteStream&#x27;s Reader and Writer interfaces</span></span><br><span class="line">  <span class="function">Reader&amp; <span class="title">reader</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> Reader&amp; <span class="title">reader</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function">Writer&amp; <span class="title">writer</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> Writer&amp; <span class="title">writer</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Writer</span> :</span> <span class="keyword">public</span> ByteStream</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">( <span class="built_in">std</span>::<span class="built_in">string</span> data )</span></span>; <span class="comment">// Push data to stream, but only as much as available capacity allows.</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;     <span class="comment">// Signal that the stream has reached its ending. Nothing more will be written.</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_error</span><span class="params">()</span></span>; <span class="comment">// Signal that the stream suffered an error.</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_closed</span><span class="params">()</span> <span class="keyword">const</span></span>;              <span class="comment">// Has the stream been closed?</span></span><br><span class="line">  <span class="function"><span class="keyword">uint64_t</span> <span class="title">available_capacity</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// How many bytes can be pushed to the stream right now?</span></span><br><span class="line">  <span class="function"><span class="keyword">uint64_t</span> <span class="title">bytes_pushed</span><span class="params">()</span> <span class="keyword">const</span></span>;       <span class="comment">// Total number of bytes cumulatively pushed to the stream</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reader</span> :</span> <span class="keyword">public</span> ByteStream</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::string_view <span class="title">peek</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// Peek at the next bytes in the buffer</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">( <span class="keyword">uint64_t</span> len )</span></span>;      <span class="comment">// Remove `len` bytes from the buffer</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_finished</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// Is the stream finished (closed and fully popped)?</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">has_error</span><span class="params">()</span> <span class="keyword">const</span></span>;   <span class="comment">// Has the stream had an error?</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">uint64_t</span> <span class="title">bytes_buffered</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// Number of bytes currently buffered (pushed and not popped)</span></span><br><span class="line">  <span class="function"><span class="keyword">uint64_t</span> <span class="title">bytes_popped</span><span class="params">()</span> <span class="keyword">const</span></span>;   <span class="comment">// Total number of bytes cumulatively popped from stream</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * read: A (provided) helper function thats peeks and pops up to `len` bytes</span></span><br><span class="line"><span class="comment"> * from a ByteStream Reader into a string;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">( Reader&amp; reader, <span class="keyword">uint64_t</span> len, <span class="built_in">std</span>::<span class="built_in">string</span>&amp; out )</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>byte_stream.cc</code> 代码</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;byte_stream.hh&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">ByteStream::ByteStream( <span class="keyword">uint64_t</span> capacity ) : capacity_( capacity ) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Writer::push</span><span class="params">( <span class="built_in">string</span> data )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( available_capacity() == <span class="number">0</span> || data.empty() ) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">auto</span> <span class="keyword">const</span> n = min( available_capacity(), data.size() );</span><br><span class="line">  <span class="keyword">if</span> ( n &lt; data.size() ) &#123;</span><br><span class="line">    data = data.substr( <span class="number">0</span>, n );</span><br><span class="line">  &#125;</span><br><span class="line">  data_queue_.push_back( <span class="built_in">std</span>::move( data ) );</span><br><span class="line">  view_queue_.emplace_back( data_queue_.back().c_str(), n);</span><br><span class="line">  num_bytes_buffered_ += n;</span><br><span class="line">  num_bytes_pushed_ += n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Writer::close</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  is_closed_ = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Writer::set_error</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  has_error_ = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Writer::is_closed</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> is_closed_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">Writer::available_capacity</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> capacity_ - num_bytes_buffered_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">Writer::bytes_pushed</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num_bytes_pushed_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string_view <span class="title">Reader::peek</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( view_queue_.empty() ) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> view_queue_.front();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Reader::is_finished</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> is_closed_ &amp;&amp; num_bytes_buffered_ == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Reader::has_error</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> has_error_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reader::pop</span><span class="params">( <span class="keyword">uint64_t</span> len )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> n = min( len, num_bytes_buffered_ );</span><br><span class="line">  <span class="keyword">while</span> ( n &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">    <span class="keyword">auto</span> sz = view_queue_.front().size();</span><br><span class="line">    <span class="keyword">if</span> ( n &lt; sz ) &#123;</span><br><span class="line">      view_queue_.front().remove_prefix( n );</span><br><span class="line">      num_bytes_buffered_ -= n;</span><br><span class="line">      num_bytes_popped_ += n;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    view_queue_.pop_front();</span><br><span class="line">    data_queue_.pop_front();</span><br><span class="line">    n -= sz;</span><br><span class="line">    num_bytes_buffered_ -= sz;</span><br><span class="line">    num_bytes_popped_ += sz;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">Reader::bytes_buffered</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num_bytes_buffered_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">Reader::bytes_popped</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num_bytes_popped_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行测试，结果如下：</p>
<img src="/2023/12/23/CS144-Lab0/ByteStream test result.png" alt="ByteStream test result" style="zoom:67%;">
]]></content>
      <categories>
        <category>Stanford-CS144</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>TCP/IP协议栈</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CS144-Lab1</title>
    <url>/2023/12/23/CS144-Lab1/</url>
    <content><![CDATA[<h1 id="Lab-Checkpoint-1-stitching-substrings-into-a-byte-stream"><a href="#Lab-Checkpoint-1-stitching-substrings-into-a-byte-stream" class="headerlink" title="Lab Checkpoint 1: stitching substrings into a byte stream"></a>Lab Checkpoint 1: stitching substrings into a byte stream</h1><h2 id="0-Overview"><a href="#0-Overview" class="headerlink" title="0. Overview"></a>0. Overview</h2><img src="/2023/12/23/CS144-Lab1/CS144 Labs'structure 1-3.png" alt="CS144 Labs'structure 1-3" style="zoom:50%;">

<p>​    由于底层网络是以 “best effort” 的形式在进行数据报 (datagram) 的传输，意味着在数据包传输的过程中，很可能会发生<strong>丢失</strong>、 <strong>重复</strong>、<strong>乱序</strong>或者<strong>被替换</strong>的现象，因此需要 TCP 为数据包提供可靠的底层逻辑。Lab1 的实验需要完成 ByteStream 外部的 <strong>StreamReassembler</strong> 部分。</p>
<a id="more"></a>

<h2 id="2-Putting-substrings-in-sequence"><a href="#2-Putting-substrings-in-sequence" class="headerlink" title="2. Putting substrings in sequence"></a>2. Putting substrings in sequence</h2><p>​    需要实现的接口如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Insert a new substring to be reassembled into a ByteStream.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">( <span class="keyword">uint64_t</span> first_index, <span class="built_in">std</span>::<span class="built_in">string</span> data, <span class="keyword">bool</span> is_last_substring, Writer&amp; output )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// How many bytes are stored in the Reassembler itself?</span></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">bytes_pending</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="2-1-What-should-the-Reassembler-store-internally"><a href="#2-1-What-should-the-Reassembler-store-internally" class="headerlink" title="2.1 What should the Reassembler store internally?"></a>2.1 What should the Reassembler store internally?</h3><p>​    <strong>Reassembler</strong> 需要处理以下情况：</p>
<ol>
<li>收到的字节流正好是 ByteStream 所需的下一组字节，直接用 Writer 写入到 ByteStream 的缓存中。</li>
<li>若 ByteStream 已经存满，并且此时有部分字节完成了 Reassembler 的处理需要传入 ByteStream，则需要在 Reassembler 内部的缓存空间进行缓存。</li>
<li>当收到的字节流符合当前的剩余空间，但其更早的字节却不存在的时候，需要将其缓存在 Reassembler 中。</li>
<li>丢弃超出剩余空间的字节。</li>
</ol>
<p>​    <strong>注意事项</strong>：重点是第三点：<strong>如何保存失序的字节</strong>。由于不能包含重叠数据，并且还需要及时 push 进去，因此需要一个数据结构，唯一的保存字节和对应的索引。</p>
<p>​    指导书中强调无论子串如何到达，需要限制 Reassembler 和 ByteStream 对内存的消耗，并给出了下图进行说明：</p>
<img src="/2023/12/23/CS144-Lab1/Reassembler store space.png" alt="Reassembler store space" style="zoom:50%;">

<ul>
<li><p><code>first_unpopped_index</code>： 已经排序整理且验证正确的部分的起始索引，绿色区块存储在 ByteStream 的缓存中等待发送。</p>
</li>
<li><p><code>first_unassembled_index</code>： 尚未排序整理的待验证的部分， 可称其为子列 （substrings）的起始索引，红色区块存储在 Reassembler 的内部缓存区域。</p>
</li>
<li><p><code>first_unacceptable_index</code>： 需要被丢弃的部分的起始索引。</p>
</li>
</ul>
<p>整体代码：</p>
<ul>
<li><code>reassembler.hh</code> 代码</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;byte_stream.hh&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reassembler</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">uint64_t</span> first_unassembled_index_ &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="built_in">std</span>::<span class="built_in">pair</span>&lt;<span class="keyword">uint64_t</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt;&gt; buffer_ &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">uint64_t</span> buffer_size_ &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">bool</span> has_last_ &#123; <span class="literal">false</span> &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// insert valid but un-ordered data into buffer</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert_into_buffer</span><span class="params">(  <span class="keyword">uint64_t</span> first_index, <span class="built_in">std</span>::<span class="built_in">string</span>&amp;&amp; data,  <span class="keyword">bool</span> is_last_substring )</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// pop invalid bytes and insert valid bytes into writer</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">pop_from_buffer</span><span class="params">( Writer&amp; output )</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Insert a new substring to be reassembled into a ByteStream.</span></span><br><span class="line"><span class="comment">   *   `first_index`: the index of the first byte of the substring</span></span><br><span class="line"><span class="comment">   *   `data`: the substring itself</span></span><br><span class="line"><span class="comment">   *   `is_last_substring`: this substring represents the end of the stream</span></span><br><span class="line"><span class="comment">   *   `output`: a mutable reference to the Writer</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * The Reassembler&#x27;s job is to reassemble the indexed substrings (possibly out-of-order</span></span><br><span class="line"><span class="comment">   * and possibly overlapping) back into the original ByteStream. As soon as the Reassembler</span></span><br><span class="line"><span class="comment">   * learns the next byte in the stream, it should write it to the output.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * If the Reassembler learns about bytes that fit within the stream&#x27;s available capacity</span></span><br><span class="line"><span class="comment">   * but can&#x27;t yet be written (because earlier bytes remain unknown), it should store them</span></span><br><span class="line"><span class="comment">   * internally until the gaps are filled in.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * The Reassembler should discard any bytes that lie beyond the stream&#x27;s available capacity</span></span><br><span class="line"><span class="comment">   * (i.e., bytes that couldn&#x27;t be written even if earlier gaps get filled in).</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * The Reassembler should close the stream after writing the last byte.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">( <span class="keyword">uint64_t</span> first_index, <span class="built_in">std</span>::<span class="built_in">string</span> data, <span class="keyword">bool</span> is_last_substring, Writer&amp; output )</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// How many bytes are stored in the Reassembler itself?</span></span><br><span class="line">  <span class="function"><span class="keyword">uint64_t</span> <span class="title">bytes_pending</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>reassembler.cc</code> 代码</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;reassembler.hh&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reassembler::insert</span><span class="params">( <span class="keyword">uint64_t</span> first_index, <span class="built_in">string</span> data, <span class="keyword">bool</span> is_last_substring, Writer&amp; output )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( data.empty() ) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( is_last_substring ) &#123;</span><br><span class="line">      output.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( output.available_capacity() == <span class="number">0</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> <span class="keyword">const</span> end_index = first_index + data.size();</span><br><span class="line">  <span class="keyword">auto</span> <span class="keyword">const</span> first_unacceptable = first_unassembled_index_ + output.available_capacity();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// data is not in [first_unassembled_index, first_unacceptable)</span></span><br><span class="line">  <span class="keyword">if</span> ( end_index &lt;= first_unassembled_index_ || first_index &gt;= first_unacceptable ) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if part of data is out of capacity, then truncate it</span></span><br><span class="line">  <span class="keyword">if</span> ( end_index &gt; first_unacceptable ) &#123;</span><br><span class="line">    data = data.substr( <span class="number">0</span>, first_unacceptable - first_index );</span><br><span class="line">    <span class="comment">// if truncated, it won&#x27;t be last_substring</span></span><br><span class="line">    is_last_substring = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// unordered bytes, save it in buffer and return</span></span><br><span class="line">  <span class="keyword">if</span> ( first_index &gt; first_unassembled_index_ ) &#123;</span><br><span class="line">    insert_into_buffer( first_index, <span class="built_in">std</span>::move( data ), is_last_substring );</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove useless prefix of data (i.e. bytes which are already assembled)</span></span><br><span class="line">  <span class="keyword">if</span> ( first_index &lt; first_unassembled_index_ ) &#123;</span><br><span class="line">    data = data.substr( first_unassembled_index_ - first_index );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// here we have first_index == first_unassembled_index_</span></span><br><span class="line">  first_unassembled_index_ += data.size();</span><br><span class="line">  output.push( <span class="built_in">std</span>::move( data ) );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( is_last_substring ) &#123;</span><br><span class="line">    output.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !buffer_.empty() &amp;&amp; buffer_.begin()-&gt;first &lt;= first_unassembled_index_ ) &#123;</span><br><span class="line">    pop_from_buffer( output );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">Reassembler::bytes_pending</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> buffer_size_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reassembler::insert_into_buffer</span><span class="params">( <span class="keyword">const</span> <span class="keyword">uint64_t</span> first_index, <span class="built_in">std</span>::<span class="built_in">string</span>&amp;&amp; data, <span class="keyword">const</span> <span class="keyword">bool</span> is_last_substring )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> begin_index = first_index;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">auto</span> end_index = first_index + data.size();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">auto</span> it = buffer_.begin(); it != buffer_.end() &amp;&amp; begin_index &lt; end_index; ) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( it-&gt;first &lt;= begin_index ) &#123;</span><br><span class="line">      begin_index = max( begin_index, it-&gt;first + it-&gt;second.size() );</span><br><span class="line">      ++it;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( begin_index == first_index &amp;&amp; end_index &lt;= it-&gt;first ) &#123;</span><br><span class="line">      buffer_size_ += data.size();</span><br><span class="line">      buffer_.emplace( it, first_index, <span class="built_in">std</span>::move( data ) );</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> right_index = min( it-&gt;first, end_index );</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> len = right_index - begin_index;</span><br><span class="line">    buffer_.emplace( it, begin_index, data.substr( begin_index - first_index, len ) );</span><br><span class="line">    buffer_size_ += len;</span><br><span class="line">    begin_index = right_index;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( begin_index &lt; end_index ) &#123;</span><br><span class="line">    buffer_size_ += end_index - begin_index;</span><br><span class="line">    buffer_.emplace_back( begin_index, data.substr( begin_index - first_index ) );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( is_last_substring ) &#123;</span><br><span class="line">    has_last_ = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Reassembler::pop_from_buffer</span><span class="params">( Writer&amp; output )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">auto</span> it = buffer_.begin(); it != buffer_.end(); ) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( it-&gt;first &gt; first_unassembled_index_ ) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// it-&gt;first &lt;= first_unassembled_index_</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> end = it-&gt;first + it-&gt;second.size();</span><br><span class="line">    <span class="keyword">if</span> ( end &lt;= first_unassembled_index_ ) &#123;</span><br><span class="line">      buffer_size_ -= it-&gt;second.size();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">auto</span> data = <span class="built_in">std</span>::move( it-&gt;second );</span><br><span class="line">      buffer_size_ -= data.size();</span><br><span class="line">      data = data.substr( first_unassembled_index_ - it-&gt;first );</span><br><span class="line">      first_unassembled_index_ += data.size();</span><br><span class="line">      output.push( <span class="built_in">std</span>::move( data ) );</span><br><span class="line">    &#125;</span><br><span class="line">    it = buffer_.erase( it );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( buffer_.empty() &amp;&amp; has_last_ ) &#123;</span><br><span class="line">    output.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行测试，结果如下：</p>
<img src="/2023/12/23/CS144-Lab1/StreamReassembler test result.png" alt="StreamReassembler test result" style="zoom:67%;">
]]></content>
      <categories>
        <category>Stanford-CS144</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>TCP/IP协议栈</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CS144-Lab2</title>
    <url>/2023/12/23/CS144-Lab2/</url>
    <content><![CDATA[<h1 id="Lab-Checkpoint-2-the-TCP-receiver"><a href="#Lab-Checkpoint-2-the-TCP-receiver" class="headerlink" title="Lab Checkpoint 2: the TCP receiver"></a>Lab Checkpoint 2: the TCP receiver</h1><p>​    Lab2 将实现 TCP 协议的 TCPReceiver，通过 <code>receive()</code> 函数从 peer 端接收数据， 经过 Reassembler 处理写入 ByteStream 缓存， 应用层就可以通过 TCPSocket 读取数据。</p>
<p>​    在接收 peer 端数据的同时， TCPReceiver 通过 <code>send()</code> 函数承担着告知 peer 一些重要信息的职责， 这些信息包括这两个部分：</p>
<ul>
<li><strong>Acknowledgment</strong>: <code>first_unassembled_index</code> 又称 **<code>ackno</code>**， 是 TCPReceiver 从 peer 发送端希望收到的 第一个字节的索引号。</li>
<li><strong>Flow Control</strong>: **<code>window size</code>**， 是 ByteStream 可以写入的剩余空间， 限制了 TCPSender 发送数据的 index 的实际范围。 通过这个 window， TCPReceiver 能够 对输入的数据流量进行控制， 限制发送端的数据直到接收端准备好继续接收。</li>
</ul>
<blockquote>
<p>通常将 ackno 称作 window 的索引左边界 （Smallest Index）， 将 ackno + window size 称作 window 的索引右边界 （Largest Index）</p>
</blockquote>
<a id="more"></a>

<h2 id="2-Checkpoint-2-The-TCP-Receiver"><a href="#2-Checkpoint-2-The-TCP-Receiver" class="headerlink" title="2 Checkpoint 2: The TCP Receiver"></a>2 Checkpoint 2: The TCP Receiver</h2><h3 id="2-1-Translating-between-64-bit-indexes-and-32-bit-seqnos"><a href="#2-1-Translating-between-64-bit-indexes-and-32-bit-seqnos" class="headerlink" title="2.1 Translating between 64-bit indexes and 32-bit seqnos"></a>2.1 Translating between 64-bit indexes and 32-bit seqnos</h3><p>​    Reassembler 重组 substrings 时每一个字节的索引号都是 64-bit， 并且其首位 index 始终是从零开始。 这是一组在当前技术条件下永远不可能溢出的数据流索引号组。 但是在 TCP segment 的头部数据中，sequence number (seqno) 是 32-bit 的， 这组索引号与前述的数据流索引号在长度上不匹配，这种不匹配引入了一些复杂性：</p>
<ol>
<li>TCP 的数据流可以任意长，但 TCP 报文段的头部 seqno 仅有 32-bit，4 GB大小，当 seqno <strong>达到 $2^{32}-1$ 后，会被置零</strong>；</li>
<li>为提高鲁棒性和避免数据混淆，TCP seqno 以一个 32-bit 的随机值作为起始，被称作：**ISN (Initial Sequence Number)**，代表了当前数据流的 “zero point”，或称其为 SYN (beginning of stream)；</li>
<li>有 SYN (beginning of stream) 自然也有 FIN (end of stream)， 它们不属于数据流中的任意字节，仅作为数据流的起始和末尾的两个标识符存在，但 <strong>SYN 和 FIN 分别占一个 seqno</strong>；</li>
</ol>
<blockquote>
<p>Transmitting at 100 gigabits/sec, it would take almost 50 years to reach $2^{64}$ bytes. By contrast, it takes only a third of a second to reach $2^{32}$ bytes.</p>
</blockquote>
<p>​    CS144 区分了三种类型的索引值：<code>seqno</code>，<code>absolute seqno</code>， 以及 <code>stream index</code>，并给出了一个 “cat” 数据的例子。这些索引需要我们实现其相互之间的转换，并保持转换前后不同数据的这三类索引值之间的关系一致。</p>
<img src="/2023/12/23/CS144-Lab2/cat example.png" alt="cat example" style="zoom:67%;">

<img src="/2023/12/23/CS144-Lab2/three different types of indexing.png" alt="three different types of indexing" style="zoom:60%;">

<ul>
<li><p><strong>wrap</strong>：将 <code>absolute seqno</code> $\rightarrow$ <code>seqno</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Wrap32 <span class="title">Wrap32::wrap</span><span class="params">( <span class="keyword">uint64_t</span> n, Wrap32 zero_point )</span></span></span><br></pre></td></tr></table></figure>
<p>这个的实现很简单，只需要 zero_point + n 再转换成 Wrap32 即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Wrap32 <span class="title">Wrap32::wrap</span><span class="params">( <span class="keyword">uint64_t</span> n, Wrap32 zero_point )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// n implicitly convert to uint32_t in order to match the signature of operator+</span></span><br><span class="line">  <span class="keyword">return</span> zero_point + n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>unwrap</strong>：将 <code>seqno</code> $\rightarrow$ <code>absolute seqno</code>，这个要麻烦一些。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">unwrap</span><span class="params">( Wrap32 zero_point, <span class="keyword">uint64_t</span> checkpoint )</span> <span class="keyword">const</span></span></span><br></pre></td></tr></table></figure>
<p>关于 <code>checkpoint</code> 的作用：E.g. 如果 ISN 为 $0$，seqno $17$ 可能对应着多个 absolute seqno: $17$、$2^{32}+17$、$2^{33}+17$、$2^{33}+2^{32}+17$、$2^{34}+17$、$2^{34}+2^{32}+17$ 等等。文档指出：”The wrap/unwrap operations should <strong>preserve offsets</strong>—two seqnos that differ by 17 will correspond to two absolute seqnos that also differ by 17.” <code>checkpoint</code> 能帮助避免歧义，这里实际上就是 first_unassembled_index。</p>
<p>因此可以将 <strong>checkpoint</strong>（<strong>64位</strong>）利用上面的 wrap 函数转换为 <strong>ckpt</strong>（<strong>32位</strong>），计算 raw_value 和 ckpt 之间的偏移量 offset，再加到 checkpoint 上。这样最终的结果可以大概写成这样：<code>return checkpoint + (raw_value - ckpt)</code> 。</p>
<p>而对于任意一个 $32$ 位的 seqno，有两个点最靠近 <code>checkpoint</code>，一个在左边，一个在右边。在 $32$ 位空间中，从一个点到另一个点，既可以向右移动 $X$ 距离，也可以向左移动 $2^{32}-X$，对应到 $64$ 位空间中，就是 <code>checkpoint</code> 右边：<code>checkpoint + X</code>，左边：<code>checkpoint - (2^32 - X)</code>，因此只需要判断 $X$ 和 $2^{32}-X$ 哪个更小即可。还有一种特殊情况，即如果 <code>checkpoint</code> 不够左移（<code>checkpoint &lt; 2^32 - X</code>），那么就只能选右边的点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">Wrap32::unwrap</span><span class="params">( Wrap32 zero_point, <span class="keyword">uint64_t</span> checkpoint )</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">uint64_t</span> TWO31 = <span class="number">1UL</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">uint64_t</span> TWO32 = <span class="number">1UL</span> &lt;&lt; <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> <span class="keyword">const</span> ckpt32 = wrap( checkpoint, zero_point );</span><br><span class="line">  <span class="keyword">uint64_t</span> <span class="keyword">const</span> dis = raw_value_ - ckpt32.raw_value_;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( dis &lt;= TWO31 || checkpoint + dis &lt; TWO32 ) &#123;</span><br><span class="line">    <span class="keyword">return</span> checkpoint + dis;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> checkpoint + dis - TWO32;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-Implementing-the-TCP-receiver"><a href="#2-2-Implementing-the-TCP-receiver" class="headerlink" title="2.2 Implementing the TCP receiver"></a>2.2 Implementing the TCP receiver</h3></li>
</ul>
<p>CS144 提供了 <code>TCPSenderMessage</code> 和 <code>TCPReceiverMessage</code>，前者用于 receive 后者用于 send。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCPSenderMessage</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Wrap32 seqno &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="keyword">bool</span> SYN &#123; <span class="literal">false</span> &#125;;</span><br><span class="line">  Buffer payload &#123;&#125;;</span><br><span class="line">  <span class="keyword">bool</span> FIN &#123; <span class="literal">false</span> &#125;;</span><br><span class="line">  <span class="comment">// How many sequence numbers does this segment use?</span></span><br><span class="line">  <span class="function"><span class="keyword">size_t</span> <span class="title">sequence_length</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> SYN + payload.size() + FIN; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCPReceiverMessage</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="built_in">std</span>::optional&lt;Wrap32&gt; ackno &#123;&#125;;</span><br><span class="line">  <span class="keyword">uint16_t</span> window_size &#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-1-receive"><a href="#2-2-1-receive" class="headerlink" title="2.2.1 receive()"></a>2.2.1 receive()</h4><ul>
<li>第一个到达的 TCP 报文段中包含 SYN 标志，需要保存其中的 seqno 作为 ISN；</li>
<li>将 payload 部分的数据推送给 Reassembler，FIN 作为标识符控制 push 过程的终止；</li>
</ul>
<p>​    此外，传输的时候使用的是 stream index，而我们收到的是 seqno，因此首先需要将 <strong>seqno 转为 absolute seqno</strong>，我们已经写好了 unwrap 函数，需要提供 first_unassembled_index 作为 checkpoint，也就是下一个需要被 buffer 存储的字节。在 Lab0 中实现的 Writer 类有一个 bytes_pushed() 函数，<code>bytes_pushed() + 1 = checkpoint</code>。</p>
<p>​    <strong>absolute seqno 转换为 stream index</strong> 时需要考虑当前的 message 是否有 SYN 部分。 给 unwrap 提供的 zero_point 是以 SYN 对应的 seqno，若 SYN 在当前的 message 中不存在， 则 zero_point 应当为当前 payload 的第一个字节。 所以有如下转换满足：<code>uint64_t stream_index = abs_seqno - 1 + message.SYN</code>，之后只需要提供 inbound_stream.insert() 所需要的各个变量即可。</p>
<p>​    在 tcp_receiver.hh 中添加一个 <code>std::optional&lt;Wrap32&gt; isn_ &#123;&#125;;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TCPReceiver::receive</span><span class="params">( TCPSenderMessage message, Reassembler&amp; reassembler, Writer&amp; inbound_stream )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( !isn_.has_value() )&#123;</span><br><span class="line">    <span class="keyword">if</span>( !message.SYN ) <span class="keyword">return</span>;</span><br><span class="line">    isn_ = message.seqno;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 1. convert message.seqno to absolute seqno</span></span><br><span class="line">  <span class="comment">// checkpoint, i.e. first unassembled index (stream index)</span></span><br><span class="line">  <span class="keyword">auto</span> <span class="keyword">const</span> checkpoint = inbound_stream.bytes_pushed() + <span class="number">1</span>; <span class="comment">// + 1: stream index to absolute seqno</span></span><br><span class="line">  <span class="keyword">auto</span> <span class="keyword">const</span> abs_seqno = message.seqno.unwrap( isn_.value(), checkpoint );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. convert absolute seqno to stream index</span></span><br><span class="line">  <span class="keyword">auto</span> <span class="keyword">const</span> first_index = message.SYN ? <span class="number">0</span> : abs_seqno - <span class="number">1</span>;</span><br><span class="line">  reassembler.insert( first_index, message.payload.release(), message.FIN, inbound_stream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-2-send"><a href="#2-2-2-send" class="headerlink" title="2.2.2 send()"></a>2.2.2 send()</h4><ul>
<li><p>只有 ackno 是 optional 属性，window_size 是每次都要发送的；</p>
</li>
<li><p>通过 inbound_stream.is_closed() 判断当前是否收到 FIN，同时别忘了传输开始后，SYN 也占一个 seqno 位置。</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">TCPReceiverMessage <span class="title">TCPReceiver::send</span><span class="params">( <span class="keyword">const</span> Writer&amp; inbound_stream )</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  TCPReceiverMessage msg &#123;&#125;;</span><br><span class="line">  <span class="keyword">auto</span> <span class="keyword">const</span> win_sz = inbound_stream.available_capacity();</span><br><span class="line">  msg.window_size = win_sz &lt; UINT16_MAX ? win_sz : UINT16_MAX;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( isn_.has_value() ) &#123;</span><br><span class="line">    <span class="comment">// convert from stream index to abs seqno</span></span><br><span class="line">    <span class="comment">// + 1 for SYN, + inbound_stream.is_closed() for FIN</span></span><br><span class="line">    <span class="keyword">uint64_t</span> <span class="keyword">const</span> abs_seqno = inbound_stream.bytes_pushed() + <span class="number">1</span> + inbound_stream.is_closed();</span><br><span class="line">    msg.ackno = Wrap32::wrap( abs_seqno, isn_.value() );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行测试，结果如下：</p>
<img src="/2023/12/23/CS144-Lab2/TCP receiver test result.png" alt="TCP receiver test result" style="zoom:60%;">
]]></content>
      <categories>
        <category>Stanford-CS144</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>TCP/IP协议栈</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CS144-Lab3</title>
    <url>/2023/12/23/CS144-Lab3/</url>
    <content><![CDATA[<h1 id="Lab-Checkpoint-3-the-TCP-sender"><a href="#Lab-Checkpoint-3-the-TCP-sender" class="headerlink" title="Lab Checkpoint 3: the TCP sender"></a>Lab Checkpoint 3: the TCP sender</h1><h2 id="2-Checkpoint-3-The-TCP-Sender"><a href="#2-Checkpoint-3-The-TCP-Sender" class="headerlink" title="2 Checkpoint 3: The TCP Sender"></a>2 Checkpoint 3: The TCP Sender</h2><p>​    Lab3 将实现 TCP 中的 TCPSender，其需要完成的功能有：</p>
<ul>
<li><strong>跟踪 Receiver 的 TCPReceiverMessage 信息</strong>（<strong>ackno</strong>s 和 <strong>window size</strong>s），通过将 ByteStream 的数据以 TCP Segments 的格式不断发送，<strong>尽可能地填满 window</strong>， 直到 window 满了或者 ByteStream 中没有任何东西可以发送。</li>
<li><strong>跟踪那些已发送但还没有被接收的 segments</strong>， 通常将这些数据被称为 “outstanding” segments。</li>
<li>若是这些 segments 在足够长的时间后没有没接收， 则<strong>重传这些 segments 数据</strong>。</li>
</ul>
<p>​    这些功能实现了 “automatic repeat request (ARQ)” 机制，TCPSender 的任务就是确保 TCPReceiver 能收到每个字节至少一次。</p>
<a id="more"></a>

<h3 id="2-1-How-does-the-TCPSender-know-if-a-segment-was-lost"><a href="#2-1-How-does-the-TCPSender-know-if-a-segment-was-lost" class="headerlink" title="2.1 How does the TCPSender know if a segment was lost?"></a>2.1 How does the TCPSender know if a segment was lost?</h3><p>​    TCPSender 会跟踪那些 outstanding segments 的状态，周期性调用 <code>tick</code> 函数以指示这些 segments 自发出以来所经过的时间。TCPSender 会在内部存储 TCPSenderMessages 的信息并遍历这个集合，找出那些已发出但经过时间太久但还未被接收的 segments 进行数据超时重传，直到所有的 seqno 都被接收。</p>
<ul>
<li>那么如何界定<strong>已发出但经过时间太久</strong>这个定义就尤为重要，太长的等待时间会增加通信延时，而太短的等待时间则会浪费网络存储空间以及增大开销。需要注意如下几点：</li>
</ul>
<ol>
<li><code>tick</code> 函数每隔几毫秒需要调用一次，记录自上一次调用以来经过的时间，并以此记录 TCPSender 存在的总时长。time 以及 clock 这类与操作系统和 CPU 相关的函数不允许调用，否则会导致 TCP 工作异常。</li>
<li><strong>retransmission timeout (RTO)</strong> 在 TCPSender 创建时会进行初始化， 该值始终不变而 RTO 会不断改变（可能为初值的两倍，或者等于初值）以记录 outstanding segments 在超时重传前所经过的时间。</li>
<li>包含数据的 segment 被传输后会启动重传定时器 <strong>timer</strong>，以 tick 为时间单位，直到经过 RTO 时间后会失效。</li>
<li>当所有的 outstanding 数据都被接收后， 服务于重传机制的 timer 将会被停止。</li>
</ol>
<ul>
<li>若是 <code>tick</code> 被调用而 timer 已经失效了：</li>
</ul>
<ol>
<li>重传最早的（seqno 最小的那个）未被接收的 segment。</li>
<li>若此时 window size 非零：<ul>
<li>跟踪记录连续重传的数量，在每次重传后进行累加，TCPConnection 会使用这个信息判断 TCP 连接的可靠性，太多连续的重传意味着 TCP 连接不稳定需要终止。</li>
<li>设置 RTO 值为原来的两倍，”exponential backoff” 以降低较差网络的重传速度，避免网络进一步拥堵。</li>
</ul>
</li>
<li>重置 timer 并启动，使其在 RTO 毫秒之后失效（需要考虑 RTO 已经翻倍）</li>
</ol>
<ul>
<li>当接收方给发送方发送了 ackno 表示成功接收了新的数据（这个 ackno 比之前任何一个 absolute seqno 都要大）：</li>
</ul>
<ol>
<li>将 RTO 设置为其初始值。</li>
<li>如果发送方仍有 outstanding 的数据，timer 需要重启并将会在 RTO 毫秒后失效。</li>
<li>重置前述的连续重传数量为 0。</li>
</ol>
<h3 id="2-2-Implementing-the-TCP-sender"><a href="#2-2-Implementing-the-TCP-sender" class="headerlink" title="2.2 Implementing the TCP sender"></a>2.2 Implementing the TCP sender</h3><p>​    需要实现以下 5 个接口并增添自己所需的变量以及 helper functions。</p>
<ol>
<li><p><code>void push( Reader&amp; outbound_stream );</code></p>
<p>不断读取新的字节，并组装生成 TCPSenderMessage。需要使满足 window 尺寸的 TCPSenderMessage 尽可能大，但上限是 TCPConfig::MAX_PAYLOAD_SIZE (1452 bytes)。TCPSenderMessage::sequence_length() 会用来计算该 segment 占用的 seqno 的尺寸，SYN 和 FIN 都需要计算在内。</p>
<p><strong>注意事项：</strong></p>
<ol>
<li><p>需要注意 window size 最小应当为 $1$。</p>
<blockquote>
<p>仅适用于 push() 函数，当 window size 为 0 时，这时 TCPSender 仍需要发送一个独立的字节，虽然会被 TCPReceiver 拒绝接收但 TCPReceiver 会返回一个 TCPReceiverMessage 数据，这个信息可以告知 TCPSender window 中是否有新的用于传输的空间。否则 TCPSender 将无法确定何时发送新的 segment。</p>
</blockquote>
</li>
<li><p>需要两个布尔变量来记录是否需要给传输的 TCPSenderMessage 增加 SYN 标志或者 FIN 标志。此外，FIN 标志设定有一定的条件限制：</p>
<ul>
<li>FIN 之前没设定过；</li>
<li>Reader 已经没有数据了；</li>
<li>设置完 SYN 和 payload 之后的 window size 还要能容纳一个 FIN 的位置，如果本次 FIN 没有传输，就下次传输，不会有什么影响。</li>
</ul>
</li>
<li><p>另外，只有在 outstanding segments 清空后我们才需要在传输新的 TCPSenderMessage 时重置 timer，否则 timer 将在很大程度上失去其基本作用。每次传输都需要更新 outstanding segments 集合以及发送的 seqno 数量，next_seqno 等信息。</p>
</li>
</ol>
</li>
<li><p><code>std::optional&lt;TCPSenderMessage&gt; maybe_send();</code></p>
<p>创建一个队列变量 queued_segments_ 来管理需要发送的 segments，使用队列可以保证传输的先后顺序。</p>
</li>
<li><p><code>void receive( const TCPReceiverMessage&amp; msg );</code></p>
<p>接收的 window 范围是 [ackno, ackno + window size]，TCPSender 需要遍历 outstanding_segments_ 集合将其中已经被 ACK 的部分移除（ackno 比 segments 中所有的 seqno 都要大的那些 segments）。</p>
<p><strong>注意事项：</strong>接收的 TCPReceiveMessage 中的 ackno 可能为空，这时候不能直接返回，有可能是我们传输了一个 empty message 去获取 window size 而返回的一个包。因此，我们仅需要更新 window_size_ 变量即可。</p>
</li>
<li><p><code>void tick( const size_t ms_since_last_tick );</code> 计时单位，得到与上次该函数被调用的时间间隔。</p>
<p>除了要创建一个 timer_ 变量存储时间外，在 tick 中还需要做 2.1 TCPSender 如何监测丢包中的几件事：</p>
<ul>
<li>若 outstanding segments 存在且 timer 失效，重传时间最早的那个 segments。</li>
<li>window size 非零时累加连续重传数量，并进行 “exponential backoff”。</li>
<li>重置 timer 的值为 0，为下一次重传准备。</li>
</ul>
</li>
<li><p><code>void send_empty_message();</code> 发送长度为零并且 seqno 正确的 TCPSenderMessage，在 TCPReceiver 希望通过 TCPReceiverMessage 获取一些特定信息的时候特别有用，这个和 push 中的那个想法很类似。</p>
<p><strong>注意事项：</strong>这种长度为 0 的 segments 不需要被监测并纳入 outstanding segments 用以重传。只需要返回一个仅有 ackno 被赋值为下一个需要接收的字节的 seqno 的 TCPSenderMessage。</p>
</li>
</ol>
<p>​    整体代码如下：</p>
<ul>
<li><code>tcp_sender.hh</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;byte_stream.hh&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tcp_receiver_message.hh&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tcp_sender_message.hh&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">uint64_t</span> initial_RTO_ms_;</span><br><span class="line">  <span class="keyword">uint64_t</span> curr_RTO_ms;</span><br><span class="line">  <span class="keyword">size_t</span> time_ms_ &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="keyword">bool</span> running_ &#123; <span class="literal">false</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  explicit Timer( uint64_t init_RTO ) : initial_RTO_ms_( init_RTO ), curr_RTO_ms( init_RTO ) &#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    running_ = <span class="literal">true</span>;</span><br><span class="line">    time_ms_ = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123; running_ = <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_running</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> running_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">is_expired</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> running_ &amp;&amp; ( time_ms_ &gt;= curr_RTO_ms ); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">tick</span><span class="params">( <span class="keyword">size_t</span> <span class="keyword">const</span> ms_since_last_tick )</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( running_ ) &#123;</span><br><span class="line">      time_ms_ += ms_since_last_tick;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">double_RTO</span><span class="params">()</span> </span>&#123; curr_RTO_ms *= <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">reset_RTO</span><span class="params">()</span> </span>&#123; curr_RTO_ms = initial_RTO_ms_; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TCPSender</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Wrap32 isn_;</span><br><span class="line">  <span class="keyword">uint64_t</span> initial_RTO_ms_;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">bool</span> syn_ &#123; <span class="literal">false</span> &#125;;</span><br><span class="line">  <span class="keyword">bool</span> fin_ &#123; <span class="literal">false</span> &#125;;</span><br><span class="line">  <span class="keyword">unsigned</span> retransmit_cnt_ &#123; <span class="number">0</span> &#125;; <span class="comment">// consecutive re-transmit count</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">uint64_t</span> acked_seqno_ &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="keyword">uint64_t</span> next_seqno_ &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="keyword">uint16_t</span> window_size_ &#123; <span class="number">1</span> &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">uint64_t</span> outstanding_cnt_ &#123; <span class="number">0</span> &#125;; <span class="comment">// sequence_numbers_in_flight</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;TCPSenderMessage&gt; outstanding_segments_ &#123;&#125;;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;TCPSenderMessage&gt; queued_segments_ &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  Timer timer_ &#123; initial_RTO_ms_ &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">/* Construct TCP sender with given default Retransmission Timeout and possible ISN */</span></span><br><span class="line">  TCPSender( <span class="keyword">uint64_t</span> initial_RTO_ms, <span class="built_in">std</span>::optional&lt;Wrap32&gt; fixed_isn );</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Push bytes from the outbound stream */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">( Reader&amp; outbound_stream )</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Send a TCPSenderMessage if needed (or empty optional otherwise) */</span></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::optional&lt;TCPSenderMessage&gt; <span class="title">maybe_send</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Generate an empty TCPSenderMessage */</span></span><br><span class="line">  <span class="function">TCPSenderMessage <span class="title">send_empty_message</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Receive an act on a TCPReceiverMessage from the peer&#x27;s receiver */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">receive</span><span class="params">( <span class="keyword">const</span> TCPReceiverMessage&amp; msg )</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Time has passed by the given # of milliseconds since the last time the tick() method was called. */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">tick</span><span class="params">( <span class="keyword">uint64_t</span> ms_since_last_tick )</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Accessors for use in testing */</span></span><br><span class="line">  <span class="function"><span class="keyword">uint64_t</span> <span class="title">sequence_numbers_in_flight</span><span class="params">()</span> <span class="keyword">const</span></span>;  <span class="comment">// How many sequence numbers are outstanding?</span></span><br><span class="line">  <span class="function"><span class="keyword">uint64_t</span> <span class="title">consecutive_retransmissions</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// How many consecutive *re*transmissions have happened?</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>tcp_sender.cc</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tcp_sender.hh&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;tcp_config.hh&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* TCPSender constructor (uses a random ISN if none given) */</span></span><br><span class="line">TCPSender::TCPSender( <span class="keyword">uint64_t</span> initial_RTO_ms, optional&lt;Wrap32&gt; fixed_isn )</span><br><span class="line">  : isn_( fixed_isn.value_or( Wrap32 &#123; random_device()() &#125; ) ), initial_RTO_ms_( initial_RTO_ms )</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">TCPSender::sequence_numbers_in_flight</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> outstanding_cnt_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">TCPSender::consecutive_retransmissions</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> retransmit_cnt_;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">optional&lt;TCPSenderMessage&gt; <span class="title">TCPSender::maybe_send</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( queued_segments_.empty() ) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !timer_.is_running() ) &#123;</span><br><span class="line">    timer_.start();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">auto</span> msg = queued_segments_.front();</span><br><span class="line">  queued_segments_.pop();</span><br><span class="line">  <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TCPSender::push</span><span class="params">( Reader&amp; outbound_stream )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> curr_window_size = window_size_ != <span class="number">0</span> ? window_size_ : <span class="number">1</span>; <span class="comment">// Special case for a zero-size window.</span></span><br><span class="line">  <span class="keyword">while</span> ( outstanding_cnt_ &lt; curr_window_size ) &#123;</span><br><span class="line">    TCPSenderMessage msg; <span class="comment">// seqno, SYN, payload, FIN</span></span><br><span class="line">    <span class="keyword">if</span> ( !syn_ ) &#123;</span><br><span class="line">      syn_ = msg.SYN = <span class="literal">true</span>;</span><br><span class="line">      outstanding_cnt_ += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    msg.seqno = Wrap32::wrap( next_seqno_, isn_ );</span><br><span class="line">    <span class="keyword">auto</span> <span class="keyword">const</span> payload_size = min( TCPConfig::MAX_PAYLOAD_SIZE, curr_window_size - outstanding_cnt_ );</span><br><span class="line">    read( outbound_stream, payload_size, msg.payload );</span><br><span class="line">    outstanding_cnt_ += msg.payload.size();</span><br><span class="line">    <span class="keyword">if</span> ( !fin_ &amp;&amp; outbound_stream.is_finished() &amp;&amp; outstanding_cnt_ &lt; curr_window_size ) &#123;</span><br><span class="line">      fin_ = msg.FIN = <span class="literal">true</span>;</span><br><span class="line">      outstanding_cnt_ += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( msg.sequence_length() == <span class="number">0</span> ) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    queued_segments_.push( msg );</span><br><span class="line">    next_seqno_ += msg.sequence_length();</span><br><span class="line">    outstanding_segments_.push( msg );</span><br><span class="line">    <span class="keyword">if</span> ( msg.FIN || outbound_stream.bytes_buffered() == <span class="number">0</span> ) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TCPSenderMessage <span class="title">TCPSender::send_empty_message</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> seqno = Wrap32::wrap( next_seqno_, isn_ );</span><br><span class="line">  <span class="keyword">return</span> &#123; seqno, <span class="literal">false</span>, &#123;&#125;, <span class="literal">false</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TCPSender::receive</span><span class="params">( <span class="keyword">const</span> TCPReceiverMessage&amp; msg )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  window_size_ = msg.window_size;</span><br><span class="line">  <span class="keyword">if</span> ( msg.ackno.has_value() ) &#123;</span><br><span class="line">    <span class="keyword">auto</span> ackno = msg.ackno.value().unwrap( isn_, next_seqno_ );</span><br><span class="line">    <span class="keyword">if</span> ( ackno &gt; next_seqno_ ) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    acked_seqno_ = ackno;</span><br><span class="line">    <span class="keyword">while</span> ( !outstanding_segments_.empty() ) &#123;</span><br><span class="line">      <span class="keyword">auto</span>&amp; front_msg = outstanding_segments_.front();</span><br><span class="line">      <span class="keyword">if</span> ( front_msg.seqno.unwrap( isn_, next_seqno_ ) + front_msg.sequence_length() &lt;= acked_seqno_ ) &#123;</span><br><span class="line">        outstanding_cnt_ -= front_msg.sequence_length();</span><br><span class="line">        outstanding_segments_.pop();</span><br><span class="line">        timer_.reset_RTO();</span><br><span class="line">        <span class="keyword">if</span> ( !outstanding_segments_.empty() ) &#123;</span><br><span class="line">          timer_.start();</span><br><span class="line">        &#125;</span><br><span class="line">        retransmit_cnt_ = <span class="number">0</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( outstanding_segments_.empty() ) &#123;</span><br><span class="line">      timer_.stop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TCPSender::tick</span><span class="params">( <span class="keyword">const</span> <span class="keyword">size_t</span> ms_since_last_tick )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  timer_.tick( ms_since_last_tick );</span><br><span class="line">  <span class="keyword">if</span> ( timer_.is_expired() ) &#123;</span><br><span class="line">    queued_segments_.push( outstanding_segments_.front() );</span><br><span class="line">    <span class="keyword">if</span> ( window_size_ != <span class="number">0</span> ) &#123;</span><br><span class="line">      ++retransmit_cnt_;</span><br><span class="line">      timer_.double_RTO();</span><br><span class="line">    &#125;</span><br><span class="line">    timer_.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    运行测试，结果如下：</p>
<img src="/2023/12/23/CS144-Lab3/TCP sender test result.png" alt="TCP sender test result" style="zoom:60%;">
]]></content>
      <categories>
        <category>Stanford-CS144</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>TCP/IP协议栈</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CS144-Lab4</title>
    <url>/2023/12/23/CS144-Lab4/</url>
    <content><![CDATA[<h1 id="Lab-Checkpoint-4-down-the-stack-the-network-interface"><a href="#Lab-Checkpoint-4-down-the-stack-the-network-interface" class="headerlink" title="Lab Checkpoint 4: down the stack (the network interface)"></a>Lab Checkpoint 4: down the stack (the network interface)</h1><h2 id="0-Overview"><a href="#0-Overview" class="headerlink" title="0. Overview"></a>0. Overview</h2><img src="/2023/12/23/CS144-Lab4/The network interface.png" alt="The network interface" style="zoom:50%;">

<p>​    Lab4 要求实现网络接口部分，打通网络数据报（Internet datagrams）和链路层的以太网帧（link-layer Ethernet frames）之间的桥梁。之前的实验实现了 TCP segments 在使用 TCP 协议的设备之间的传输，而 TCP 报文有三种方式可被传送至远程服务器：</p>
<a id="more"></a>

<ul>
<li><p><strong>TCP-in-UDP-in-IP</strong>：TCP 报文会被置于用户的数据报的 payload 中，在用户空间下这是最简单的实现方式：Linux 提供接口（如 UDPSocket），而用户仅需要提供 payload，目标地址，Linux 内核会负责将 UDP 报部，IP 报头，以太网报头组装起来，将这个网络包发向下一个 hop。<strong>Linux 内核会保证每个 socket 具有独占的本地与远端地址以及端口号，并且保证这些数据在应用层的相互隔离。</strong></p>
</li>
<li><p><strong>TCP-in-IP</strong>：一般情况下，TCP 报文会直接放在 Internet datagrams 中，这通常被成为 “TCP/IP”。Linux 会提供一个 TUN 设备接口，需要应用层提供整个 Internet datagram，而 Linux 内核则会处理剩下的部分。但此时应用层需要自己构建整个 IP 报头以及 payload 部分。</p>
</li>
<li><p><strong>TCP-in-IP-in-Ethernet</strong>：以上的方法依赖 Linux 内核来实现的协议栈操作，每次用户向 TUN 设备写入 IP datagrams 时，Linux 都需要构建正确的带有 IP datagrams 的以太网帧作为 payload。这意味着 Linux 需要知悉下一跳的 IP 地址对应的以太网目的地址，否则 Linux 会以广播的形式请求这些信息：”Who claims the following IP address ? “、”What’s your Ethernet address ? “</p>
</li>
</ul>
<p>​    这些功能是由 Network Interface 实现的，该组件能将 IP 数据报转义成以太网帧等等，之后会传入 TAP 设备（类似 TUN 设备但更底层），实现对 link-layer 的数据帧的传输。</p>
<p>​    网络接口的大部分工作是：<strong>为每个下一跳 IP 地址查找（和缓存）对应的以太网地址</strong>。而对应的协议被称为：**地址解析协议 ARP (Address Resolution Protocol)**。</p>
<h2 id="2-Checkpoint-4-The-Address-Resolution-Protocol"><a href="#2-Checkpoint-4-The-Address-Resolution-Protocol" class="headerlink" title="2. Checkpoint 4: The Address Resolution Protocol"></a>2. Checkpoint 4: The Address Resolution Protocol</h2><p>​    Lab4 Network Interface 的主要任务：维护一个 IP 地址到 Ethernet 地址的映射表。这个映射类似缓存，或称作 “soft state”，能提高网络栈的传输效率。</p>
<ol>
<li><p><code>void NetworkInterface::send_datagram(const InternetDatagram &amp;dgram, constAddress &amp;next_hop);</code> 该方法被 TCPConnection 或者 router 所调用，这个接口就是将待发送的 Internet (IP) datagrams 转换成以太网帧并最终发送出去。</p>
<ul>
<li><p>如果以太网目的地址已知就直接发送，创建以太网帧（<code>type = EthernetHeader::TYPE_IPv4</code>），将 payload 设置为串行的数据报文，并设置源地址和目标地址。</p>
</li>
<li><p>如果以太网目的地址未知，广播下一跳的以太网地址的 ARP 请求，并将 IP 报文放入队列中待 ARP 回复收到后将其发送出去。</p>
</li>
</ul>
<p><strong>注意事项：</strong>需要<strong>间隔 $5$ 秒</strong>再发送相同的 ARP 请求，并且只有在收到目的以太网地址后再将数据报放入队列中。若没有收到目的以太网地址，需要将 datagram 以及其对应的 Address 都暂存在列表中</p>
</li>
<li><p><code>optional&lt;InternetDatagram&gt; NetworkInterface::recv_frame(const EthernetFrame&amp; frame);</code> 该方法接收来自网络的以太网帧，但需要忽略任何目的地址非网络接口部分的帧 （也就是只接受<strong>广播地址</strong>或者<strong>接口自身的以太网地址</strong>）。</p>
<ul>
<li><p>若为 IPv4 帧就将其以 InternetDatagram 进行解析，若成功则将解析的 InternetDatagram 返回给调用者。</p>
</li>
<li><p>若为 ARP 帧就将其以 ARPMessage 进行解析，若成功则<strong>缓存发送方 IP 地址与以太网帧的映射 30 秒</strong>。若这个 ARP 请求是询问我们的 IP 地址，就发送正确的 ARP 答复。</p>
</li>
</ul>
</li>
<li><p><code>std::optional&lt;EthernetFrame&gt; maybe_send();</code> 在必要时发送 EthernetFrame。</p>
</li>
<li><p><code>void NetworkInterface::tick(const size_t ms_since_last_tick);</code> 记录时间，使得任何已经过期的 IP 地址到 Ethernet 地址的映射失效。</p>
</li>
</ol>
<p>​    整体代码如下：</p>
<ul>
<li><code>network_interface.hh</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;address.hh&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ethernet_frame.hh&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ipv4_datagram.hh&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;optional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A &quot;network interface&quot; that connects IP (the internet layer, or network layer)</span></span><br><span class="line"><span class="comment">// with Ethernet (the network access layer, or link layer).</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This module is the lowest layer of a TCP/IP stack</span></span><br><span class="line"><span class="comment">// (connecting IP with the lower-layer network protocol,</span></span><br><span class="line"><span class="comment">// e.g. Ethernet). But the same module is also used repeatedly</span></span><br><span class="line"><span class="comment">// as part of a router: a router generally has many network</span></span><br><span class="line"><span class="comment">// interfaces, and the router&#x27;s job is to route Internet datagrams</span></span><br><span class="line"><span class="comment">// between the different interfaces.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The network interface translates datagrams (coming from the</span></span><br><span class="line"><span class="comment">// &quot;customer,&quot; e.g. a TCP/IP stack or router) into Ethernet</span></span><br><span class="line"><span class="comment">// frames. To fill in the Ethernet destination address, it looks up</span></span><br><span class="line"><span class="comment">// the Ethernet address of the next IP hop of each datagram, making</span></span><br><span class="line"><span class="comment">// requests with the [Address Resolution Protocol](\ref rfc::rfc826).</span></span><br><span class="line"><span class="comment">// In the opposite direction, the network interface accepts Ethernet</span></span><br><span class="line"><span class="comment">// frames, checks if they are intended for it, and if so, processes</span></span><br><span class="line"><span class="comment">// the the payload depending on its type. If it&#x27;s an IPv4 datagram,</span></span><br><span class="line"><span class="comment">// the network interface passes it up the stack. If it&#x27;s an ARP</span></span><br><span class="line"><span class="comment">// request or reply, the network interface processes the frame</span></span><br><span class="line"><span class="comment">// and learns or replies as necessary.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkInterface</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">// Ethernet (known as hardware, network-access, or link-layer) address of the interface</span></span><br><span class="line">  EthernetAddress ethernet_address_;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IP (known as Internet-layer or network-layer) address of the interface</span></span><br><span class="line">  Address ip_address_;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">uint32_t</span>, <span class="built_in">std</span>::<span class="built_in">pair</span>&lt;EthernetAddress, <span class="keyword">size_t</span>&gt;&gt; ip2ether_ &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">uint32_t</span>, <span class="keyword">size_t</span>&gt; arp_timer_ &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">size_t</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;InternetDatagram&gt;&gt; waited_dgrams_ &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;EthernetFrame&gt; out_frames_ &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// Construct a network interface with given Ethernet (network-access-layer) and IP (internet-layer)</span></span><br><span class="line">  <span class="comment">// addresses</span></span><br><span class="line">  NetworkInterface( <span class="keyword">const</span> EthernetAddress&amp; ethernet_address, <span class="keyword">const</span> Address&amp; ip_address );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Access queue of Ethernet frames awaiting transmission</span></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::optional&lt;EthernetFrame&gt; <span class="title">maybe_send</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Sends an IPv4 datagram, encapsulated in an Ethernet frame (if it knows the Ethernet destination</span></span><br><span class="line">  <span class="comment">// address). Will need to use [ARP](\ref rfc::rfc826) to look up the Ethernet destination address</span></span><br><span class="line">  <span class="comment">// for the next hop.</span></span><br><span class="line">  <span class="comment">// (&quot;Sending&quot; is accomplished by making sure maybe_send() will release the frame when next called,</span></span><br><span class="line">  <span class="comment">// but please consider the frame sent as soon as it is generated.)</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">send_datagram</span><span class="params">( <span class="keyword">const</span> InternetDatagram&amp; dgram, <span class="keyword">const</span> Address&amp; next_hop )</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Receives an Ethernet frame and responds appropriately.</span></span><br><span class="line">  <span class="comment">// If type is IPv4, returns the datagram.</span></span><br><span class="line">  <span class="comment">// If type is ARP request, learn a mapping from the &quot;sender&quot; fields, and send an ARP reply.</span></span><br><span class="line">  <span class="comment">// If type is ARP reply, learn a mapping from the &quot;sender&quot; fields.</span></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::optional&lt;InternetDatagram&gt; <span class="title">recv_frame</span><span class="params">( <span class="keyword">const</span> EthernetFrame&amp; frame )</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Called periodically when time elapses</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">tick</span><span class="params">( <span class="keyword">size_t</span> ms_since_last_tick )</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>network_interface.cc</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;network_interface.hh&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;arp_message.hh&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ethernet_frame.hh&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ethernet_address: Ethernet (what ARP calls &quot;hardware&quot;) address of the interface</span></span><br><span class="line"><span class="comment">// ip_address: IP (what ARP calls &quot;protocol&quot;) address of the interface</span></span><br><span class="line">NetworkInterface::NetworkInterface( <span class="keyword">const</span> EthernetAddress&amp; ethernet_address, <span class="keyword">const</span> Address&amp; ip_address )</span><br><span class="line">  : ethernet_address_( ethernet_address ), ip_address_( ip_address )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;DEBUG: Network interface has Ethernet address &quot;</span> &lt;&lt; to_string( ethernet_address_ ) &lt;&lt; <span class="string">&quot; and IP address &quot;</span></span><br><span class="line">       &lt;&lt; ip_address.ip() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dgram: the IPv4 datagram to be sent</span></span><br><span class="line"><span class="comment">// next_hop: the IP address of the interface to send it to (typically a router or default gateway, but</span></span><br><span class="line"><span class="comment">// may also be another host if directly connected to the same network as the destination)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Note: the Address type can be converted to a uint32_t (raw 32-bit IP address) by using the</span></span><br><span class="line"><span class="comment">// Address::ipv4_numeric() method.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NetworkInterface::send_datagram</span><span class="params">( <span class="keyword">const</span> InternetDatagram&amp; dgram, <span class="keyword">const</span> Address&amp; next_hop )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> <span class="keyword">const</span>&amp; target_ip = next_hop.ipv4_numeric();</span><br><span class="line">  <span class="keyword">if</span> ( ip2ether_.contains( target_ip ) ) &#123;</span><br><span class="line">    EthernetFrame frame &#123; &#123; ip2ether_[target_ip].first, ethernet_address_, EthernetHeader::TYPE_IPv4 &#125;,</span><br><span class="line">                          serialize( dgram ) &#125;;</span><br><span class="line">    out_frames_.push( <span class="built_in">std</span>::move( frame ) );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !arp_timer_.contains( target_ip ) ) &#123;</span><br><span class="line">      ARPMessage request_msg;</span><br><span class="line">      request_msg.opcode = ARPMessage::OPCODE_REQUEST;</span><br><span class="line">      request_msg.sender_ethernet_address = ethernet_address_;</span><br><span class="line">      request_msg.sender_ip_address = ip_address_.ipv4_numeric();</span><br><span class="line">      request_msg.target_ip_address = target_ip;</span><br><span class="line">      EthernetFrame frame &#123; &#123; ETHERNET_BROADCAST, ethernet_address_, EthernetHeader::TYPE_ARP &#125;,</span><br><span class="line">                            serialize( request_msg ) &#125;;</span><br><span class="line">      out_frames_.push( <span class="built_in">std</span>::move( frame ) );</span><br><span class="line">      arp_timer_.emplace( target_ip, <span class="number">0</span> );</span><br><span class="line">      waited_dgrams_.insert( &#123; target_ip, &#123; dgram &#125; &#125; );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      waited_dgrams_[target_ip].push_back( dgram );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// frame: the incoming Ethernet frame</span></span><br><span class="line"><span class="function">optional&lt;InternetDatagram&gt; <span class="title">NetworkInterface::recv_frame</span><span class="params">( <span class="keyword">const</span> EthernetFrame&amp; frame )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( frame.header.dst != ethernet_address_ &amp;&amp; frame.header.dst != ETHERNET_BROADCAST ) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( frame.header.type == EthernetHeader::TYPE_IPv4 ) &#123;</span><br><span class="line">    InternetDatagram dgram;</span><br><span class="line">    <span class="keyword">if</span> ( parse( dgram, frame.payload ) ) &#123;</span><br><span class="line">      <span class="keyword">return</span> dgram;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( frame.header.type == EthernetHeader::TYPE_ARP ) &#123;</span><br><span class="line">    ARPMessage msg;</span><br><span class="line">    <span class="keyword">if</span> ( parse( msg, frame.payload ) ) &#123;</span><br><span class="line">      ip2ether_.insert( &#123; msg.sender_ip_address, &#123; msg.sender_ethernet_address, <span class="number">0</span> &#125; &#125; );</span><br><span class="line">      <span class="keyword">if</span> ( msg.opcode == ARPMessage::OPCODE_REQUEST ) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( msg.target_ip_address == ip_address_.ipv4_numeric() ) &#123;</span><br><span class="line">          ARPMessage reply_msg;</span><br><span class="line">          reply_msg.opcode = ARPMessage::OPCODE_REPLY;</span><br><span class="line">          reply_msg.sender_ethernet_address = ethernet_address_;</span><br><span class="line">          reply_msg.sender_ip_address = ip_address_.ipv4_numeric();</span><br><span class="line">          reply_msg.target_ethernet_address = msg.sender_ethernet_address;</span><br><span class="line">          reply_msg.target_ip_address = msg.sender_ip_address;</span><br><span class="line">          EthernetFrame reply_frame &#123; &#123; msg.sender_ethernet_address, ethernet_address_, EthernetHeader::TYPE_ARP &#125;,</span><br><span class="line">                                      serialize( reply_msg ) &#125;;</span><br><span class="line">          out_frames_.push( <span class="built_in">std</span>::move( reply_frame ) );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( msg.opcode == ARPMessage::OPCODE_REPLY ) &#123;</span><br><span class="line">        ip2ether_.insert( &#123; msg.sender_ip_address, &#123; msg.sender_ethernet_address, <span class="number">0</span> &#125; &#125; );</span><br><span class="line">        <span class="keyword">auto</span> <span class="keyword">const</span>&amp; dgrams = waited_dgrams_[msg.sender_ip_address];</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">auto</span> <span class="keyword">const</span>&amp; dgram : dgrams ) &#123;</span><br><span class="line">          send_datagram( dgram, Address::from_ipv4_numeric( msg.sender_ip_address ) );</span><br><span class="line">        &#125;</span><br><span class="line">        waited_dgrams_.erase( msg.sender_ip_address );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ms_since_last_tick: the number of milliseconds since the last call to this method</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NetworkInterface::tick</span><span class="params">( <span class="keyword">const</span> <span class="keyword">size_t</span> ms_since_last_tick )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">size_t</span> IP_MAP_TTL = <span class="number">30000</span>;     <span class="comment">// 30s</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">size_t</span> ARP_REQUEST_TTL = <span class="number">5000</span>; <span class="comment">// 5s</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">auto</span> it = ip2ether_.begin(); it != ip2ether_.end(); ) &#123;</span><br><span class="line">    it-&gt;second.second += ms_since_last_tick;</span><br><span class="line">    <span class="keyword">if</span> ( it-&gt;second.second &gt;= IP_MAP_TTL ) &#123;</span><br><span class="line">      it = ip2ether_.erase( it );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ++it;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">auto</span> it = arp_timer_.begin(); it != arp_timer_.end(); ) &#123;</span><br><span class="line">    it-&gt;second += ms_since_last_tick;</span><br><span class="line">    <span class="keyword">if</span> ( it-&gt;second &gt;= ARP_REQUEST_TTL ) &#123;</span><br><span class="line">      it = arp_timer_.erase( it );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ++it;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">optional&lt;EthernetFrame&gt; <span class="title">NetworkInterface::maybe_send</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( out_frames_.empty() ) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">auto</span> frame = out_frames_.front();</span><br><span class="line">  out_frames_.pop();</span><br><span class="line">  <span class="keyword">return</span> frame;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    运行测试，结果如下：</p>
<img src="/2023/12/23/CS144-Lab4/net_interface test result.png" alt="net_interface test result" style="zoom:67%;">
]]></content>
      <categories>
        <category>Stanford-CS144</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>TCP/IP协议栈</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CS144-Lab5</title>
    <url>/2023/12/23/CS144-Lab5/</url>
    <content><![CDATA[<h1 id="Lab-Checkpoint-5-building-an-IP-router"><a href="#Lab-Checkpoint-5-building-an-IP-router" class="headerlink" title="Lab Checkpoint 5: building an IP router"></a>Lab Checkpoint 5: building an IP router</h1><h2 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h2><img src="/2023/12/23/CS144-Lab5/IP router structure.png" alt="IP router structure" style="zoom:60%;">

<p>​    Lab5 要求实现一个简易的路由器，通常路由器会有多个网络接口，能够从任意一个接口接收网络数据报。路由器的作用就是将 datagrams 依据路由表进行转发，路由表定义了路由转发的一些规则：</p>
<a id="more"></a>

<ol>
<li>确定转发的接口；</li>
<li>确定下一跳的 IP 地址；</li>
</ol>
<p>​    在 Lab5 中需要实现一个新的 Router 类，<strong>跟踪路由表信息</strong>并且将接收到的每个 datagram 通过正确的输出端 NetworkInterface <strong>正确转发</strong>到下一跳。后续需要通过 IP 的<strong>最长前缀匹配</strong>来实现路由的功能，这也是实验中最为棘手的部分。</p>
<h2 id="3-Implementing-the-Router"><a href="#3-Implementing-the-Router" class="headerlink" title="3. Implementing the Router"></a>3. Implementing the Router</h2><ol>
<li><code>void add_route(uint32_t route_prefix, uint8_t prefix_length, optional&lt;Address&gt; next_hop, size_t interface_num);</code> 调用该方法将路由信息添加到路由表中，需要自己添加存储相关信息的数据结构。</li>
<li><code>void route();</code> 该方法需要对输入的 datagrams 进行路由，将其通过正确的网络接口转发到下一跳，这需要实现 “最长前缀匹配 （longest-prefix match）” 以找到最合适的路由方案，该方法有如下细节需要实现：<ul>
<li>路由器需要搜索路由表找到匹配 datagrams 中的目的地址的那个路由。这意味着目的地址的 prefix_length bits 需要与 route_prefix 的 prefix_length bits 完全一致。</li>
<li>在匹配的路由方案中路由器选择 prefix_length 值最大的那个，即 “最长前缀匹配” 的路由。</li>
<li>如果没有匹配的路由信息，则丢弃该 datagram。</li>
<li>每一跳都需要减少 datagrams 的 TTL (time to live)。如果 TTL 已经归零或者在本次减一后到零，路由器同样需要丢弃该项 datagram。</li>
<li>最终，路由器需要将修改过的 datagram 通过合适的网络接口（<code>interface(interface_num).send_datagram()</code>）发送到下一跳。</li>
</ul>
</li>
</ol>
<p>​    <strong>注意事项：</strong>在修改了 dgram.header.ttl 后一定要重新计算 checksum，否则执行测试案例解析 InternetDatagram 的时候会出错。</p>
<h2 id="5-Simulated-router-and-interfaces-topology"><a href="#5-Simulated-router-and-interfaces-topology" class="headerlink" title="5. Simulated router and interfaces topology"></a>5. Simulated router and interfaces topology</h2><img src="/2023/12/23/CS144-Lab5/Simulated router and interfaces topology.png" alt="Simulated router and interfaces topology" style="zoom:50%;">

<p>​    完整代码如下：</p>
<ul>
<li><code>router.hh</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;network_interface.hh&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;optional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A wrapper for NetworkInterface that makes the host-side</span></span><br><span class="line"><span class="comment">// interface asynchronous: instead of returning received datagrams</span></span><br><span class="line"><span class="comment">// immediately (from the `recv_frame` method), it stores them for</span></span><br><span class="line"><span class="comment">// later retrieval. Otherwise, behaves identically to the underlying</span></span><br><span class="line"><span class="comment">// implementation of NetworkInterface.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncNetworkInterface</span> :</span> <span class="keyword">public</span> NetworkInterface</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;InternetDatagram&gt; datagrams_in_ &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">using</span> NetworkInterface::NetworkInterface;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Construct from a NetworkInterface</span></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">AsyncNetworkInterface</span><span class="params">( NetworkInterface&amp;&amp; interface )</span> : <span class="title">NetworkInterface</span><span class="params">( interface )</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// \brief Receives and Ethernet frame and responds appropriately.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// - If type is IPv4, pushes to the `datagrams_out` queue for later retrieval by the owner.</span></span><br><span class="line">  <span class="comment">// - If type is ARP request, learn a mapping from the &quot;sender&quot; fields, and send an ARP reply.</span></span><br><span class="line">  <span class="comment">// - If type is ARP reply, learn a mapping from the &quot;target&quot; fields.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// \param[in] frame the incoming Ethernet frame</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">recv_frame</span><span class="params">( <span class="keyword">const</span> EthernetFrame&amp; frame )</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> optional_dgram = NetworkInterface::recv_frame( frame );</span><br><span class="line">    <span class="keyword">if</span> ( optional_dgram.has_value() ) &#123;</span><br><span class="line">      datagrams_in_.push( <span class="built_in">std</span>::move( optional_dgram.value() ) );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Access queue of Internet datagrams that have been received</span></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::optional&lt;InternetDatagram&gt; <span class="title">maybe_receive</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( datagrams_in_.empty() ) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    InternetDatagram datagram = <span class="built_in">std</span>::move( datagrams_in_.front() );</span><br><span class="line">    datagrams_in_.pop();</span><br><span class="line">    <span class="keyword">return</span> datagram;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A router that has multiple network interfaces and</span></span><br><span class="line"><span class="comment">// performs longest-prefix-match routing between them.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Item</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> route_prefix &#123;&#125;;</span><br><span class="line">    <span class="keyword">uint8_t</span> prefix_length &#123;&#125;;</span><br><span class="line">    <span class="built_in">std</span>::optional&lt;Address&gt; next_hop;</span><br><span class="line">    <span class="keyword">size_t</span> interface_num &#123;&#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The router&#x27;s collection of network interfaces</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AsyncNetworkInterface&gt; interfaces_ &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Item&gt; routing_table_ &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Item&gt;::<span class="function">iterator <span class="title">longest_prefix_match_</span><span class="params">( <span class="keyword">uint32_t</span> dst_ip )</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">match_length_</span><span class="params">( <span class="keyword">uint32_t</span> src_ip, <span class="keyword">uint32_t</span> tgt_ip, <span class="keyword">uint8_t</span> tgt_len )</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// Add an interface to the router</span></span><br><span class="line">  <span class="comment">// interface: an already-constructed network interface</span></span><br><span class="line">  <span class="comment">// returns the index of the interface after it has been added to the router</span></span><br><span class="line">  <span class="function"><span class="keyword">size_t</span> <span class="title">add_interface</span><span class="params">( AsyncNetworkInterface&amp;&amp; interface )</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    interfaces_.push_back( <span class="built_in">std</span>::move( interface ) );</span><br><span class="line">    <span class="keyword">return</span> interfaces_.size() - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Access an interface by index</span></span><br><span class="line">  <span class="function">AsyncNetworkInterface&amp; <span class="title">interface</span><span class="params">( <span class="keyword">size_t</span> N )</span> </span>&#123; <span class="keyword">return</span> interfaces_.at( N ); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add a route (a forwarding rule)</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add_route</span><span class="params">( <span class="keyword">uint32_t</span> route_prefix,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">uint8_t</span> prefix_length,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="built_in">std</span>::optional&lt;Address&gt; next_hop,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">size_t</span> interface_num )</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Route packets between the interfaces. For each interface, use the</span></span><br><span class="line">  <span class="comment">// maybe_receive() method to consume every incoming datagram and</span></span><br><span class="line">  <span class="comment">// send it on one of interfaces to the correct next hop. The router</span></span><br><span class="line">  <span class="comment">// chooses the outbound interface and next-hop as specified by the</span></span><br><span class="line">  <span class="comment">// route with the longest prefix_length that matches the datagram&#x27;s</span></span><br><span class="line">  <span class="comment">// destination address.</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">route</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>router.cc</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;router.hh&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// route_prefix: The &quot;up-to-32-bit&quot; IPv4 address prefix to match the datagram&#x27;s destination address against</span></span><br><span class="line"><span class="comment">// prefix_length: For this route to be applicable, how many high-order (most-significant) bits of</span></span><br><span class="line"><span class="comment">//    the route_prefix will need to match the corresponding bits of the datagram&#x27;s destination address?</span></span><br><span class="line"><span class="comment">// next_hop: The IP address of the next hop. Will be empty if the network is directly attached to the router (in</span></span><br><span class="line"><span class="comment">//    which case, the next hop address should be the datagram&#x27;s final destination).</span></span><br><span class="line"><span class="comment">// interface_num: The index of the interface to send the datagram out on.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Router::add_route</span><span class="params">( <span class="keyword">const</span> <span class="keyword">uint32_t</span> route_prefix,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">const</span> <span class="keyword">uint8_t</span> prefix_length,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">const</span> optional&lt;Address&gt; next_hop,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">const</span> <span class="keyword">size_t</span> interface_num )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;DEBUG: adding route &quot;</span> &lt;&lt; Address::from_ipv4_numeric( route_prefix ).ip() &lt;&lt; <span class="string">&quot;/&quot;</span></span><br><span class="line">       &lt;&lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;( prefix_length ) &lt;&lt; <span class="string">&quot; =&gt; &quot;</span> &lt;&lt; ( next_hop.has_value() ? next_hop-&gt;ip() : <span class="string">&quot;(direct)&quot;</span> )</span><br><span class="line">       &lt;&lt; <span class="string">&quot; on interface &quot;</span> &lt;&lt; interface_num &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">  routing_table_.emplace_back( route_prefix, prefix_length, next_hop, interface_num );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Router::route</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">auto</span>&amp; current_interface : interfaces_ ) &#123;</span><br><span class="line">    <span class="keyword">auto</span> received_dgram = current_interface.maybe_receive();</span><br><span class="line">    <span class="keyword">if</span> ( received_dgram.has_value() ) &#123;</span><br><span class="line">      <span class="keyword">auto</span>&amp; dgram = received_dgram.value();</span><br><span class="line">      <span class="keyword">if</span> ( dgram.header.ttl &gt; <span class="number">1</span> ) &#123;</span><br><span class="line">        dgram.header.ttl--;</span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> important!!!</span></span><br><span class="line">        dgram.header.compute_checksum();</span><br><span class="line">        <span class="keyword">auto</span> dst_ip = dgram.header.dst;</span><br><span class="line">        <span class="keyword">auto</span> it = longest_prefix_match_( dst_ip );</span><br><span class="line">        <span class="keyword">if</span> ( it != routing_table_.end() ) &#123;</span><br><span class="line">          <span class="keyword">auto</span>&amp; target_interface = interface( it-&gt;interface_num );</span><br><span class="line">          target_interface.send_datagram( dgram, it-&gt;next_hop.value_or( Address::from_ipv4_numeric( dst_ip ) ) );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Router::Item&gt;::<span class="function">iterator <span class="title">Router::longest_prefix_match_</span><span class="params">( <span class="keyword">uint32_t</span> dst_ip )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> res = routing_table_.end();</span><br><span class="line">  <span class="keyword">auto</span> max_length = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">auto</span> it = routing_table_.begin(); it != routing_table_.end(); ++it ) &#123;</span><br><span class="line">    <span class="keyword">auto</span> len = match_length_( dst_ip, it-&gt;route_prefix, it-&gt;prefix_length );</span><br><span class="line">    <span class="keyword">if</span> ( len &gt; max_length ) &#123;</span><br><span class="line">      max_length = len;</span><br><span class="line">      res = it;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Router::match_length_</span><span class="params">( <span class="keyword">uint32_t</span> src_ip, <span class="keyword">uint32_t</span> tgt_ip, <span class="keyword">uint8_t</span> tgt_len )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( tgt_len == <span class="number">0</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( tgt_len &gt; <span class="number">32</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// tgt_len &lt; 32</span></span><br><span class="line">  <span class="keyword">uint8_t</span> <span class="keyword">const</span> len = <span class="number">32U</span> - tgt_len;</span><br><span class="line">  src_ip = src_ip &gt;&gt; len;</span><br><span class="line">  tgt_ip = tgt_ip &gt;&gt; len;</span><br><span class="line">  <span class="keyword">return</span> src_ip == tgt_ip ? tgt_len : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    运行测试，结果如下：</p>
<img src="/2023/12/23/CS144-Lab5/router test result.png" alt="router test result" style="zoom:60%;">
]]></content>
      <categories>
        <category>Stanford-CS144</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>TCP/IP协议栈</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CS144-Lab6</title>
    <url>/2023/12/23/CS144-Lab6/</url>
    <content><![CDATA[<h1 id="Checkpoint-6-putting-it-all-together"><a href="#Checkpoint-6-putting-it-all-together" class="headerlink" title="Checkpoint 6: putting it all together"></a>Checkpoint 6: putting it all together</h1><h2 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h2><p>Lab6 是一个选择性的实验，在前 6 个实验中我们已经完成了网络的框架：</p>
<ol>
<li>Checkpoint 0 (a reliable byte stream)；</li>
<li>Checkpoints 1–3 (the Transmission Control Protocol)；</li>
<li>Checkpoint 4 (an IP/Ethernet network interface)；</li>
<li>Checkpoint 5 (an IP router)， </li>
</ol>
<p>该实验的目的是使用前述的网络栈实现真实的网络通信，这需要我们有个 partner， 或者一人分饰两角。</p>
<a id="more"></a>

<h2 id="3-The-Network"><a href="#3-The-Network" class="headerlink" title="3. The Network"></a>3. The Network</h2><p>该实验需要一对可行的网络栈组合成一个真实的网络通信环境，两方都需要构建 host 和 router，网络拓扑如下图所示：</p>
<img src="/2023/12/23/CS144-Lab6/The Network.png" alt="The Network" style="zoom:60%;">

<ol>
<li><p>对于个人而言，需要使用同一套代码在不同的终端中启用 server 以及 client；</p>
</li>
<li><p>为了使用 relay，需要选择任意的一个 1024 到 64000 之间的偶数以区分不同的 group；</p>
</li>
<li><p>server 端在 build 文件夹下输入 ./apps/endtoend server cs144.keithw.org 2048，若顺利的话 server 端会打印如下信息：</p>
<img src="/2023/12/23/CS144-Lab6/check6_server 端.png" alt="check6_server 端" style="zoom:67%;">
</li>
<li><p>client 端在 build 文件夹下输入 ./apps/endtoend client cs144.keithw.org 2048， 若顺利的话 client 端会打印如下信息：</p>
<img src="/2023/12/23/CS144-Lab6/check6_client 端.png" alt="check6_client 端" style="zoom:67%;">

<p>并且 server 端会额外打印一条信息：New connection from 192.168.0.50:55785.</p>
</li>
<li><p>若以上信息都能正确打印，则意味着 TCP 握手成功，若有问题则需要在之前的命令后加上 debug 进入 debug 模式进行调试，这将输出所有交换的以太网帧（ARP 和 TCP/IP 帧）</p>
<ul>
<li><p>我们可以在 server 或者 client 任意一端输入数据，就能在相应的另一端看到数据。</p>
<blockquote>
<p>实验发现需要在 Terminal 输入需要发送的数据后按下 Ctrl-D 才能发送数据并在 remote 端看到。</p>
</blockquote>
</li>
<li><p>可以使用 Ctrl-D 关闭链接。server 或 client 关闭链接后会终止那一端的 ByteStream 的输出，但仍会持续接收数据直到另一端也关闭了 ByteStream 的输出，我们需要验证这点。</p>
<blockquote>
<p>在确保 Terminal 中已经没有数据后，此时按下 Ctrl-D 才会断开 TCP 的链接。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h2 id="4-Sending-a-file"><a href="#4-Sending-a-file" class="headerlink" title="4. Sending a file"></a>4. Sending a file</h2><ol>
<li><p>将 1MB 大小的随机数写入文件 /tmp/big.txt。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">dd <span class="attribute">if</span>=/dev/urandom <span class="attribute">bs</span>=1M <span class="attribute">count</span>=1 <span class="attribute">of</span>=/tmp/big.txt</span><br></pre></td></tr></table></figure></li>
<li><p>让 server 端在接受连接后立刻发送文件。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">.<span class="regexp">/apps/</span>endtoend server cs144.keithw.org even_number &lt; <span class="regexp">/tmp/</span>big.txt</span><br></pre></td></tr></table></figure></li>
<li><p>让 client 端关闭输出数据流并下载文件。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/dev/</span><span class="keyword">null</span> .<span class="regexp">/apps/</span>endtoend client cs144.keithw.org odd_number &gt; <span class="regexp">/tmp/</span>big-received.txt</span><br></pre></td></tr></table></figure></li>
<li><p>比较两个文件确保二者一致</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sha256sum <span class="regexp">/tmp/</span>big.txt 或者 sha256sum <span class="regexp">/tmp/</span>big-received.txt</span><br></pre></td></tr></table></figure>
<p>​    测试结果：</p>
</li>
</ol>
<ul>
<li>server 端</li>
</ul>
<img src="/2023/12/23/CS144-Lab6/server_sending a file.png" alt="server_sending a file" style="zoom:60%;">

<ul>
<li>client 端</li>
</ul>
<img src="/2023/12/23/CS144-Lab6/client_sending a file.png" alt="client_sending a file" style="zoom:60%;">

<ul>
<li><p>比较 SHA-256 散列值</p>
<blockquote>
<p>SHA-256 是一种加密散列函数，用于产生给定输入数据的固定长度（256 位）的哈希值。这种哈希值通常用于验证文件的完整性或检查文件是否在传输过程中被篡改。</p>
</blockquote>
</li>
</ul>
<img src="/2023/12/23/CS144-Lab6/SHA-256 哈希值对比.png" alt="SHA-256 哈希值对比" style="zoom:67%;">
]]></content>
      <categories>
        <category>Stanford-CS144</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>TCP/IP协议栈</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>SLR_1</title>
    <url>/2021/05/30/SLR-1/</url>
    <content><![CDATA[<h1 id="编译原理实验5——SLR-1-文法分析器实现"><a href="#编译原理实验5——SLR-1-文法分析器实现" class="headerlink" title="编译原理实验5——SLR(1)文法分析器实现"></a>编译原理实验5——SLR(1)文法分析器实现</h1><h2 id="1、代码功能："><a href="#1、代码功能：" class="headerlink" title="1、代码功能："></a>1、代码功能：</h2><p>（1）计算非终结符的FIRST和FOLLOW集</p>
<p>（2）构造SLR分析表</p>
<p>（3）判断该文法是否为SLR文法</p>
<p>（4）输入字符串，按照SLR分析法判断该字符串的语法是否正确，并给出判断过程</p>
<a id="more"></a>

<h2 id="2、代码的思路："><a href="#2、代码的思路：" class="headerlink" title="2、代码的思路："></a>2、代码的思路：</h2><ol>
<li>将文法中的每一个句子的<strong>左部和右部进行分离</strong>。其中，右部的每一个终结符和非终结符也是单独保存的。</li>
<li>将左部和右部分离后的文法中的<strong>终结符和非终结符识别</strong>出来。一般左部都是非终结符，那么右部除去非终结符就是终结符了。</li>
<li><strong>计算FIRST集</strong>。设置一个变量_ALTERED_，在每次有新的终结符添加到FIRST集中的时候，就将_ALTERED_置为true。计算FIRST集的方法如下：<ol>
<li><em>如果产生式右部是终结符a，且这个终结符a不在FIRST集中，则添加。</em></li>
<li><em>如果是非终结符A，则将A的FIRST集中的所有自己没有的终结符添加到自己的FIRST集中。</em></li>
<li><em>如果A的终结符中包含ε，则继续判断下一个。</em></li>
</ol>
</li>
<li><strong>计算FOLLOW集。</strong>设置一个变量_ALTERED_，在每次有新的终结符添加到FOLLOW集中的时候，就将_ALTERED_置位true。计算FOLLOW集的方法如下：<ol>
<li><em>遍历文法中的所有产生式，所有出现在非终结符右边的终结符加入到相应follow集中，如果非终结符右边没有东西，则把$加入。 2、遍历文法中的所有产生式，若产生式最右边是非终结符，把左部非终结符的follow集的所有元素都添加到对应非终结符中。3、将$加入到第一个非终结符的follow集中。</em></li>
</ol>
</li>
<li>根据每一条产生式，<strong>生成项目集规范族</strong>。<em>程序设计的是对项目集规范族中的每一个项目集中的每一条项目都进行分析，产生了新的项目集就添加到项目集规范族中。</em></li>
<li>根据项目集规范族和FOLLOW集<strong>生成SLR分析表</strong>。<em>根据 · 的位置判断是否将其添加到SLR分析表中，很容易。如果 · 后面的是终结符，将移进动作s添加到SLR分析表中的ACTION部分；如果 · 后面的是终结符，将转移添加到SLR分析表的GOTO部分；如果 · 在项目的末尾，将归约动作r添加到SLR分析表的ACTION部分。</em></li>
<li>设计<strong>词法分析器</strong>，用于分析输入的程序。</li>
<li>根据SLR分析表和词法分析的结果进行语法分析。</li>
</ol>
<h2 id="3、程序代码"><a href="#3、程序代码" class="headerlink" title="3、程序代码"></a>3、程序代码</h2><p><code>具体代码请添加QQ：1277565476</code></p>
<h2 id="4、测试结果"><a href="#4、测试结果" class="headerlink" title="4、测试结果"></a>4、测试结果</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">===================文法预处理=======================</span><br><span class="line">文法如下所示：</span><br><span class="line">(<span class="number">1</span>)E-&gt;E+T</span><br><span class="line">(<span class="number">2</span>)E-&gt;T</span><br><span class="line">(<span class="number">3</span>)T-&gt;T*F</span><br><span class="line">(<span class="number">4</span>)T-&gt;F</span><br><span class="line">(<span class="number">5</span>)F-&gt;i</span><br><span class="line">(<span class="number">6</span>)F-&gt;(E)</span><br><span class="line">终结符：[+, *, i, (, )]</span><br><span class="line">非终结符：[E, T, F]</span><br><span class="line">===================First集如下=======================</span><br><span class="line">文法的First集为：</span><br><span class="line">First(E) = &#123; i ( &#125;</span><br><span class="line">First(T) = &#123; i ( &#125;</span><br><span class="line">First(F) = &#123; i ( &#125;</span><br><span class="line">===================Follow集如下=======================</span><br><span class="line">文法的Follow集为：</span><br><span class="line">Follow(E) = &#123; + ) <span class="variable">$ </span>&#125;</span><br><span class="line">Follow(T) = &#123; <span class="variable">$ </span>* + ) &#125;</span><br><span class="line">Follow(F) = &#123; <span class="variable">$ </span>* + ) &#125;</span><br><span class="line"></span><br><span class="line">===================项目集规范族如下=======================</span><br><span class="line">I0：</span><br><span class="line">START-&gt;·E</span><br><span class="line">E-&gt;·E+T</span><br><span class="line">E-&gt;·T</span><br><span class="line">T-&gt;·T*F</span><br><span class="line">T-&gt;·F</span><br><span class="line">F-&gt;·i</span><br><span class="line">F-&gt;·(E)</span><br><span class="line"></span><br><span class="line">I1：</span><br><span class="line">START-&gt;E·</span><br><span class="line">E-&gt;E·+T</span><br><span class="line"></span><br><span class="line">I2：</span><br><span class="line">E-&gt;T·</span><br><span class="line">T-&gt;T·*F</span><br><span class="line"></span><br><span class="line">I3：</span><br><span class="line">T-&gt;F·</span><br><span class="line"></span><br><span class="line">I4：</span><br><span class="line">F-&gt;i·</span><br><span class="line"></span><br><span class="line">I5：</span><br><span class="line">F-&gt;(·E)</span><br><span class="line">E-&gt;·E+T</span><br><span class="line">E-&gt;·T</span><br><span class="line">T-&gt;·T*F</span><br><span class="line">T-&gt;·F</span><br><span class="line">F-&gt;·i</span><br><span class="line">F-&gt;·(E)</span><br><span class="line"></span><br><span class="line">I6：</span><br><span class="line">E-&gt;E+·T</span><br><span class="line">T-&gt;·T*F</span><br><span class="line">T-&gt;·F</span><br><span class="line">F-&gt;·i</span><br><span class="line">F-&gt;·(E)</span><br><span class="line"></span><br><span class="line">I7：</span><br><span class="line">T-&gt;T*·F</span><br><span class="line">F-&gt;·i</span><br><span class="line">F-&gt;·(E)</span><br><span class="line"></span><br><span class="line">I8：</span><br><span class="line">F-&gt;(E·)</span><br><span class="line">E-&gt;E·+T</span><br><span class="line"></span><br><span class="line">I9：</span><br><span class="line">E-&gt;E+T·</span><br><span class="line">T-&gt;T·*F</span><br><span class="line"></span><br><span class="line">I10：</span><br><span class="line">T-&gt;T*F·</span><br><span class="line"></span><br><span class="line">I11：</span><br><span class="line">F-&gt;(E)·</span><br><span class="line"></span><br><span class="line">================SLR预测分析表如下====================</span><br><span class="line">	+	*	i	(	)	<span class="variable">$	</span>E	T	F</span><br><span class="line">0	 0	 0	s4	s5	 0	 0	<span class="number">1</span>	<span class="number">2</span>	<span class="number">3</span></span><br><span class="line"><span class="number">1</span>	s6	 0	 0	 0	 0	a0	0	0	0</span><br><span class="line"><span class="number">2</span>	r2	s7	 0	 0	r2	r2	0	0	0</span><br><span class="line"><span class="number">3</span>	r4	r4	 0	 0	r4	r4	0	0	0</span><br><span class="line"><span class="number">4</span>	r5	r5	 0	 0	r5	r5	0	0	0</span><br><span class="line"><span class="number">5</span>	 0	 0	s4	s5	 0	 0	<span class="number">8</span>	<span class="number">2</span>	<span class="number">3</span></span><br><span class="line"><span class="number">6</span>	 0	 0	s4	s5	 0	 0	0	<span class="number">9</span>	<span class="number">3</span></span><br><span class="line"><span class="number">7</span>	 0	 0	s4	s5	 0	 0	0	0	<span class="number">10</span></span><br><span class="line"><span class="number">8</span>	s6	 0	 0	 0	s11	 0	0	0	0</span><br><span class="line"><span class="number">9</span>	r1	s7	 0	 0	r1	r1	0	0	0</span><br><span class="line"><span class="number">10</span>	r3	r3	 0	 0	r3	r3	0	0	0</span><br><span class="line"><span class="number">11</span>	r6	r6	 0	 0	r6	r6	0	0	0</span><br><span class="line"></span><br><span class="line">===================句子识别=======================</span><br><span class="line">请输入要识别的句子：i*(i+i)</span><br><span class="line">------------------分析过程如下--------------------</span><br><span class="line">栈						输入		动作</span><br><span class="line">0                     i*(i+i)<span class="variable">$	</span>	移进</span><br><span class="line">0i4                    *(i+i)<span class="variable">$	</span>	按F-&gt;[i]归约</span><br><span class="line">0F3                    *(i+i)<span class="variable">$	</span>	按T-&gt;[F]归约</span><br><span class="line">0T2                    *(i+i)<span class="variable">$	</span>	移进</span><br><span class="line">0T2*<span class="number">7</span>                   (i+i)<span class="variable">$	</span>	移进</span><br><span class="line">0T2*<span class="number">7</span>(<span class="number">5</span>                  i+i)<span class="variable">$	</span>	移进</span><br><span class="line">0T2*<span class="number">7</span>(<span class="number">5</span>i4                 +i)<span class="variable">$	</span>	按F-&gt;[i]归约</span><br><span class="line">0T2*<span class="number">7</span>(<span class="number">5</span>F3                 +i)<span class="variable">$	</span>	按T-&gt;[F]归约</span><br><span class="line">0T2*<span class="number">7</span>(<span class="number">5</span>T2                 +i)<span class="variable">$	</span>	按E-&gt;[T]归约</span><br><span class="line">0T2*<span class="number">7</span>(<span class="number">5</span>E8                 +i)<span class="variable">$	</span>	移进</span><br><span class="line">0T2*<span class="number">7</span>(<span class="number">5</span>E8+<span class="number">6</span>                i)<span class="variable">$	</span>	移进</span><br><span class="line">0T2*<span class="number">7</span>(<span class="number">5</span>E8+<span class="number">6</span>i4               )<span class="variable">$	</span>	按F-&gt;[i]归约</span><br><span class="line">0T2*<span class="number">7</span>(<span class="number">5</span>E8+<span class="number">6</span>F3               )<span class="variable">$	</span>	按T-&gt;[F]归约</span><br><span class="line">0T2*<span class="number">7</span>(<span class="number">5</span>E8+<span class="number">6</span>T9               )<span class="variable">$	</span>	按E-&gt;[E, +, T]归约</span><br><span class="line">0T2*<span class="number">7</span>(<span class="number">5</span>E8                   )<span class="variable">$	</span>	移进</span><br><span class="line">0T2*<span class="number">7</span>(<span class="number">5</span>E8)<span class="number">11</span>                 <span class="variable">$	</span>	按F-&gt;[(, E, )]归约</span><br><span class="line">0T2*<span class="number">7</span>F10                     <span class="variable">$	</span>	按T-&gt;[T, *, F]归约</span><br><span class="line">0T2                          <span class="variable">$	</span>	按E-&gt;[T]归约</span><br><span class="line">0E1                          <span class="variable">$	</span>	接受</span><br><span class="line">--------------------分析结束----------------------</span><br><span class="line">SLR(<span class="number">1</span>)分析法推导成功！</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>自下而上的语法分析</tag>
      </tags>
  </entry>
  <entry>
    <title>链式前向星+SPFA</title>
    <url>/2021/07/12/algorithm-1/</url>
    <content><![CDATA[<h1 id="算法笔记1——链式前向星-SPFA-Dijkstra"><a href="#算法笔记1——链式前向星-SPFA-Dijkstra" class="headerlink" title="算法笔记1——链式前向星+SPFA+Dijkstra"></a>算法笔记1——链式前向星+SPFA+Dijkstra</h1><blockquote>
<p>题目链接：[<a href="https://www.luogu.com.cn/problem/P3371">P3371 【模板】单源最短路径（弱化版） - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a>]</p>
</blockquote>
<h2 id="1、题目描述（入门）"><a href="#1、题目描述（入门）" class="headerlink" title="1、题目描述（入门）"></a>1、题目描述（入门）</h2><p>给出一个有向图，请输出从某一点出发到所有点的最短路径长度。</p>
<a id="more"></a>

<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含三个整数 n, m, s分别表示点的个数、有向边的个数、出发点的编号。</p>
<p>接下来 m 行每行包含三个整数 u, v, w表示一条 u<em>→</em>v 的，长度为 w 的边。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一行 n 个整数，第 i 个表示 s 到第 i 个点的最短路径，若不能到达则输出 2^<sup>31</sup>−1。</p>
<h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a><strong>输入</strong></h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">6</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a><strong>输出</strong></h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>数据范围：对于 100% 的数据：1 ≤ n ≤10<sup>4</sup>，1 ≤ m ≤ 5×10<sup>5</sup>，保证数据随机。</p>
</blockquote>
<h2 id="2、链式前向星"><a href="#2、链式前向星" class="headerlink" title="2、链式前向星"></a>2、链式前向星</h2><p>本题根据数据边数m&lt;=500000，邻接矩阵存不下，只能使用静态邻接表存储。</p>
<blockquote>
<p>如果说邻接表是不好写但效率好，邻接矩阵是好写但效率低的话，前向星就是一个相对中庸的数据结构。前向星固然好写，但效率并不高。而在优化为链式前向星后，效率也得到了较大的提升。虽然说，世界上对链式前向星的使用并不是很广泛，但在不愿意写复杂的邻接表的情况下，链式前向星也是一个很优秀的数据结构。                                                                                                                                                                  ——摘自《百度百科》</p>
</blockquote>
<p><strong>链式前向星其实就是静态建立的邻接表，时间效率为O（m），空间效率也为O（m）。遍历效率也为O（m）。</strong></p>
<p>对于下面的数据，第一行5个顶点，7条边。接下来是边的起点，终点和权值。也就是边1 -&gt; 2 权值为1。</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">5 </span><span class="number">7</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">5</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>链式前向星存的是以【1，n】为起点的边的集合，对于上面的数据输出就是：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span> //以<span class="number">1</span>为起点的边的集合</span><br><span class="line"><span class="attribute">1</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="attribute">1</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="attribute">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">2</span> //以<span class="number">2</span>为起点的边的集合</span><br><span class="line"><span class="attribute">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">3</span> //以<span class="number">3</span>为起点的边的集合</span><br><span class="line"><span class="attribute">3</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">4</span>  //以<span class="number">4</span>为起点的边的集合</span><br><span class="line"><span class="attribute">4</span> <span class="number">5</span> <span class="number">7</span></span><br><span class="line"><span class="attribute">4</span> <span class="number">1</span> <span class="number">5</span></span><br><span class="line"> </span><br><span class="line"><span class="attribute">5</span> //以<span class="number">5</span>为起点的边不存在</span><br></pre></td></tr></table></figure>
<p>我们先对上面的7条边进行编号第一条边是0以此类推编号【0~6】，然后我们要知道两个变量的含义：</p>
<ul>
<li>Next，表示与这个边起点相同的上一条边的编号。</li>
<li>head[ i ]数组，表示以 i 为起点的最后一条边的编号。</li>
</ul>
<p>head数组一般初始化为-1，为什么是 -1后面会讲到。加边函数是这样的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span><span class="comment">//加边，u起点，v终点，w边权</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].to = v; <span class="comment">//终点</span></span><br><span class="line">    edge[cnt].w = w; <span class="comment">//权值</span></span><br><span class="line">    edge[cnt].next = head[u];<span class="comment">//以u为起点上一条边的编号，也就是与这个边起点相同的上一条边的编号</span></span><br><span class="line">    head[u] = cnt++;<span class="comment">//更新以u为起点上一条边的编号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们只要知道next，head数组表示的含义，根据上面的数据就可以写出下面的过程：</p>
<ul>
<li>对于1 2 1这条边：edge[0].to = 2;     edge[0].next = -1;      head[1] = 0;</li>
<li>对于2 3 2这条边：edge[1].to = 3;     edge[1].next = -1;      head[2] = 1;</li>
<li>对于3 4 3这条边：edge[2].to = 4;     edge[2],next = -1;      head[3] = 2;</li>
<li>对于1 3 4这条边：edge[3].to = 3;     edge[3].next = 0;       head[1] = 3;</li>
<li>对于4 1 5这条边：edge[4].to = 1;     edge[4].next = -1;      head[4] = 4;</li>
<li>对于1 5 6这条边：edge[5].to = 5;     edge[5].next = 3;       head[1] = 5;</li>
<li>对于4 5 7这条边：edge[6].to = 5;     edge[6].next = 4;       head[4] = 6;</li>
</ul>
<p><strong>遍历函数是这样的：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//n个起点</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = head[i]; j != <span class="number">-1</span>; j = edge[j].next)<span class="comment">//遍历以i为起点的边</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; edge[j].to &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; edge[j].w &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一层for循环是找每一个点，依次遍历以【1，n】为起点的边的集合。第二层for循环是遍历以 i 为起点的所有边，k首先等于head[ i ]，注意head[ i ]中存的是以 i 为起点的最后一条边的编号。然后通过edge[ j ].next来找下一条边的编号。我们初始化head为-1，所以找到你最后一个边（也就是以 i 为起点的第一条边）时，你的edge[ j ].next为 -1做为终止条件。</p>
<h2 id="3、SPFA（Shortest-Path-Faster-Algorithm）"><a href="#3、SPFA（Shortest-Path-Faster-Algorithm）" class="headerlink" title="3、SPFA（Shortest Path Faster Algorithm）"></a>3、SPFA（Shortest Path Faster Algorithm）</h2><h3 id="1-spfa的算法思想（动态逼近法）："><a href="#1-spfa的算法思想（动态逼近法）：" class="headerlink" title="1. spfa的算法思想（动态逼近法）："></a>1. spfa的算法思想（动态逼近法）：</h3><ul>
<li>设立一个先进先出的队列q用来保存待优化的结点，优化时每次取出队首结点u，并且用u点当前的最短路径估计值对离开u点所指向的结点v进行松弛操作，如果v点的最短路径估计值有所调整，且v点不在当前的队列中，就将v点放入队尾。这样不断从队列中取出结点来进行松弛操作，直至队列空为止。 </li>
<li>松弛操作的原理是著名的定理：“三角形两边之和大于第三边”，在信息学中我们叫它三角不等式。所谓对结点i,j进行松弛，就是判定是否dis[j]&gt;dis[i]+w[i,j]，如果该式成立则将dis[j]减小到dis[i]+w[i,j]，否则不动。 </li>
</ul>
<blockquote>
<p>和广搜bfs的区别：</p>
<p>SPFA 在形式上和广度(宽度)优先搜索非常类似，不同的是bfs中一个点出了队列就不可能重新进入队列，但是SPFA中一个点可能在出队列之后再次被放入队列，也就是一个点改进过其它的点之后，过了一段时间可能本身被改进(重新入队)，于是再次用来改进其它的点，这样反复迭代下去。</p>
</blockquote>
<h3 id="2-伪代码"><a href="#2-伪代码" class="headerlink" title="2. 伪代码"></a>2. 伪代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">spfa</span><span class="params">(s)</span></span>;  <span class="comment">//求单源点s到其它各顶点的最短距离</span></span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">1</span> to n <span class="keyword">do</span> &#123; dis[i]=∞; vis[i]=<span class="literal">false</span>; &#125;   <span class="comment">//初始化每点到s的距离，不在队列</span></span><br><span class="line">    dis[s]=<span class="number">0</span>;  <span class="comment">//将dis[源点]设为0</span></span><br><span class="line">    vis[s]=<span class="literal">true</span>; <span class="comment">//源点s入队列</span></span><br><span class="line">    head=<span class="number">0</span>; tail=<span class="number">1</span>; q[tail]=s; <span class="comment">//源点s入队, 头尾指针赋初值</span></span><br><span class="line">    <span class="keyword">while</span> head&lt;tail <span class="keyword">do</span> &#123;</span><br><span class="line">       head+<span class="number">1</span>;  <span class="comment">//队首出队</span></span><br><span class="line">       v=q[head];  <span class="comment">//队首结点v</span></span><br><span class="line">       vis[v]=<span class="literal">false</span>;  <span class="comment">//释放对v的标记，可以重新入队</span></span><br><span class="line">       <span class="keyword">for</span> 每条边(v,i)  <span class="comment">//对于与队首v相连的每一条边</span></span><br><span class="line">  	  <span class="keyword">if</span> (dis[i]&gt;dis[v]+a[v][i])  <span class="comment">//如果不满足三角形性质</span></span><br><span class="line">	 	dis[i] = dis[v] + a[v][i]   <span class="comment">//松弛dis[i]</span></span><br><span class="line">		<span class="keyword">if</span> (vis[i]=<span class="literal">false</span>) &#123;tail+<span class="number">1</span>; q[tail]=i; vis[i]=<span class="literal">true</span>;&#125; <span class="comment">//不在队列，则加入队列</span></span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>
<h3 id="3-最短路径的输出？"><a href="#3-最短路径的输出？" class="headerlink" title="3. 最短路径的输出？"></a>3. 最短路径的输出？</h3><ul>
<li>在一个图中，我们仅仅知道结点A到结点E的最短路径长度，有时候意义不大。这个图如果是地图的模型的话，在算出最短路径长度后，我们总要说明“怎么走”才算真正解决了问题。如何在计算过程中记录下来最短路径是怎么走的，并在最后将它输出呢？</li>
<li>我们定义一个path[]数组，path[i]表示源点s到i的最短路程中，结点i之前的结点的编号(父结点)，我们在借助结点u对结点v松弛的同时，标记下path[v]=u，记录的工作就完成了。</li>
<li>如何输出呢？我们记录的是每个点前面的点是什么，输出却要从最前面到后面输出，这很好办，递归就可以了：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printpath</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (path[k]!=<span class="number">0</span>) printpath(path[k]);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; k &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-完整题解代码"><a href="#4-完整题解代码" class="headerlink" title="4. 完整题解代码"></a>4. 完整题解代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> inf=<span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">500005</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s,num_edge=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> dis[maxn],vis[maxn],head[maxm];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">int</span> next,to,dis;</span><br><span class="line">&#125;edge[maxm]; <span class="comment">//结构体表示静态邻接表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dis)</span> <span class="comment">//邻接表建图</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//以下是数据结构书上的标准代码，不懂翻书看解释</span></span><br><span class="line">  edge[++num_edge].next=head[from]; <span class="comment">//链式存储下一条出边</span></span><br><span class="line">  edge[num_edge].to=to; <span class="comment">//当前节点编号</span></span><br><span class="line">  edge[num_edge].dis=dis; <span class="comment">//本条边的距离</span></span><br><span class="line">  head[from]=num_edge; <span class="comment">//记录下一次的出边情况</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; <span class="comment">//spfa用队列，这里用了STL的标准队列</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) </span><br><span class="line">  &#123;</span><br><span class="line">    dis[i]=inf; <span class="comment">//带权图初始化</span></span><br><span class="line">    vis[i]=<span class="number">0</span>; <span class="comment">//记录点i是否在队列中，同dijkstra算法中的visited数组</span></span><br><span class="line">  &#125;</span><br><span class="line">  q.push(s); dis[s]=<span class="number">0</span>; vis[s]=<span class="number">1</span>; <span class="comment">//第一个顶点入队，进行标记</span></span><br><span class="line">  <span class="keyword">while</span>(!q.empty())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> u=q.front(); <span class="comment">//取出队首</span></span><br><span class="line">    q.pop(); vis[u]=<span class="number">0</span>; <span class="comment">//出队标记</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u]; i; i=edge[i].next) <span class="comment">//邻接表遍历，不多解释了（也可用vector代替）</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> v=edge[i].to; </span><br><span class="line">      <span class="keyword">if</span>(dis[v]&gt;dis[u]+edge[i].dis) <span class="comment">//如果有最短路就更改</span></span><br><span class="line">      &#123;</span><br><span class="line">        dis[v]=dis[u]+edge[i].dis;</span><br><span class="line">        <span class="keyword">if</span>(vis[v]==<span class="number">0</span>) <span class="comment">//未入队则入队</span></span><br><span class="line">        &#123;</span><br><span class="line">          vis[v]=<span class="number">1</span>; <span class="comment">//标记入队</span></span><br><span class="line">          q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> f,g,w;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;f&gt;&gt;g&gt;&gt;w; </span><br><span class="line">    addedge(f,g,w); <span class="comment">//建图，有向图连一次边就可以了</span></span><br><span class="line">  &#125;</span><br><span class="line">  spfa(); <span class="comment">//开始跑spfa</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    <span class="keyword">if</span>(s==i) <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot; &quot;</span>; <span class="comment">//如果是回到自己，直接输出0</span></span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;dis[i]&lt;&lt;<span class="string">&quot; &quot;</span>; <span class="comment">//否则打印最短距离</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">//结束</span></span><br></pre></td></tr></table></figure>
<h2 id="5、题目描述（进阶）"><a href="#5、题目描述（进阶）" class="headerlink" title="5、题目描述（进阶）"></a>5、题目描述（进阶）</h2><blockquote>
<p>题目链接：<a href="https://www.luogu.com.cn/problem/P4779">P4779 【模板】单源最短路径（标准版） - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个 n 个点，m 条有向边的带非负权图，请你计算从 s 出发，到每个点的距离。数据保证你能从 s 出发到任意点。</p>
<h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行为三个正整数 n, m, s。 第二行起 m 行，每行三个非负整数 u<sub>i</sub>, v<sub>i</sub>, w<sub>i </sub>, 表示从 u<sub>i</sub>-&gt;v<sub>i</sub> 有一条权值为  w<sub>i </sub> 的有向边。</p>
<h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一行 n 个空格分隔的非负整数，表示 s 到每个点的距离。</p>
<p><strong>输入 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">6</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p><strong>输出 #1</strong></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>SPFA算法由于它上限 O(NM) = O(VE)的时间复杂度,被卡掉的几率很大.在算法竞赛中,我们需要一个更稳定的算法:dijkstra.</strong></p>
</blockquote>
<h2 id="6、dijkstra算法"><a href="#6、dijkstra算法" class="headerlink" title="6、dijkstra算法"></a>6、dijkstra算法</h2><ul>
<li>dijkstra是一种单源最短路径算法, 时间复杂度上限为O(n<sup>2</sup>)(朴素), 在实际应用中较为稳定; 加上堆优化之后更是具有**O((n+m)log<sub>2</sub>n)**的时间复杂度, 在稠密图中有不俗的表现.</li>
</ul>
<h3 id="dijkstra的原理-流程"><a href="#dijkstra的原理-流程" class="headerlink" title="dijkstra的原理/流程?"></a>dijkstra的原理/流程?</h3><ul>
<li>dijkstra本质上的思想是贪心,它只适用于不含负权边的图.</li>
<li>我们把点分成两类,一类是已经确定最短路径的点,称为”白点”,另一类是未确定最短路径的点,称为”蓝点”</li>
<li>dijkstra的流程如下:<ol>
<li>初始化dis[start] = 0, 其余节点的dis<em>d<strong>i</strong>s</em>值为无穷大.</li>
<li>找一个dis值最小的蓝点 x , 把节点 x 变成白点.</li>
<li>遍历 x 的所有出边(x,y,z), 若dis[y] &gt; dis[x] + z, 则令dis[y] = dis[x] + z</li>
<li>重复2,3两步,直到所有点都成为白点..</li>
</ol>
</li>
<li>时间复杂度为O(n<sup>2</sup>)</li>
</ul>
<h3 id="dijkstra的正确性"><a href="#dijkstra的正确性" class="headerlink" title="dijkstra的正确性"></a>dijkstra的正确性</h3><ul>
<li>当所有边长都是非负数的时候,全局最小值不可能再被其他节点更新.所以在第2步中找出的蓝点 x 必然满足:dis[x]:已经是起点到 x 的最短路径.我们不断选择全局最小值进行标记和拓展,最终可以得到起点到每个节点的最短路径的长度</li>
<li>缺点：<strong>不能处理有负权边的情况！</strong></li>
</ul>
<h3 id="dijkstra的堆优化"><a href="#dijkstra的堆优化" class="headerlink" title="dijkstra的堆优化?"></a>dijkstra的堆优化?</h3><ul>
<li><p>观察dijkstra的流程,发现步骤2可以优化：</p>
<p>我们可以用堆对dis数组进行维护, 用O(log<sub>2</sub>n)的时间取出堆顶元素并删除, 用O(log<sub>2</sub>n)遍历每条边, 总复杂度O((n+m)log<sub>2</sub>n)</p>
</li>
</ul>
<h2 id="7、完整代码"><a href="#7、完整代码" class="headerlink" title="7、完整代码"></a>7、完整代码</h2><blockquote>
<p>优先队列具有队列的所有特性，包括队列的基本操作，只是在这基础上添加了内部的一个排序，它本质是一个堆实现的。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 500005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647</span></span><br><span class="line"><span class="keyword">int</span> n, m, s;</span><br><span class="line"><span class="keyword">int</span> dis[maxn], head[maxn], vis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> next;</span><br><span class="line">	<span class="keyword">int</span> to;</span><br><span class="line">	<span class="keyword">int</span> weight;</span><br><span class="line">&#125;edge[maxm];</span><br><span class="line"><span class="keyword">int</span> edge_num = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> f, <span class="keyword">int</span> t, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">	edge[++edge_num].next = head[f];</span><br><span class="line">	edge[edge_num].to = t;</span><br><span class="line">	edge[edge_num].weight = w;</span><br><span class="line">	head[f] = edge_num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> dis;</span><br><span class="line">	<span class="keyword">int</span> pos;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node&amp; x) <span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dis &gt; x.dis;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;tmp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">priority_queue</span>&lt;node&gt; q;</span><br><span class="line">	tmp.dis = <span class="number">0</span>;</span><br><span class="line">	tmp.pos = s;</span><br><span class="line">	q.push(tmp);</span><br><span class="line">	dis[s] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">		tmp = q.top();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">if</span> (vis[tmp.pos]) &#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		vis[tmp.pos] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> u = tmp.pos;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i; i = edge[i].next)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">			<span class="keyword">if</span> (dis[v] &gt; dis[u] + edge[i].weight) &#123;</span><br><span class="line">				dis[v] = dis[u] + edge[i].weight;</span><br><span class="line">				<span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">					tmp.dis = dis[v];</span><br><span class="line">					tmp.pos = v;</span><br><span class="line">					q.push(tmp);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> f, t, w;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; f &gt;&gt; t &gt;&gt; w;</span><br><span class="line">		addEdge(f, t, w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		dis[i] = inf;</span><br><span class="line">	&#125;</span><br><span class="line">	dijkstra();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; dis[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>链式前向星</tag>
        <tag>SPFA</tag>
        <tag>dijkstra</tag>
      </tags>
  </entry>
  <entry>
    <title>摩尔投票法(Boyer–Moore majority vote algorithm)</title>
    <url>/2022/02/01/algorithm-2/</url>
    <content><![CDATA[<h1 id="算法笔记2——摩尔投票法-Boyer–Moore-majority-vote-algorithm"><a href="#算法笔记2——摩尔投票法-Boyer–Moore-majority-vote-algorithm" class="headerlink" title="算法笔记2——摩尔投票法(Boyer–Moore majority vote algorithm)"></a>算法笔记2——摩尔投票法(Boyer–Moore majority vote algorithm)</h1><h2 id="1、简要概述"><a href="#1、简要概述" class="headerlink" title="1、简要概述"></a>1、简要概述</h2><p>摩尔投票法(Boyer–Moore majority vote algorithm)出自<a href="https://link.zhihu.com/?target=https://www.cs.ou.edu/~rlpage/dmtools/mjrty.pdf">论文</a>，算法解决的问题是如何在任意多的候选人（选票无序），选出获得票数最多的那个。常见的算法是扫描一遍选票，对每个候选人进行统计的选票进行统计。当候选人的数目固定时，这个常见算法的时间复杂度为：<em>O</em>(<em>n</em>)，当候选人的数目不定时，统计选票可能会执行较长时间，可能需运行<em>O</em>(<em>n</em>^2^)的时间。当选票有序时，可以很容易编出<em>O</em>(<em>n</em>)的程序，首先找到中位数，然后检查中位数的个数是否超过选票的一半。这篇论文针对无序且侯选人不定的情形，提出了摩尔投票算法。算法的比较次数最多是选票（记为<em>n</em>）的两倍，可以在<em>O</em>(<em>n</em>)时间内选出获票最多的，空间开销为<em>O</em>(1)</p>
<p>==摩尔投票法的一大应用就是求众数==。</p>
<a id="more"></a>

<h2 id="2、算法步骤"><a href="#2、算法步骤" class="headerlink" title="2、算法步骤"></a>2、算法步骤</h2><p>算法分为两个阶段：<strong>pairing</strong>阶段和<strong>counting</strong>阶段。</p>
<ul>
<li><strong>pairing</strong>阶段：两个不同选票的人进行对抗，并会同时击倒对方，当剩下的人都是同一阵营，相同选票时，结束。</li>
<li><strong>counting</strong>阶段：计数阶段，对最后剩下的下进行选票计算统计，判断选票是否超过总票数的一半，选票是否有效。</li>
</ul>
<h3 id="2-1-pairing阶段的简化"><a href="#2-1-pairing阶段的简化" class="headerlink" title="2.1 pairing阶段的简化"></a>2.1 <strong>pairing</strong>阶段的简化</h3><p>选票不同就要大干一架，太过粗鲁，这里提供一种更加现代化的文明方式。<br>在场的有个叫<code>onwaier</code>的，他很聪明，他想到一个方法。他用他那犀利人目光扫一遍所有代表们的选票，在脑子记住两件事，当前的候选人的名字<code>cand</code>和他对应的计数<code>k</code>（并不是他的选票数）。起始时，<code>k</code>的值为0，看每个人的选票时，先想想现在<code>k</code>是否为0，如果是0就将<code>cand</code>更新为他将看到的候选人的名字并且将<code>k</code>的值更新为1。观察每个人选票的过程，如果这个人的选票与<code>cand</code>相同，则将<code>k</code>的值加1；否则，将<code>k</code>的值减1。最后的<code>cand</code>可能胜选，还需统计他的总选票数是否超过一半。</p>
<h3 id="2-2-证明"><a href="#2-2-证明" class="headerlink" title="2.2 证明"></a>2.2 证明</h3><p>假设共有n个代表（一人一票，选票总数为n）。当<code>onwaier</code>看到第i个代表的选票时(1≤i≤n)，前面他已经看到的所有选票可以分为两组，第一组是<code>k</code>个代表赞同<code>cand</code>；另一组是选票可以全部成对（选票不同）抵销。当处理完所有的选票时，如果存在大多数，则<code>cand</code>当选。<br>假设存在一个<code>x</code>其不同于<code>cand</code>，但拥有的选票超过n/2。但因为第二组的选票可以全部成对抵销，所以<code>x</code>最多的选票数为(n-k)/2，因此<code>x</code>必须要收到第一组的选票才能超过一半，但是第一组的选票都是<code>cand</code>的，出现矛盾，假设不成立。<br>所以，如果存在大多数，<code>cand</code>就是那个。</p>
<h2 id="3、算法代码"><a href="#3、算法代码" class="headerlink" title="3、算法代码"></a>3、算法代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">根据多数元素出现的次数大于n/2且超过其它元素出现次数之和这一特点，进行统计</span></span><br><span class="line"><span class="comment">时间复杂度为：O(n)</span></span><br><span class="line"><span class="comment">空间复杂度为：O(1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">0</span>, cand = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//成对抵销阶阶段</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> num:nums)&#123;</span><br><span class="line">		<span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">			cand = num;</span><br><span class="line">			k = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(num == cand)&#123;</span><br><span class="line">				++k;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				--k;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//计数阶段 判断cand的个数是否超过一半</span></span><br><span class="line">	k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> num:nums)&#123;</span><br><span class="line">		<span class="keyword">if</span>(num == cand)&#123;</span><br><span class="line">			++k;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(k &lt;= nums.size() / <span class="number">2</span>)&#123;</span><br><span class="line">		cand = <span class="number">-1</span>;<span class="comment">//表示未超过一半 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cand;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>Boyer–Moore majority vote algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>javaweb——jQuery</title>
    <url>/2021/07/09/javaweb3/</url>
    <content><![CDATA[<h1 id="jQuery笔记"><a href="#jQuery笔记" class="headerlink" title="jQuery笔记"></a>jQuery笔记</h1><h2 id="1、JQuery介绍"><a href="#1、JQuery介绍" class="headerlink" title="1、JQuery介绍"></a>1、JQuery介绍</h2><ul>
<li>JQuery是JavaScript和查询（Query），它就是辅助JS开发的类库</li>
<li>核心思想：写得少做的多，所以它解决了很多浏览器的兼容问题</li>
<li>流行程度：是目前最流行的JS库</li>
<li>优点：免费、开源，语法设计使开发更便捷，例如操作文档对象、选择DOM元素、制作动画效果、事件处理、使用Ajax以及其他功能</li>
</ul>
<a id="more"></a>

<h2 id="2、导入jquery-3-5-1-js"><a href="#2、导入jquery-3-5-1-js" class="headerlink" title="2、导入jquery-3.5.1.js"></a>2、导入jquery-3.5.1.js</h2><p>我是通过官网点击下载后进入到一个全是代码的页面，将其全选复制到我本地的文件，然后通过</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;路径名/jquery-3.5.1.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>导入即可</p>
<h2 id="3、给按钮绑定点击事件的示例"><a href="#3、给按钮绑定点击事件的示例" class="headerlink" title="3、给按钮绑定点击事件的示例"></a>3、给按钮绑定点击事件的示例</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//表示页面加载完成之后，相当于window.onload  = function()&#123;&#125;</span></span><br><span class="line">    <span class="keyword">var</span> $btnObj = $(<span class="string">&#x27;#btnId&#x27;</span>);<span class="comment">//表示按id查询标签对象</span></span><br><span class="line">    $btnObj.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//绑定点击事件</span></span><br><span class="line">        alert(<span class="string">&#x27;jquery的单击事件&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="4、常见问题"><a href="#4、常见问题" class="headerlink" title="4、常见问题"></a>4、常见问题</h2><ul>
<li>使用jQuery一定要引入jQuery库吗？    答：是</li>
<li>jQuery的 $ 到底是什么？  答：定义的一个函数</li>
<li>怎么给按钮绑定响应函数？  答：1、使用jQuery查询到标签对象；2、使用标签对象.click(function(){});</li>
</ul>
<h2 id="5、jQuery的核心函数（-）"><a href="#5、jQuery的核心函数（-）" class="headerlink" title="5、jQuery的核心函数（$）"></a>5、jQuery的核心函数（$）</h2><ol>
<li>传入参数为函数时：表示页面加载完成之后，相当于window.onload() = function(){}</li>
<li>传入参数为 [HTML 字符串]时：会帮我们创建这个HTML对象</li>
<li>传入参数为 [选择器字符串]时：会根据对应的id、标签名、类型选择器进行查询<ul>
<li>$(“#id属性值”); id选择器，根据id查询标签对象</li>
<li>$(“标签名”); 标签名选择器，根据指定的标签名查询标签对象</li>
<li>$(“.class 属性值”); 类选择器，根据class属性查询标签对象</li>
</ul>
</li>
<li>传入参数为 [DOM 对象]时：会把这个DOM对象转化为jQuery对象</li>
</ol>
<h2 id="6、jQuery对象和Dom对象区分"><a href="#6、jQuery对象和Dom对象区分" class="headerlink" title="6、jQuery对象和Dom对象区分"></a>6、jQuery对象和Dom对象区分</h2><ol>
<li><p>Dom对象是通过getElementById()、getElementByName()、getElementByTagName()、createElement()方法创建的对象</p>
<ul>
<li>Dom对象alert()出来的结果是：[object HTML 标签名 Element]</li>
</ul>
<p>jQuery对象是通过jQuery包装的Dom对象，是提供的API创建的对象、查询到的对象</p>
<ul>
<li>jQuery对象alert()出来的结果是：[object Object]</li>
</ul>
</li>
<li><p>jQuery的本质：jQuery对象是一个Dom数组 + jQuery提供的一系列功能函数</p>
</li>
<li><p>二者使用区别：jQuery对象不能使用Dom对象的属性和方法、Dom对象也不能使用jQuery的属性和方法</p>
</li>
<li><p>二者的互转：</p>
<ul>
<li>Dom —&gt; jQuery对象：$( Dom对象 )</li>
<li>jQuery —&gt; Dom对象： jQuery[下标]，取出对应的Dom对象</li>
</ul>
</li>
</ol>
<h2 id="7、基本选择器"><a href="#7、基本选择器" class="headerlink" title="7、基本选择器"></a>7、基本选择器</h2><ol>
<li>#id 选择器：根据id查找</li>
<li>.class 选择器：根据class查找</li>
<li>element选择器：根据标签名查找</li>
<li>*选择器：表示全部元素</li>
<li>selector1，selector2 组合选择器：合并选择器1、2的结果返回</li>
</ol>
<h2 id="8、层级选择器"><a href="#8、层级选择器" class="headerlink" title="8、层级选择器"></a>8、层级选择器</h2><ol>
<li>ancestor descendant 后代选择器：在给定的祖先元素下匹配所有的后代元素</li>
<li>parent &gt; child    子元素选择器：在给定的父元素下匹配所有的后代元素</li>
<li>prev + next       相邻元素选择器：匹配所有紧接在 prev元素之后的 next元素</li>
<li>prev ~ siblings   之后的兄弟元素选择器：匹配 prev元素之后的所有 siblings元素</li>
</ol>
<h2 id="9、过滤选择器（学会使用文档，即用即查）"><a href="#9、过滤选择器（学会使用文档，即用即查）" class="headerlink" title="9、过滤选择器（学会使用文档，即用即查）"></a>9、过滤选择器（学会使用文档，即用即查）</h2><ol>
<li><p>基本过滤选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:first</span>  		获取第一个元素，查到的结果仍然是<span class="selector-tag">jQuery</span>对象</span><br><span class="line"><span class="selector-pseudo">:last</span>   		获取最后一个元素</span><br><span class="line"><span class="selector-pseudo">:not(selector)</span>  查找所有未选中的<span class="selector-tag">input</span>元素</span><br><span class="line"><span class="selector-pseudo">:even</span>   		查找索引值为偶数的元素：查找表格1、3、5、...行（即索引值为0、2、4、...）</span><br><span class="line"><span class="selector-pseudo">:odd</span>    		同上，奇数</span><br><span class="line"><span class="selector-pseudo">:eq(index)</span>  	匹配第一个给定索引值的元素（从0开始计数）</span><br><span class="line"><span class="selector-pseudo">:gt(index)</span>  	匹配所有大于给定索引值的元素（从0开始计数）</span><br><span class="line"><span class="selector-pseudo">:lt(index)</span>  	同上，小于</span><br><span class="line"><span class="selector-pseudo">:header</span> 		匹配如<span class="selector-tag">h1</span>、<span class="selector-tag">h2</span>、<span class="selector-tag">h3</span>之类的标题元素</span><br><span class="line"><span class="selector-pseudo">:animated</span>   	匹配所有正在执行动画效果的元素</span><br></pre></td></tr></table></figure></li>
<li><p>内容过滤器：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:contains(text)</span> 匹配所有给定文本的元素</span><br><span class="line"><span class="selector-pseudo">:empty</span>  		匹配所有不包含子元素或者文本的空元素</span><br><span class="line"><span class="selector-pseudo">:parent</span> 		匹配含有子元素或者文本的元素</span><br><span class="line"><span class="selector-pseudo">:has(selector)</span>  匹配含有选择器所匹配的元素的元素</span><br></pre></td></tr></table></figure></li>
<li><p>属性过滤器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[attribute]</span> 			匹配包含给定属性的元素</span><br><span class="line"><span class="selector-attr">[attribute = value]</span>  	匹配给定的元素是某个特定的值</span><br><span class="line"><span class="selector-attr">[attribute != value]</span>    匹配不含有指定的属性，或者属性不等于特定值的元素</span><br><span class="line"><span class="selector-attr">[attribute ^= value]</span>    匹配给定的属性是以某些值开始的元素</span><br><span class="line"><span class="selector-attr">[attribute $= value]</span>    匹配给定的属性是以某些值结尾的元素</span><br><span class="line"><span class="selector-attr">[attribute *= value]</span>    匹配给定的属性是以包含某些值的元素</span><br><span class="line"><span class="selector-attr">[selector 1]</span><span class="selector-attr">[selector 2]</span><span class="selector-attr">[selector N]</span>    复合属性选择器，需要同时满足多个条件时使用</span><br></pre></td></tr></table></figure></li>
<li><p>表单过滤器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:input</span>		匹配所有<span class="selector-tag">input</span>、<span class="selector-tag">textarea</span>、<span class="selector-tag">select</span>和<span class="selector-tag">button</span>元素</span><br><span class="line"><span class="selector-pseudo">:text</span>		匹配所有的单行文本框</span><br><span class="line"><span class="selector-pseudo">:password</span>	匹配所有密码框</span><br><span class="line"><span class="selector-pseudo">:radio</span>		匹配所有单选按钮</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>表单对象属性过滤器</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:enabled</span>	匹配所有可用的元素</span><br><span class="line"><span class="selector-pseudo">:disabled</span>	匹配所有不可用的元素</span><br><span class="line"><span class="selector-pseudo">:checked</span>	匹配所有选中的被选中元素(复选框、单选框等，不包括select中的option)</span><br><span class="line"><span class="selector-pseudo">:selected</span>	匹配所有选中的<span class="selector-tag">option</span>元素</span><br></pre></td></tr></table></figure>
<h2 id="10、元素的筛选"><a href="#10、元素的筛选" class="headerlink" title="10、元素的筛选"></a>10、元素的筛选</h2></li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">eq</span><span class="params">()</span></span>    	获取给定索引的元素</span><br><span class="line"><span class="function"><span class="title">first</span><span class="params">()</span></span> 	获取第一个元素</span><br><span class="line"><span class="function"><span class="title">last</span><span class="params">()</span></span>  	获取最后一个元素</span><br><span class="line"><span class="function"><span class="title">filter</span><span class="params">(exp)</span></span> 留下匹配的元素</span><br><span class="line"><span class="function"><span class="title">is</span><span class="params">()</span></span>		判断是否匹配给定的选择器，只要有一个匹配就返回</span><br><span class="line"><span class="function"><span class="title">find</span><span class="params">(exp)</span></span>		返回匹配给定选择器的后代元素</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="11、jQuery属性操作"><a href="#11、jQuery属性操作" class="headerlink" title="11、jQuery属性操作"></a>11、jQuery属性操作</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">html</span><span class="params">()</span></span>  可以设置和获取起始标签和结束标签之间的内容。和dom属性innerHTML一样</span><br><span class="line"><span class="function"><span class="title">text</span><span class="params">()</span></span>  可以设置和获取起始标签和结束标签之间的文本。和dom属性innerText一样</span><br><span class="line"><span class="function"><span class="title">val</span><span class="params">()</span></span>   可以设置和获取表单项的value属性值。和dom属性value一样，val方法还可以同时设置多个表单项的选中状态</span><br><span class="line"><span class="function"><span class="title">attr</span><span class="params">()</span></span> 	可以设置和获取属性（不推荐操作checked、readOnly、selected、disabled等），还可以操作用户自定义的属性</span><br><span class="line"><span class="function"><span class="title">prop</span><span class="params">()</span></span>	可以设置和获取属性（推荐操作上述固有属性）</span><br></pre></td></tr></table></figure>
<h2 id="12、DOM的增删改"><a href="#12、DOM的增删改" class="headerlink" title="12、DOM的增删改"></a>12、DOM的增删改</h2><ol>
<li>内部插入<ul>
<li>appendTo()，a.appendTo(b)：把a插入到b子元素末尾，成为最后一个子元素</li>
<li>prependTo()，a.prependTo()：把a插入到b子元素前面，成为第一个子元素</li>
</ul>
</li>
<li>外部插入<ul>
<li>insertAfter()，a.insertAfter(b)：得到ba</li>
<li>insertBefore()，a.insertBefore(b)：得到ab</li>
</ul>
</li>
<li>替换<ul>
<li>replaceWith()，a.replaceWith(b)：用b替换a</li>
<li>replaceAll()，a.replaceAll(b)：用a替换掉所有的b</li>
</ul>
</li>
<li>删除<ul>
<li>remove()，a.remove()：删除a标签</li>
<li>empty()，a.empty()：清空a标签的内容</li>
</ul>
</li>
</ol>
<h2 id="13、CSS样式操作"><a href="#13、CSS样式操作" class="headerlink" title="13、CSS样式操作"></a>13、CSS样式操作</h2><ol>
<li>addClass()：添加样式</li>
<li>removeClass()：删除样式</li>
<li>toggleClass()：有就删除，没有就添加样式</li>
<li>offset()：获取和设置元素的坐标</li>
</ol>
<h2 id="14、jQuery动画操作"><a href="#14、jQuery动画操作" class="headerlink" title="14、jQuery动画操作"></a>14、jQuery动画操作</h2><ol>
<li><p>基本动画</p>
<ul>
<li>show()：将隐藏的元素显示</li>
<li>hide()：将可见的元素隐藏</li>
<li>toggle()：可见就隐藏，隐藏就显示</li>
</ul>
<p>以上动画方法都可以添加参数</p>
<ul>
<li>第一个参数：执行的时长，毫秒为单位</li>
<li>第二个参数：回调函数，动画完成后自动调用的函数</li>
</ul>
</li>
<li><p>淡入淡出动画</p>
<ul>
<li>fadeIn()：淡入</li>
<li>fadeOut()：淡出</li>
<li>fadeTo()：在指定时长内慢慢地将透明度修改到指定值（0透明，1完全可见，0.5半透明）</li>
<li>fadeToggle()：淡入/淡出切换</li>
</ul>
</li>
</ol>
<h2 id="15、jQuery事件操作"><a href="#15、jQuery事件操作" class="headerlink" title="15、jQuery事件操作"></a>15、jQuery事件操作</h2><ol>
<li><p>$(function(){});和window.onload=function(){}的区别？</p>
<ol>
<li>它们分别是在什么时候触发？<ul>
<li>jQuery的页面加载完成之后是浏览器的内核解析完页面的标签创建好DOM对象后立即执行</li>
<li>原生js的页面加载完成之后，除了等浏览器的内核解析完页面的标签创建好DOM对象，还要等标签显示时需要的内容加载完成</li>
</ul>
</li>
<li>它们触发的顺序？<ul>
<li>jQuery页面加载完成后先执行</li>
<li>原生js的页面加载完成后再执行</li>
</ul>
</li>
<li>它们执行的次数？，<ul>
<li>原生js的页面加载完成之后，只会执行最后一次的赋值函数</li>
<li>jQuery的页面加载完成之后，把注册的function函数依次顺序执行</li>
</ul>
</li>
</ol>
</li>
<li><p>jQuery中其他的事件处理方法</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">click</span><span class="params">()</span></span>		绑定单击事件和触发单击事件</span><br><span class="line"><span class="function"><span class="title">mouseover</span><span class="params">()</span></span>	鼠标移入事件	</span><br><span class="line"><span class="function"><span class="title">mouseout</span><span class="params">()</span></span>	鼠标移出事件</span><br><span class="line"><span class="function"><span class="title">bind</span><span class="params">()</span></span>		可以给元素一次性绑定一个或多个事件</span><br><span class="line"><span class="function"><span class="title">one</span><span class="params">()</span></span>		使用上和bind()一样，但是one()方法绑定的事件只会响应一次</span><br><span class="line"><span class="function"><span class="title">unbind</span><span class="params">()</span></span>	解除事件绑定</span><br><span class="line"><span class="function"><span class="title">live</span><span class="params">()</span></span>		也是绑定事件，可以用来绑定选择器匹配的所有元素的事件，即使这个元素是后面动态创建出来的（现官方推荐使用on）</span><br></pre></td></tr></table></figure></li>
<li><p>事件的冒泡</p>
<ul>
<li><p>指父子元素同时监听一个事件，当触发子元素的事件的时候，同一个事件也被传递到了父元素的事件里</p>
</li>
<li><p>如何阻止事件冒泡？在子元素事件函数体内，使用return false;</p>
</li>
</ul>
</li>
<li><p>事件对象的获取</p>
<ul>
<li><p>原生javascript获取事件对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">document</span>.getElementById(<span class="string">&quot;_&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(event);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>jQuery代码获取事件对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">	$(<span class="string">&quot;#_&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(event);</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>使用bind同时把多个事件绑定到同一个函数，通过event获取当前操作是什么事件</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>lexical_analyzer</title>
    <url>/2021/03/18/lexical-analyzer/</url>
    <content><![CDATA[<h1 id="编译原理实验1——词法分析器"><a href="#编译原理实验1——词法分析器" class="headerlink" title="编译原理实验1——词法分析器"></a>编译原理实验1——词法分析器</h1><h2 id="1、实验要求"><a href="#1、实验要求" class="headerlink" title="1、实验要求"></a>1、实验要求</h2><p>​    一、实验目的：加深对词法分析器的工作过程的理解；加强对词法分析方法的掌握；能够采用一种编程语言实现简单的词法分析程序；能够使用自己编写的分析程序对简单的程序段进行词法分析。</p>
<p>​    二、实验内容：自定义一种程序设计语言，或者选择已有的一种高级语言，编制它的词法分析程序。词法分析程序的实现可以采用任何一种编程语言和编程工具。 从输入的源程序中，识别出各个具有独立意义的单词，即关键字、标识符、常数、运算 符、界符。并依次输出各个单词的内部编码及单词符号自身值。（遇到错误时可显示“Error”，然后跳过错误部分继续显示）</p>
<p>​    三、实验要求：1. 对单词的构词规则有明确的定义；2. 编写的分析程序能够正确识别源程序中的单词符号；3. 识别出的单词以&lt;种别码，值&gt;的形式保存在符号表中，正确设计和维护符号表；4. 对于源程序中的词法错误，能够做出简单的错误处理，给出简单的错误提示，保证顺利完成整个源程序的词法分析；</p>
<p>​    四、实验步骤：1. 定义目标语言的可用符号表和构词规则；2. 依次读入源程序符号，对源程序进行单词切分和识别，直到源程序结束；3. 对正确的单词，按照它的种别以&lt;种别码，值&gt;的形式保存在符号表中；4. 对不正确的单词，做出错误处理。</p>
<a id="more"></a>

<h2 id="2、实验方法"><a href="#2、实验方法" class="headerlink" title="2、实验方法"></a>2、实验方法</h2><p>​    根据对应的状态转换图完成编码<br><img src="/2021/03/18/lexical-analyzer/20200714200339184.png" alt="状态转换图"></p>
<h2 id="3、代码实现"><a href="#3、代码实现" class="headerlink" title="3、代码实现"></a>3、代码实现</h2><h3 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h3><p>1）准备一个关键字文件，用于存储要识别的关键字，方便后续添加，命名为keyword.txt</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">private</span> <span class="string">一种访问控制方式：私用模式</span></span><br><span class="line"><span class="attr">protected</span>   <span class="string">一种访问控制方式：保护模式</span></span><br><span class="line"><span class="attr">public</span>  <span class="string">一种访问控制方式：共用模式</span></span><br><span class="line"><span class="attr">abstract</span>   <span class="string">表明类或者成员方法具有抽象属性</span></span><br><span class="line"><span class="attr">class</span>  <span class="string">类</span></span><br><span class="line"><span class="attr">extends</span>    <span class="string">表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</span></span><br><span class="line"><span class="attr">final</span>  <span class="string">用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变</span></span><br><span class="line"><span class="attr">implements</span> <span class="string">表明一个类实现了给定的接口</span></span><br><span class="line"><span class="attr">interface</span>  <span class="string">接口</span></span><br><span class="line"><span class="attr">native</span> <span class="string">用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</span></span><br><span class="line"><span class="attr">new</span>    <span class="string">用来创建新实例对象</span></span><br><span class="line"><span class="attr">static</span> <span class="string">表明具有静态属性</span></span><br><span class="line"><span class="attr">strictfp</span>   <span class="string">用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE 754算术规范</span></span><br><span class="line"><span class="attr">synchronized</span>   <span class="string">表明一段代码需要同步执行</span></span><br><span class="line"><span class="attr">transient</span>  <span class="string">声明不用序列化的成员域</span></span><br><span class="line"><span class="attr">volatile</span>   <span class="string">表明两个或者多个变量必须同步地发生变化</span></span><br><span class="line"><span class="attr">break</span>  <span class="string">提前跳出一个块</span></span><br><span class="line"><span class="attr">continue</span>   <span class="string">回到一个块的开始处</span></span><br><span class="line"><span class="attr">return</span> <span class="string">从成员方法中返回数据</span></span><br><span class="line"><span class="attr">do</span> <span class="string">用在do-while循环结构中</span></span><br><span class="line"><span class="attr">while</span>  <span class="string">用在循环结构中 </span></span><br><span class="line"><span class="attr">if</span> <span class="string">条件语句的引导词</span></span><br><span class="line"><span class="attr">else</span>   <span class="string">用在条件语句中，表明当条件不成立时的分支</span></span><br><span class="line"><span class="attr">for</span>    <span class="string">一种循环结构的引导词</span></span><br><span class="line"><span class="attr">instanceof</span> <span class="string">用来测试一个对象是否是指定类型的实例对象</span></span><br><span class="line"><span class="attr">switch</span> <span class="string">分支语句结构的引导词</span></span><br><span class="line"><span class="attr">case</span>   <span class="string">用在switch语句之中，表示其中的一个分支</span></span><br><span class="line"><span class="attr">default</span>    <span class="string">默认，例如，用在switch语句中，表明一个默认的分支</span></span><br><span class="line"><span class="attr">try</span>    <span class="string">尝试一个可能抛出异常的程序块</span></span><br><span class="line"><span class="attr">catch</span>  <span class="string">用在异常处理中，用来捕捉异常</span></span><br><span class="line"><span class="attr">throw</span>  <span class="string">抛出一个异常</span></span><br><span class="line"><span class="attr">throws</span> <span class="string">声明在当前定义的成员方法中所有需要抛出的异常</span></span><br><span class="line"><span class="attr">import</span> <span class="string">表明要访问指定的类或包</span></span><br><span class="line"><span class="attr">package</span>    <span class="string">包</span></span><br><span class="line"><span class="attr">boolean</span>    <span class="string">基本数据类型之一，布尔类型</span></span><br><span class="line"><span class="attr">byte</span>   <span class="string">基本数据类型之一，字节类型</span></span><br><span class="line"><span class="attr">char</span>   <span class="string">基本数据类型之一，字符类型</span></span><br><span class="line"><span class="attr">double</span> <span class="string">基本数据类型之一，双精度浮点数类型</span></span><br><span class="line"><span class="attr">float</span>  <span class="string">基本数据类型之一，单精度浮点数类型</span></span><br><span class="line"><span class="attr">int</span> <span class="string">基本数据类型之一，整数类型</span></span><br><span class="line"><span class="attr">long</span>   <span class="string">基本数据类型之一，长整数类型</span></span><br><span class="line"><span class="attr">short</span>  <span class="string">基本数据类型之一,短整数类型</span></span><br><span class="line"><span class="attr">super</span>  <span class="string">表明当前对象的父类型的引用或者父类型的构造方法</span></span><br><span class="line"><span class="attr">this</span>   <span class="string">指向当前实例对象的引用</span></span><br><span class="line"><span class="attr">void</span>   <span class="string">声明当前成员方法没有返回值</span></span><br><span class="line"><span class="attr">goto</span>   <span class="string">保留关键字，没有具体含义</span></span><br><span class="line"><span class="attr">const</span>   <span class="string">保留关键字，没有具体含义</span></span><br></pre></td></tr></table></figure>
<p>2）准备一个运算符文件，用于存储要识别的运算符，方便后续添加，命名为operator.txt</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">+</span>   <span class="string">加法 - 相加运算符两侧的值</span></span><br><span class="line"><span class="meta">-</span>  <span class="string">减法 - 左操作数减去右操作数</span></span><br><span class="line"><span class="meta">*</span>  <span class="string">乘法 - 相乘操作符两侧的值</span></span><br><span class="line"><span class="meta">/</span>  <span class="string">除法 - 左操作数除以右操作数</span></span><br><span class="line"><span class="meta">％</span>  <span class="string">取余 - 左操作数除以右操作数的余数</span></span><br><span class="line"><span class="meta">++</span> <span class="string">自增: 操作数的值增加1</span></span><br><span class="line"><span class="meta">--</span> <span class="string">自减: 操作数的值减少1</span></span><br><span class="line">== 检查如果两个操作数的值是否相等，如果相等则条件为真。</span><br><span class="line"><span class="comment">!=  检查如果两个操作数的值是否相等，如果值不相等则条件为真。</span></span><br><span class="line"><span class="meta">&gt;</span>   <span class="string">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</span></span><br><span class="line"><span class="meta">&lt;</span>   <span class="string">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</span></span><br><span class="line"><span class="meta">&gt;</span>=  <span class="string">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</span></span><br><span class="line"><span class="meta">&lt;</span>= <span class="string">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</span></span><br><span class="line"><span class="meta">&amp;</span>  <span class="string">如果相对应位都是1，则结果为1，否则为0</span></span><br><span class="line"><span class="meta">|</span>  <span class="string">如果相对应位都是 0，则结果为 0，否则为 1</span></span><br><span class="line"><span class="meta">^</span>  <span class="string">如果相对应位值相同，则结果为0，否则为1</span></span><br><span class="line"><span class="meta">~</span>  <span class="string">按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</span></span><br><span class="line"><span class="meta">&lt;&lt;</span>     <span class="string">按位左移运算符。左操作数按位左移右操作数指定的位数。</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>     <span class="string">按位右移运算符。左操作数按位右移右操作数指定的位数。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="string">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</span></span><br><span class="line"><span class="meta">&amp;&amp;</span> <span class="string">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</span></span><br><span class="line"><span class="meta">||</span> <span class="string">称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</span></span><br><span class="line"><span class="comment">!   称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</span></span><br><span class="line">=  简单的赋值运算符，将右操作数的值赋给左侧操作数</span><br><span class="line"><span class="meta">+</span>=  <span class="string">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</span></span><br><span class="line"><span class="meta">-</span>= <span class="string">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</span></span><br><span class="line"><span class="meta">*</span>= <span class="string">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</span></span><br><span class="line"><span class="meta">/</span>= <span class="string">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</span></span><br><span class="line"><span class="meta">(％)</span>=    <span class="string">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</span></span><br><span class="line"><span class="meta">&lt;&lt;</span>=    <span class="string">左移位赋值运算符</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>=    <span class="string">右移位赋值运算符</span></span><br><span class="line"><span class="meta">&amp;</span>= <span class="string">按位与赋值运算符</span></span><br><span class="line"><span class="meta">^</span>=  <span class="string">按位异或赋值操作符</span></span><br><span class="line"><span class="meta">|</span>=  <span class="string">按位或赋值操作符</span></span><br></pre></td></tr></table></figure>
<p>3）准备一个分割符文件，用于存储要识别的分割符，方便后续添加，命名为separation.txt</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#123;</span>   <span class="string">大括号(花括号)：用来定义块、类、方法及局部范围，也用来包括自己初始化的数组的值。大括号必须成对出现</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="meta">[</span>   <span class="string">中括号(方括号)：用来进行数组的声明，也用来撤销对数组值的引用</span></span><br><span class="line"><span class="attr">]</span></span><br><span class="line"><span class="meta">(</span>   <span class="string">小括号(圆括号)：在定义和调用方法时，用来容纳参数表。在控制语句或强制类型转换的表达式中用来表示执行或计算的优先权</span></span><br><span class="line"><span class="attr">)</span></span><br><span class="line"><span class="meta">;</span>   <span class="string">分号：用来表示一条语句的结束。语句必须以分号结束，否则即使一条语句跨行或者多行，仍是未结束的</span></span><br><span class="line"><span class="meta">,</span>   <span class="string">逗号：在变量生命中用于分隔变量表中的各个变量，在for控制语句中，用来将圆括号里的语句链接起来</span></span><br><span class="line">:   冒号：说明语句标号</span><br><span class="line"><span class="meta">.</span>   <span class="string">圆点：用于类/对象和它的属性或者方法之间的分隔。</span></span><br></pre></td></tr></table></figure>
<h3 id="2-编写FileUtil工具类"><a href="#2-编写FileUtil工具类" class="headerlink" title="2. 编写FileUtil工具类"></a>2. 编写FileUtil工具类</h3><p>定义一个工具类FileUtil，实现readFile()方法：读取文本文件，创建一个ArrayList&lt; String &gt;队列存取符号，读取完毕则返回该队列。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title">readFile</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//以字符方式读取文本文件</span></span><br><span class="line">        FileReader fis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileReader(filePath);</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(fis);</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                line = line.split(<span class="string">&quot;\\s+&quot;</span>)[<span class="number">0</span>];	<span class="comment">//按空白字符进行分割</span></span><br><span class="line">                arrayList.add(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-编写LexicalAnalyzer主类"><a href="#3-编写LexicalAnalyzer主类" class="headerlink" title="3. 编写LexicalAnalyzer主类"></a>3. 编写LexicalAnalyzer主类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 编译原理.作业<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LexicalAnalyzer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String keywordFilePath = <span class="string">&quot;src/编译原理/作业1/keyword.txt&quot;</span>;    <span class="comment">//关键字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String operatorFilePath = <span class="string">&quot;src/编译原理/作业1/operator.txt&quot;</span>;  <span class="comment">//运算符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String separationFilePath = <span class="string">&quot;src/编译原理/作业1/separation.txt&quot;</span>;  <span class="comment">//分隔符</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String targetFilePath = <span class="string">&quot;src/编译原理/作业1/test_data.txt&quot;</span>;  <span class="comment">//测试文件</span></span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;String&gt; keyWords=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;String&gt; operations=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;String&gt; symbols=<span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//指向当前所读到字符串的位置的指针</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> p,lines;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//初始化，读入关键字、运算符、分隔符配置文件</span></span><br><span class="line">        keyWords = FileUtil.readFile(keywordFilePath);</span><br><span class="line">        operations = FileUtil.readFile(operatorFilePath);</span><br><span class="line">        symbols = FileUtil.readFile(separationFilePath);</span><br><span class="line">        <span class="comment">//读入目标文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(targetFilePath);</span><br><span class="line">        lines = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span>(Scanner input = <span class="keyword">new</span> Scanner(file)) &#123;</span><br><span class="line">            <span class="keyword">while</span> (input.hasNextLine())&#123;</span><br><span class="line">                analyze(input.nextLine());</span><br><span class="line">                lines++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">analyze</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        p = <span class="number">0</span>;</span><br><span class="line">        str = str.trim();</span><br><span class="line">        <span class="keyword">for</span> (; p &lt; str.length(); p++)&#123;</span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(p);</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(ch))&#123;</span><br><span class="line">                <span class="comment">//实数的识别</span></span><br><span class="line">                digitCheck(str);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Character.isLetter(ch)||ch == <span class="string">&#x27;_&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">//标识符，关键字的识别</span></span><br><span class="line">                letterCheck(str);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ch ==<span class="string">&#x27;&quot;&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">//字符串检查</span></span><br><span class="line">                stringCheck(str);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ch ==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//符号的识别</span></span><br><span class="line">                symbolCheck(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*数字的识别</span></span><br><span class="line"><span class="comment">     * 1、识别退出：</span></span><br><span class="line"><span class="comment">     *   1.1、遇到空格符</span></span><br><span class="line"><span class="comment">     *   1.2、遇到运算符或者分割符</span></span><br><span class="line"><span class="comment">     * 2、错误情况：</span></span><br><span class="line"><span class="comment">     *   2.1、两个及以上小数点</span></span><br><span class="line"><span class="comment">     *   2.2、掺杂字母</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">digitCheck</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(String.valueOf(str.charAt(p++)));</span><br><span class="line">        <span class="comment">//判断数字的小数点是否有且是否大于1</span></span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> err = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">for</span> (; p&lt;str.length(); p++) &#123;</span><br><span class="line">            ch = str.charAt(p);</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27; &#x27;</span>|| (!Character.isLetterOrDigit(ch) &amp;&amp; ch!=<span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (err)&#123;</span><br><span class="line">                sb.append(ch);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(ch);</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">                        err = <span class="keyword">true</span>; <span class="comment">//多出一个小数点，Error！</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        flag++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Character.isLetter(ch))&#123;</span><br><span class="line">                    err = <span class="keyword">true</span>; <span class="comment">//出现字母，Error！</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String token = sb.toString();</span><br><span class="line">        <span class="keyword">if</span> (token.charAt(token.length()-<span class="number">1</span>) == <span class="string">&#x27;.&#x27;</span>)&#123; <span class="comment">//最后一位为小数点，Error！</span></span><br><span class="line">            err = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (err)&#123;</span><br><span class="line">            System.out.println(lines + <span class="string">&quot;line&quot;</span> + <span class="string">&quot;: &quot;</span> + token + <span class="string">&quot; is wrong&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;(&quot;</span> + <span class="string">&quot;常数&quot;</span> + <span class="string">&quot;,&quot;</span> + token + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p!=str.length()-<span class="number">1</span>||(p==str.length()-<span class="number">1</span>&amp;&amp;!Character.isDigit(str.charAt(p))))&#123;</span><br><span class="line">            p--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//标识符，关键字的识别</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">letterCheck</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(String.valueOf(str.charAt(p++)));</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">for</span> (; p &lt; str.length(); p++)&#123;</span><br><span class="line">            ch = str.charAt(p);</span><br><span class="line">            <span class="keyword">if</span> (!Character.isLetterOrDigit(ch) &amp;&amp; ch!=<span class="string">&#x27;_&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String token = sb.toString();</span><br><span class="line">        <span class="keyword">if</span> (keyWords.contains(token))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;(&quot;</span> + <span class="string">&quot;关键字&quot;</span> + <span class="string">&quot;,&quot;</span> + token + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;(&quot;</span> + <span class="string">&quot;标识符&quot;</span> + <span class="string">&quot;,&quot;</span> + token + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p!=str.length()-<span class="number">1</span>||(p==str.length()-<span class="number">1</span>&amp;&amp;(!Character.isLetterOrDigit(str.charAt(p))&amp;&amp;str.charAt(p)!=<span class="string">&#x27;_&#x27;</span>)))&#123;</span><br><span class="line">            p--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//符号的识别</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">symbolCheck</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        String token = String.valueOf(str.charAt(p++));</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">if</span> (symbols.contains(token))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;(&quot;</span>+<span class="string">&quot;分隔符&quot;</span>+<span class="string">&quot;,&quot;</span>+token+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">            p--;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (operations.contains(token))&#123;</span><br><span class="line">                <span class="keyword">if</span> (p &lt; str.length())&#123;</span><br><span class="line">                    ch = str.charAt(p);</span><br><span class="line">                    <span class="keyword">if</span> (operations.contains(token+ch))&#123;</span><br><span class="line">                        token += ch;</span><br><span class="line">                        p++;</span><br><span class="line">                        <span class="keyword">if</span> (p &lt; str.length())&#123;</span><br><span class="line">                            ch = str.charAt(p);</span><br><span class="line">                            <span class="keyword">if</span> (operations.contains(token + ch))&#123;</span><br><span class="line">                                token += ch;</span><br><span class="line">                                System.out.println(<span class="string">&quot;(&quot;</span>+<span class="string">&quot;运算符&quot;</span>+<span class="string">&quot;,&quot;</span>+token+<span class="string">&quot;)&quot;</span>);    <span class="comment">//三个字符的运算符</span></span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                p--;</span><br><span class="line">                                System.out.println(<span class="string">&quot;(&quot;</span>+<span class="string">&quot;运算符&quot;</span>+<span class="string">&quot;,&quot;</span>+token+<span class="string">&quot;)&quot;</span>);   <span class="comment">//两个字符的运算符</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;(&quot;</span>+<span class="string">&quot;运算符&quot;</span>+<span class="string">&quot;,&quot;</span>+token+<span class="string">&quot;)&quot;</span>);    <span class="comment">//两个字符的运算符</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        p--;</span><br><span class="line">                        System.out.println(<span class="string">&quot;(&quot;</span>+<span class="string">&quot;运算符&quot;</span>+<span class="string">&quot;,&quot;</span>+token+<span class="string">&quot;)&quot;</span>);        <span class="comment">//一个字符的运算符</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                p--;</span><br><span class="line">                System.out.println(lines+<span class="string">&quot;line&quot;</span>+<span class="string">&quot;: &quot;</span>+token+<span class="string">&quot; is wrong&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符串检查</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stringCheck</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(String.valueOf(str.charAt(p++)));</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">for</span> (;p&lt;str.length();p++)&#123;</span><br><span class="line">            ch=str.charAt(p);</span><br><span class="line">            sb.append(ch);</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;&quot;&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String token = sb.toString();</span><br><span class="line">        <span class="keyword">if</span> (token.charAt(token.length()-<span class="number">1</span>)!=<span class="string">&#x27;&quot;&#x27;</span>)&#123;</span><br><span class="line">            System.out.println(lines+<span class="string">&quot;line&quot;</span>+<span class="string">&quot;: &quot;</span>+token+<span class="string">&quot; is wrong&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;(&quot;</span>+<span class="string">&quot;字符串&quot;</span>+<span class="string">&quot;,&quot;</span>+token+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4、运行测试"><a href="#4、运行测试" class="headerlink" title="4、运行测试"></a>4、运行测试</h2><p>注：测试文件为该程序代码本身，以下为部分结果截图</p>
<p><img src="/2021/03/18/lexical-analyzer/image-20210318204533140.png" alt="image-20210318204533140"></p>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>词法分析器</tag>
      </tags>
  </entry>
  <entry>
    <title>semantic_analysis</title>
    <url>/2021/06/18/semantic-analysis/</url>
    <content><![CDATA[<h1 id="编译原理实验6——基于SLR-1-分析法的语法制导翻译及中间代码生成"><a href="#编译原理实验6——基于SLR-1-分析法的语法制导翻译及中间代码生成" class="headerlink" title="编译原理实验6——基于SLR(1)分析法的语法制导翻译及中间代码生成"></a>编译原理实验6——基于SLR(1)分析法的语法制导翻译及中间代码生成</h1><h2 id="1、语法制导翻译"><a href="#1、语法制导翻译" class="headerlink" title="1、语法制导翻译"></a>1、语法制导翻译</h2><p>​    对文法中的每个产生式都附加一个语义动作或语义子程序，且在语法分析过程中，每当需要使用一个产生式进行推导或规约时，语法分析程序除执行相应的<strong>语法分析</strong>动作之外，还要执行相应地<strong>语义动作</strong>或语义子程序。每个语义子程序都指明了相应产生式中各个符号的具体含义，并规定了使用该产生式进行分析时所应采取的语义动作。</p>
<h2 id="2、实验内容"><a href="#2、实验内容" class="headerlink" title="2、实验内容"></a>2、实验内容</h2><p>基于SLR(1)文法，完成以下描述赋值语句语法制导生成中间代码三地址码的过程。</p>
<ul>
<li><p>G[E]：<br>S→V=E</p>
<p>E →E+T∣E-T∣T</p>
<p>T→T*F∣T/F∣F</p>
<p>F→(E)∣i</p>
<p>V→i</p>
</li>
</ul>
<a id="more"></a>

<h2 id="3、设计要求"><a href="#3、设计要求" class="headerlink" title="3、设计要求"></a>3、设计要求</h2><p>（1）构造文法的 SLR(1)分析表，设计语法制导翻译过程，每一个产生式配上对应的语义动作；</p>
<p>（2）设计中间代码即三地址码的结构；</p>
<p>（3）对输入串进行语法分析的同时进行语义分析，输出为赋值语句的三地址码序列中间过程；</p>
<p>（4）设计两个测试用例（尽可能完备），并给出程序执行结果。</p>
<h2 id="4、程序代码"><a href="#4、程序代码" class="headerlink" title="4、程序代码"></a>4、程序代码</h2><p><code>具体代码请添加QQ：1277565476</code></p>
<h2 id="5、测试结果"><a href="#5、测试结果" class="headerlink" title="5、测试结果"></a>5、测试结果</h2><ul>
<li>案例1：测试串：x=a+b*(c-d)/2</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">================基本文法如下=================</span><br><span class="line">G-&gt;A</span><br><span class="line">A-&gt;V=E</span><br><span class="line">E-&gt;E+T</span><br><span class="line">E-&gt;E-T</span><br><span class="line">E-&gt;T</span><br><span class="line">T-&gt;T*F</span><br><span class="line">T-&gt;T/F</span><br><span class="line">T-&gt;F</span><br><span class="line">F-&gt;(E)</span><br><span class="line">F-&gt;i</span><br><span class="line">V-&gt;i</span><br><span class="line">================文法拓展如下=================</span><br><span class="line">G-&gt;.A</span><br><span class="line">A-&gt;.V=E</span><br><span class="line">E-&gt;.E+T</span><br><span class="line">E-&gt;.E-T</span><br><span class="line">E-&gt;.T</span><br><span class="line">T-&gt;.T*F</span><br><span class="line">T-&gt;.T/F</span><br><span class="line">T-&gt;.F</span><br><span class="line">F-&gt;.(E)</span><br><span class="line">F-&gt;.i</span><br><span class="line">V-&gt;.i</span><br><span class="line">================项目集规范族如下=================</span><br><span class="line">I0:</span><br><span class="line">V-&gt;.i	G-&gt;.A	A-&gt;.V=E	</span><br><span class="line">状态<span class="number">0</span>--A--&gt;状态<span class="number">1</span></span><br><span class="line">状态<span class="number">0</span>--V--&gt;状态<span class="number">3</span></span><br><span class="line">状态<span class="number">0</span>--i--&gt;状态<span class="number">2</span></span><br><span class="line"></span><br><span class="line">I1:</span><br><span class="line">G-&gt;A.	</span><br><span class="line">该状态为终端结点</span><br><span class="line"></span><br><span class="line">I2:</span><br><span class="line">V-&gt;i.	</span><br><span class="line">该状态为终端结点</span><br><span class="line"></span><br><span class="line">I3:</span><br><span class="line">A-&gt;V.=E	</span><br><span class="line">状态<span class="number">3</span>--=--&gt;状态<span class="number">4</span></span><br><span class="line"></span><br><span class="line">I4:</span><br><span class="line">A-&gt;V=.E	E-&gt;.E+T	T-&gt;.T*F	E-&gt;.E-T	T-&gt;.T/F	T-&gt;.F	F-&gt;.(E)	E-&gt;.T	F-&gt;.i	</span><br><span class="line">状态<span class="number">4</span>--T--&gt;状态<span class="number">9</span></span><br><span class="line">状态<span class="number">4</span>--E--&gt;状态<span class="number">5</span></span><br><span class="line">状态<span class="number">4</span>--F--&gt;状态<span class="number">6</span></span><br><span class="line">状态<span class="number">4</span>--(--&gt;状态<span class="number">7</span></span><br><span class="line">状态<span class="number">4</span>--i--&gt;状态<span class="number">8</span></span><br><span class="line"></span><br><span class="line">I5:</span><br><span class="line">A-&gt;V=E.	E-&gt;E.-T	E-&gt;E.+T	</span><br><span class="line">状态<span class="number">5</span>--+--&gt;状态<span class="number">10</span></span><br><span class="line">状态<span class="number">5</span>-----&gt;状态<span class="number">11</span></span><br><span class="line"></span><br><span class="line">I6:</span><br><span class="line">T-&gt;F.	</span><br><span class="line">该状态为终端结点</span><br><span class="line"></span><br><span class="line">I7:</span><br><span class="line">E-&gt;.E+T	T-&gt;.T*F	E-&gt;.E-T	T-&gt;.T/F	T-&gt;.F	F-&gt;.(E)	F-&gt;(.E)	E-&gt;.T	F-&gt;.i	</span><br><span class="line">状态<span class="number">7</span>--T--&gt;状态<span class="number">9</span></span><br><span class="line">状态<span class="number">7</span>--E--&gt;状态<span class="number">12</span></span><br><span class="line">状态<span class="number">7</span>--F--&gt;状态<span class="number">6</span></span><br><span class="line">状态<span class="number">7</span>--(--&gt;状态<span class="number">7</span></span><br><span class="line">状态<span class="number">7</span>--i--&gt;状态<span class="number">8</span></span><br><span class="line"></span><br><span class="line">I8:</span><br><span class="line">F-&gt;i.	</span><br><span class="line">该状态为终端结点</span><br><span class="line"></span><br><span class="line">I9:</span><br><span class="line">T-&gt;T./F	E-&gt;T.	T-&gt;T.*F	</span><br><span class="line">状态<span class="number">9</span>--*--&gt;状态<span class="number">13</span></span><br><span class="line">状态<span class="number">9</span>--/--&gt;状态<span class="number">14</span></span><br><span class="line"></span><br><span class="line">I10:</span><br><span class="line">T-&gt;.T*F	E-&gt;E+.T	T-&gt;.T/F	T-&gt;.F	F-&gt;.(E)	F-&gt;.i	</span><br><span class="line">状态<span class="number">10</span>--T--&gt;状态<span class="number">15</span></span><br><span class="line">状态<span class="number">10</span>--F--&gt;状态<span class="number">6</span></span><br><span class="line">状态<span class="number">10</span>--(--&gt;状态<span class="number">7</span></span><br><span class="line">状态<span class="number">10</span>--i--&gt;状态<span class="number">8</span></span><br><span class="line"></span><br><span class="line">I11:</span><br><span class="line">T-&gt;.T*F	E-&gt;E-.T	T-&gt;.T/F	T-&gt;.F	F-&gt;.(E)	F-&gt;.i	</span><br><span class="line">状态<span class="number">11</span>--T--&gt;状态<span class="number">16</span></span><br><span class="line">状态<span class="number">11</span>--F--&gt;状态<span class="number">6</span></span><br><span class="line">状态<span class="number">11</span>--(--&gt;状态<span class="number">7</span></span><br><span class="line">状态<span class="number">11</span>--i--&gt;状态<span class="number">8</span></span><br><span class="line"></span><br><span class="line">I12:</span><br><span class="line">F-&gt;(E.)	E-&gt;E.-T	E-&gt;E.+T	</span><br><span class="line">状态<span class="number">12</span>--)--&gt;状态<span class="number">17</span></span><br><span class="line">状态<span class="number">12</span>--+--&gt;状态<span class="number">10</span></span><br><span class="line">状态<span class="number">12</span>-----&gt;状态<span class="number">11</span></span><br><span class="line"></span><br><span class="line">I13:</span><br><span class="line">T-&gt;T*.F	F-&gt;.(E)	F-&gt;.i	</span><br><span class="line">状态<span class="number">13</span>--F--&gt;状态<span class="number">18</span></span><br><span class="line">状态<span class="number">13</span>--(--&gt;状态<span class="number">7</span></span><br><span class="line">状态<span class="number">13</span>--i--&gt;状态<span class="number">8</span></span><br><span class="line"></span><br><span class="line">I14:</span><br><span class="line">F-&gt;.(E)	F-&gt;.i	T-&gt;T/.F	</span><br><span class="line">状态<span class="number">14</span>--F--&gt;状态<span class="number">19</span></span><br><span class="line">状态<span class="number">14</span>--(--&gt;状态<span class="number">7</span></span><br><span class="line">状态<span class="number">14</span>--i--&gt;状态<span class="number">8</span></span><br><span class="line"></span><br><span class="line">I15:</span><br><span class="line">T-&gt;T./F	E-&gt;E+T.	T-&gt;T.*F	</span><br><span class="line">状态<span class="number">15</span>--*--&gt;状态<span class="number">13</span></span><br><span class="line">状态<span class="number">15</span>--/--&gt;状态<span class="number">14</span></span><br><span class="line"></span><br><span class="line">I16:</span><br><span class="line">T-&gt;T./F	E-&gt;E-T.	T-&gt;T.*F	</span><br><span class="line">状态<span class="number">16</span>--*--&gt;状态<span class="number">13</span></span><br><span class="line">状态<span class="number">16</span>--/--&gt;状态<span class="number">14</span></span><br><span class="line"></span><br><span class="line">I17:</span><br><span class="line">F-&gt;(E).	</span><br><span class="line">该状态为终端结点</span><br><span class="line"></span><br><span class="line">I18:</span><br><span class="line">T-&gt;T*F.	</span><br><span class="line">该状态为终端结点</span><br><span class="line"></span><br><span class="line">I19:</span><br><span class="line">T-&gt;T/F.	</span><br><span class="line">该状态为终端结点</span><br><span class="line"></span><br><span class="line">A→V=E</span><br><span class="line">E→E+T|E-T|T</span><br><span class="line">T→T*F|T/F|F</span><br><span class="line">F→(E)|i</span><br><span class="line">V→i</span><br><span class="line">================FIRST集如下=================</span><br><span class="line">F-&gt;i:[i]</span><br><span class="line">E-&gt;E-T:[(, i]</span><br><span class="line">T-&gt;T*F:[(, i]</span><br><span class="line">V-&gt;i:[i]</span><br><span class="line">T-&gt;F:[(, i]</span><br><span class="line">T-&gt;T/F:[(, i]</span><br><span class="line">G-&gt;A:[i]</span><br><span class="line">E-&gt;E+T:[(, i]</span><br><span class="line">A-&gt;V=E:[i]</span><br><span class="line">E-&gt;T:[(, i]</span><br><span class="line">F-&gt;(E):[(]</span><br><span class="line">================FOLLOW集如下=================</span><br><span class="line">A:# </span><br><span class="line">T:# ) * + - / </span><br><span class="line">E:# ) + - </span><br><span class="line">V:= </span><br><span class="line">F:# ) * + - / </span><br><span class="line">G:# </span><br><span class="line">================SLR(<span class="number">1</span>)分析表如下=================</span><br><span class="line">					ACTION								GOTO</span><br><span class="line">	(	)	i	*	+	=	-	/	#	|	A	T	E	V	F	G</span><br><span class="line"><span class="number">0</span>			s2							|	<span class="number">1</span>			<span class="number">3</span>			</span><br><span class="line"><span class="number">1</span>									acc	|							</span><br><span class="line"><span class="number">2</span>						r10				|							</span><br><span class="line"><span class="number">3</span>						s4				|							</span><br><span class="line"><span class="number">4</span>	s7		s8							|		<span class="number">9</span>	<span class="number">5</span>		<span class="number">6</span>		</span><br><span class="line"><span class="number">5</span>					s10		s11		r1	|							</span><br><span class="line"><span class="number">6</span>		r7		r7	r7		r7	r7	r7	|							</span><br><span class="line"><span class="number">7</span>	s7		s8							|		<span class="number">9</span>	<span class="number">12</span>		<span class="number">6</span>		</span><br><span class="line"><span class="number">8</span>		r9		r9	r9		r9	r9	r9	|							</span><br><span class="line"><span class="number">9</span>		r4		s13	r4		r4	s14	r4	|							</span><br><span class="line"><span class="number">10</span>	s7		s8							|		<span class="number">15</span>			<span class="number">6</span>		</span><br><span class="line"><span class="number">11</span>	s7		s8							|		<span class="number">16</span>			<span class="number">6</span>		</span><br><span class="line"><span class="number">12</span>		s17			s10		s11			|							</span><br><span class="line"><span class="number">13</span>	s7		s8							|					<span class="number">18</span>		</span><br><span class="line"><span class="number">14</span>	s7		s8							|					<span class="number">19</span>		</span><br><span class="line"><span class="number">15</span>		r2		s13	r2		r2	s14	r2	|							</span><br><span class="line"><span class="number">16</span>		r3		s13	r3		r3	s14	r3	|							</span><br><span class="line"><span class="number">17</span>		r8		r8	r8		r8	r8	r8	|							</span><br><span class="line"><span class="number">18</span>		r5		r5	r5		r5	r5	r5	|							</span><br><span class="line"><span class="number">19</span>		r6		r6	r6		r6	r6	r6	|							</span><br><span class="line">================待分析的句子=================</span><br><span class="line">x=a+b*(c-d)/<span class="number">2</span></span><br><span class="line">================分析过程如下=================</span><br><span class="line">状态栈：[0]                                      符号栈：[#]                                 输入流：x=a+b*(c-d)/2#                                  产生式：</span><br><span class="line">状态栈：[0, 2]                                   符号栈：[#, x]                              输入流：=a+b*(c-d)/2#                                   产生式：</span><br><span class="line">状态栈：[0, 3]                                   符号栈：[#, V]                              输入流：=a+b*(c-d)/2#                                   产生式：V-&gt;i</span><br><span class="line">状态栈：[0, 3, 4]                                符号栈：[#, V, =]                           输入流：a+b*(c-d)/2#                                    产生式：</span><br><span class="line">状态栈：[0, 3, 4, 8]                             符号栈：[#, V, =, a]                        输入流：+b*(c-d)/2#                                     产生式：</span><br><span class="line">状态栈：[0, 3, 4, 6]                             符号栈：[#, V, =, F]                        输入流：+b*(c-d)/2#                                     产生式：F-&gt;i</span><br><span class="line">状态栈：[0, 3, 4, 9]                             符号栈：[#, V, =, T]                        输入流：+b*(c-d)/2#                                     产生式：T-&gt;F</span><br><span class="line">状态栈：[0, 3, 4, 5]                             符号栈：[#, V, =, E]                        输入流：+b*(c-d)/2#                                     产生式：E-&gt;T</span><br><span class="line">状态栈：[0, 3, 4, 5, 10]                         符号栈：[#, V, =, E, +]                     输入流：b*(c-d)/2#                                      产生式：</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 8]                      符号栈：[#, V, =, E, +, b]                  输入流：*(c-d)/2#                                       产生式：</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 6]                      符号栈：[#, V, =, E, +, F]                  输入流：*(c-d)/2#                                       产生式：F-&gt;i</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15]                     符号栈：[#, V, =, E, +, T]                  输入流：*(c-d)/2#                                       产生式：T-&gt;F</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15, 13]                 符号栈：[#, V, =, E, +, T, *]               输入流：(c-d)/2#                                        产生式：</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15, 13, 7]              符号栈：[#, V, =, E, +, T, *, (]            输入流：c-d)/2#                                         产生式：</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15, 13, 7, 8]           符号栈：[#, V, =, E, +, T, *, (, c]         输入流：-d)/2#                                          产生式：</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15, 13, 7, 6]           符号栈：[#, V, =, E, +, T, *, (, F]         输入流：-d)/2#                                          产生式：F-&gt;i</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15, 13, 7, 9]           符号栈：[#, V, =, E, +, T, *, (, T]         输入流：-d)/2#                                          产生式：T-&gt;F</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15, 13, 7, 12]          符号栈：[#, V, =, E, +, T, *, (, E]         输入流：-d)/2#                                          产生式：E-&gt;T</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15, 13, 7, 12, 11]      符号栈：[#, V, =, E, +, T, *, (, E, -]      输入流：d)/2#                                           产生式：</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15, 13, 7, 12, 11, 8]   符号栈：[#, V, =, E, +, T, *, (, E, -, d]   输入流：)/2#                                            产生式：</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15, 13, 7, 12, 11, 6]   符号栈：[#, V, =, E, +, T, *, (, E, -, F]   输入流：)/2#                                            产生式：F-&gt;i</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15, 13, 7, 12, 11, 16]  符号栈：[#, V, =, E, +, T, *, (, E, -, T]   输入流：)/2#                                            产生式：T-&gt;F</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15, 13, 7, 12]          符号栈：[#, V, =, E, +, T, *, (, E]         输入流：)/2#                                            产生式：E-&gt;E-T</span><br><span class="line">产生三地址指令：T1:=c-d</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15, 13, 7, 12, 17]      符号栈：[#, V, =, E, +, T, *, (, E, )]      输入流：/2#                                             产生式：</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15, 13, 18]             符号栈：[#, V, =, E, +, T, *, F]            输入流：/2#                                             产生式：F-&gt;(E)</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15]                     符号栈：[#, V, =, E, +, T]                  输入流：/2#                                             产生式：T-&gt;T*F</span><br><span class="line">产生三地址指令：T2:=b*T1</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15, 14]                 符号栈：[#, V, =, E, +, T, /]               输入流：2#                                              产生式：</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15, 14, 8]              符号栈：[#, V, =, E, +, T, /, 2]            输入流：#                                               产生式：</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15, 14, 19]             符号栈：[#, V, =, E, +, T, /, F]            输入流：#                                               产生式：F-&gt;i</span><br><span class="line">状态栈：[0, 3, 4, 5, 10, 15]                     符号栈：[#, V, =, E, +, T]                  输入流：#                                               产生式：T-&gt;T/F</span><br><span class="line">产生三地址指令：T3:=T2/<span class="number">2</span></span><br><span class="line">状态栈：[0, 3, 4, 5]                             符号栈：[#, V, =, E]                        输入流：#                                               产生式：E-&gt;E+T</span><br><span class="line">产生三地址指令：T4:=a+T3</span><br><span class="line">状态栈：[0, 1]                                   符号栈：[#, A]                              输入流：#                                               产生式：A-&gt;V=E</span><br><span class="line">产生三地址指令：x:=T4</span><br><span class="line">分析成功!!!</span><br><span class="line">================生成的三地址指令如下=================</span><br><span class="line">T1:=c-d</span><br><span class="line">T2:=b*T1</span><br><span class="line">T3:=T2/<span class="number">2</span></span><br><span class="line">T4:=a+T3</span><br><span class="line">x:=T4</span><br></pre></td></tr></table></figure>
<ul>
<li>案例2：测试串：a+b*(c-d)/2</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">================待分析的句子=================</span><br><span class="line">a+b*(c-d)/<span class="number">2</span></span><br><span class="line">================分析过程如下=================</span><br><span class="line">状态栈：[0]                                      符号栈：[#]                                 输入流：a+b*(c-d)/2#                                    产生式：</span><br><span class="line">状态栈：[0, 2]                                   符号栈：[#, a]                              输入流：+b*(c-d)/2#                                     产生式：</span><br><span class="line">缺少    = </span><br><span class="line">分析错误</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>语法制导的语义分析</tag>
      </tags>
  </entry>
  <entry>
    <title>八数码</title>
    <url>/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</url>
    <content><![CDATA[<h1 id="八数码游戏"><a href="#八数码游戏" class="headerlink" title="八数码游戏"></a>八数码游戏</h1><h2 id="1-八数码简介"><a href="#1-八数码简介" class="headerlink" title="1. 八数码简介"></a>1. 八数码简介</h2><p>八数码问题也称为九宫问题。在3×3的方格棋盘上，摆有八个棋子，每个棋子上标有1至8的某一数字，不同棋子上标的数字不相同。棋盘上还有一个空格，与空格相邻的棋子可以移到空格中。</p>
<p>要求解决的问题是：给出一个初始状态和一个目标状态，找出一种从初始转变成目标状态的移动棋子的步骤。</p>
<p>所谓问题的一个状态就是棋子在棋盘上的一种摆法。解八数码问题实际上就是找出从初始状态到达目标状态所经过的一系列中间过渡状态。</p>
<a id="more"></a>

<h2 id="2-八数码问题的状态空间法表示"><a href="#2-八数码问题的状态空间法表示" class="headerlink" title="2. 八数码问题的状态空间法表示"></a>2. 八数码问题的状态空间法表示</h2><h3 id="2-1-状态定义"><a href="#2-1-状态定义" class="headerlink" title="2.1. 状态定义"></a>2.1. 状态定义</h3><p>利用<strong>矩阵</strong>存储每一步的状态，空位用0表示，例如起始状态为：</p>
<p><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/clip_image002.gif" alt="img"></p>
<p>目标状态为：</p>
<p><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/clip_image004.gif" alt="img"></p>
<h3 id="2-2-方向符号定义"><a href="#2-2-方向符号定义" class="headerlink" title="2.2. 方向符号定义"></a>2.2. 方向符号定义</h3><p>搜索时按照URDL的顺序：</p>
<p><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/clip_image006.jpg" alt="img"></p>
<h3 id="2-3-从初始状态到目标状态的求解过程"><a href="#2-3-从初始状态到目标状态的求解过程" class="headerlink" title="2.3. 从初始状态到目标状态的求解过程"></a>2.3. 从初始状态到目标状态的求解过程</h3><p>例：下图为宽度优先搜索算法对应具体搜索路径：</p>
<p> <img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/image-20210211160904296.png" alt="image-20210211160904296"></p>
<h2 id="3-八数码问题的盲目搜索技术概述"><a href="#3-八数码问题的盲目搜索技术概述" class="headerlink" title="3. 八数码问题的盲目搜索技术概述"></a>3. 八数码问题的盲目搜索技术概述</h2><h3 id="3-1-dfs、bfs算法基本原理简要介绍"><a href="#3-1-dfs、bfs算法基本原理简要介绍" class="headerlink" title="3.1. dfs、bfs算法基本原理简要介绍"></a>3.1. dfs、bfs算法基本原理简要介绍</h3><h4 id="3-1-1-深度优先搜索"><a href="#3-1-1-深度优先搜索" class="headerlink" title="3.1.1 深度优先搜索"></a>3.1.1 深度优先搜索</h4><p>​    按照一条路径一直往下深度延伸子节点的算法，直到找到答案为止（由于本实验中数字组合相对较少，不考虑内存超限的情况）。在深度优先搜索的求解过程中使用<strong>Stack</strong>来存储还未搜索的节点，已经搜索过的节点使用一个链表来存储（避免重复的搜索）。如果已经在链表中那么就不在放到栈中，因为之前已经搜索过了，故不需要重复搜索。</p>
<h4 id="3-1-2-宽度优先搜索"><a href="#3-1-2-宽度优先搜索" class="headerlink" title="3.1.2 宽度优先搜索"></a>3.1.2 宽度优先搜索</h4><p>以接近起始节点的程度依次扩展节点的搜索技术（即：离起始节点近的节点先被扩展），在这个过程中使用<strong>Queue</strong>来存储其中还没有遍历的但是已经发展了的节点，同时使用链表来存储已经搜索过的子节点，然后基本上是和深度优先搜索算法类似。</p>
<p>扩展节点的原则：先扩展出来的节点之后会优先被扩展（生成其所有的后继节点）</p>
<h3 id="3-2-dfs、bfs算法流程图"><a href="#3-2-dfs、bfs算法流程图" class="headerlink" title="3.2. dfs、bfs算法流程图"></a>3.2. dfs、bfs算法流程图</h3><h4 id="3-2-1-深度优先搜索算法步骤"><a href="#3-2-1-深度优先搜索算法步骤" class="headerlink" title="3.2.1 深度优先搜索算法步骤"></a>3.2.1 深度优先搜索算法步骤</h4><p>① 把起始节点 S 放到未扩展节点的 OPEN 表（此时OPEN表是一个<strong>堆栈</strong>，后进先出）中。如果此节点为一目标节点，则得到解</p>
<p>② 如果 OPEN 为一空表，则无解、失败退出</p>
<p>③ 把第一个节点(记作节点 n )从 OPEN 表移到 CLOSED 表</p>
<p>④ 如果节点 n 的深度等于最大深度，则转向②</p>
<p>⑤ 扩展节点 n ，产生其全部后继节点，并把它们放入 OPEN 表的前头。如果没有后继节点，则转向②</p>
<p>⑥ 如果后继节点中有任一个节点为目标节点，则求得一个解（反向追踪从目标节点到起始节点的路径），成功退出；否则，转向②</p>
<h4 id="3-2-2-深度优先搜索算法的流程图"><a href="#3-2-2-深度优先搜索算法的流程图" class="headerlink" title="3.2.2 深度优先搜索算法的流程图"></a>3.2.2 深度优先搜索算法的流程图</h4><p><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/clip_image013.jpg" alt="img"></p>
<h4 id="3-2-3-宽度优先搜索算法步骤"><a href="#3-2-3-宽度优先搜索算法步骤" class="headerlink" title="3.2.3 宽度优先搜索算法步骤"></a>3.2.3 宽度优先搜索算法步骤</h4><p>① 把起始节点放到 OPEN 表中(如果该起始节点为一目标节点，则得到解)</p>
<p>② 如果 OPEN 是个空表，则无解，失败退出；否则继续下一步</p>
<p>③ 把第一个节点(记作节点 n )从 OPEN 表移出，并把它放入 CLOSED 的已扩展节点表中</p>
<p>④ 扩展节点 n 。如果没有后继节点，则转向第②步</p>
<p>⑤ 把 n 的所有后继节点放到OPEN表的末端，并提供从这些后继节点回到 n 的指针(记录每一个节点的父节点信息)</p>
<p>⑥ 如果 n 的任一后继节点是个目标节点，则找到一个解（反向追踪得到从目标节点到起始节点的路径），成功退出，否则转向第②步</p>
<h4 id="3-2-4-宽度优先搜索算法的流程图"><a href="#3-2-4-宽度优先搜索算法的流程图" class="headerlink" title="3.2.4 宽度优先搜索算法的流程图"></a>3.2.4 宽度优先搜索算法的流程图</h4><p><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/clip_image015.jpg" alt="img"></p>
<h2 id="4-八数码问题的启发式搜索技术"><a href="#4-八数码问题的启发式搜索技术" class="headerlink" title="4. 八数码问题的启发式搜索技术"></a>4. 八数码问题的启发式搜索技术</h2><h3 id="4-1-启发式搜索原理"><a href="#4-1-启发式搜索原理" class="headerlink" title="4.1. 启发式搜索原理"></a>4.1. 启发式搜索原理</h3><p>启发式搜索就是在状态空间中的搜索对每一个搜索的位置进行评估，得到最好的位置，再从这个位置进行搜索直到目标。这样可以省略大量无谓的搜索路径，提高了效率。在启发式搜索中，对位置的估价是十分重要的。采用了不同的估价可以有不同的效果。</p>
<h3 id="4-2-估价函数"><a href="#4-2-估价函数" class="headerlink" title="4.2. 估价函数"></a>4.2. 估价函数</h3><p>用f(n)来表示节点n的估价函数，公式表示为： f(n)=g(n)+h(n),其中：</p>
<p>f(n) 是从初始状态经由状态n到目标状态的代价估计，称作估价函数</p>
<p>d(n) 是在状态空间从初始状态到状态n的实际代价，称作节点深度</p>
<p>h(n) 是从状态n到目标状态的的估计代价，称作启发函数</p>
<h3 id="4-3-估价函数设计"><a href="#4-3-估价函数设计" class="headerlink" title="4.3. 估价函数设计"></a>4.3. 估价函数设计</h3><p>估价函数是由两部分构成的，节点深度d(n)其实就是当前已经走的步数，不用额外设计函数；启发函数h(n)是比较重要的一个部分，启发函数的设计直接影响了估计函数的效率，有几种定义方法：</p>
<ul>
<li><p>当前节点与目标节点差异的度量 =&gt; 当前结点与目标节点相比，位置不符的数字个数</p>
</li>
<li><p>当前节点与目标节点距离的度量 =&gt; 当前结点与目标节点格局位置不符的数字移动到目标节点中对应位置的最短距离之和</p>
</li>
<li><p>每一对逆序数字的某倍数，位置不符的数字个数的总和+逆序数的三倍</p>
</li>
</ul>
<p>这里选择的是第一种，计算当前节点与目标节点相比，有多少个数字的位置不符</p>
<h3 id="4-4-算法描述"><a href="#4-4-算法描述" class="headerlink" title="4.4. 算法描述"></a>4.4. 算法描述</h3><p>① 把起始节点S放到OPEN表中，并计算节点S的；</p>
<p>② 如果OPEN是空表，则失败退出（无解）；</p>
<p>③ 从OPEN表中选择一个f值最小的节点i。如果有几个节点值相同，当其中有一个为目标节点时，则选择目标节点；否则就选择其中任一个节点作为节点i；</p>
<p>④ 把节点 i 从 OPEN 表中移出，并把它放入 CLOSED 的已扩展节点表中</p>
<p>⑤ 如果 i 是个目标节点，则成功退出（有解）</p>
<p>⑥ 扩展节点 i ，生成其全部后继节点。对于 i 的每一个后继节点 j ：</p>
<p>⑦ 转向②</p>
<h3 id="4-5-算法流程图"><a href="#4-5-算法流程图" class="headerlink" title="4.5. 算法流程图"></a>4.5. 算法流程图</h3><p><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/clip_image017.jpg" alt="img"></p>
<h2 id="5．案例及分析"><a href="#5．案例及分析" class="headerlink" title="5．案例及分析"></a>5．案例及分析</h2><h3 id="5-1-取2-1中的例子"><a href="#5-1-取2-1中的例子" class="headerlink" title="5.1. 取2.1中的例子"></a>5.1. 取2.1中的例子</h3><p><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/image-20210211161343363.png" alt="image-20210211161343363"></p>
<div align="center">表1：八数码问题2.1的运行记录表</div>

<table>
<thead>
<tr>
<th>算法</th>
<th>步数</th>
<th>操作符</th>
<th>OPEN表  大小</th>
<th>CLOSED表  大小</th>
<th>CPU运行时间（ms）</th>
</tr>
</thead>
<tbody><tr>
<td>宽度优先搜索</td>
<td>3</td>
<td>ULD</td>
<td>5</td>
<td>5</td>
<td>2</td>
</tr>
<tr>
<td>深度优先搜索</td>
<td>3</td>
<td>ULD</td>
<td>1</td>
<td>47</td>
<td>5</td>
</tr>
<tr>
<td>启发式搜索</td>
<td>3</td>
<td>ULD</td>
<td>1</td>
<td>3</td>
<td>62</td>
</tr>
</tbody></table>
<p>程序运行结果截图（考虑输出过程的时间）：</p>
<p><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/clip_image022.jpg" alt="img"><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/clip_image024.jpg" alt="img"><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/clip_image026.jpg" alt="img"></p>
<h3 id="5-2-其他测试的例子-简单"><a href="#5-2-其他测试的例子-简单" class="headerlink" title="5.2. 其他测试的例子(简单)"></a>5.2. 其他测试的例子(简单)</h3><p><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/image-20210211161501547.png" alt="image-20210211161501547"></p>
<div align="center">表2：上述八数码问题的运行记录表</div>

<table>
<thead>
<tr>
<th>算法</th>
<th>步数</th>
<th>操作符</th>
<th>OPEN表  大小</th>
<th>CLOSED表  大小</th>
<th>CPU运行时间（ms）</th>
</tr>
</thead>
<tbody><tr>
<td>宽度优先搜索</td>
<td>5</td>
<td>UULDR</td>
<td>15</td>
<td>21</td>
<td>3</td>
</tr>
<tr>
<td>深度优先搜索</td>
<td>5</td>
<td>UULDR</td>
<td>2</td>
<td>55</td>
<td>5</td>
</tr>
<tr>
<td>启发式搜索</td>
<td>5</td>
<td>UULDR</td>
<td>1</td>
<td>5</td>
<td>67</td>
</tr>
</tbody></table>
<p>程序运行结果截图（考虑输出过程的时间）：</p>
<p><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/clip_image031.jpg" alt="img"><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/clip_image033.jpg" alt="img"><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/clip_image035.jpg" alt="img"><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/clip_image037.jpg" alt="img"></p>
<h3 id="5-3-其他测试的例子-复杂"><a href="#5-3-其他测试的例子-复杂" class="headerlink" title="5.3. 其他测试的例子(复杂)"></a>5.3. 其他测试的例子(复杂)</h3><p><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/image-20210211161554618.png" alt="image-20210211161554618"></p>
<div align="center">表3：上述八数码问题的运行记录表</div>

<table>
<thead>
<tr>
<th>算法</th>
<th>步数</th>
<th>操作符</th>
<th>OPEN表  大小</th>
<th>CLOSED表  大小</th>
<th>CPU运行时间（ms）</th>
</tr>
</thead>
<tbody><tr>
<td>宽度优先搜索</td>
<td>16</td>
<td>URDRUULLDRRDLLUR</td>
<td>4280</td>
<td>6856</td>
<td>808</td>
</tr>
<tr>
<td>深度优先搜索</td>
<td>16</td>
<td>URDRUULLDRRDLLUR</td>
<td>9</td>
<td>4597</td>
<td>211</td>
</tr>
<tr>
<td>启发式搜索</td>
<td>16</td>
<td>URDRUULLDRRDLLUR</td>
<td>1</td>
<td>567</td>
<td>57</td>
</tr>
</tbody></table>
<p>程序运行结果截图（不输出过程，故不考虑打印结果所用时间）：</p>
<p><img src="/2021/02/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/clip_image042.jpg" alt="img"></p>
<h2 id="6．体会与致谢"><a href="#6．体会与致谢" class="headerlink" title="6．体会与致谢"></a>6．体会与致谢</h2><ul>
<li><p>通过这次实验，我对八数码问题的宽、深度优先搜索有了更深入的了解，同时也习得了启发式搜索的思想。在此也十分感谢老师课程PPT的制作及课上课下的指导，下面谈谈我遇到的问题和收获。</p>
</li>
<li><p>综合不同的测试数据结果来看，程序运行时间从小到大的顺序为：启发式搜索、深度优先搜索（确保深度界限满足条件）、宽度优先搜索</p>
</li>
<li><p>宽度优先搜索方法能够保证在搜索树中找到一条通向目标节点的最短途径（所用操作符最少），只要结点间可以到达，就一定可以找到一个最优解。</p>
</li>
<li><p>深度优先搜索如果不设置深度界限将会耗时特别长，如果深度界限设置的太小则可能导致缺解现象，如果设置的很巧妙则搜索速度很快，综合看来十分不稳定，如何定义一个较好的深度界限有待进一步思考。</p>
</li>
<li><p>在经过大量随机初始化九宫格的实验后，发现启发式搜索更加实用有效，能在较复杂情况下求得更加优质的解，但是对于估价函数的定义趋向多元化，如何更好地定义一个估价函数有待深入讨论。</p>
</li>
<li><p>缺陷和不足：</p>
<ul>
<li>在进行随机初始化九宫格的多次实验时，出现宽度优先搜索和深度优先搜索耗时过长而无结果输出的问题，但启发式搜索可以很好的输出结果；</li>
<li>只做了宽度优先搜索的提供追踪解，可以输出从初始状态到目标状态的操作符顺序。</li>
<li>未讨论时间复杂性和空间复杂性。</li>
</ul>
</li>
</ul>
<h2 id="7．实验程序简单说明"><a href="#7．实验程序简单说明" class="headerlink" title="7．实验程序简单说明"></a>7．实验程序简单说明</h2><p>使用的语言是java，运行环境是IDEA，程序一共用到四个类：<em>EightPuzzle</em>、<em>EightPuzzleMove</em>、<em>EightPuzzleAlgorithm<strong>、</strong>EightPuzzleMain</em>。</p>
<p>（1）<em>EightPuzzle</em>：定义八数码的状态属性包括存放九宫格的二维数组data、深度depth，估价函数evaluation和启发函数mispositon。方法包括：isSame()判定二维数组data是否相同，进而重写方法equals（为了后面过滤掉重复状态）；print()将二维数组data转成一维输出到控制台(为了节省空间)；getBlankPositon()获取空格(0)的坐标；深拷贝depthClone()；</p>
<p>（2）<em>EightPuzzleMove</em>：控制空格的移动，包括两个方法isMovable()判定是否可以继续移动（不能出边界）、move()通过输入的方向来进行相应的移动。</p>
<p>（3）<em>EightPuzzleAlgorithm</em>：主要包括三个算法bfs()宽度优先搜索、boundedDfs()有界限深度优先搜索、A_Star()启发式搜索；除此之外还有一些定义的状态信息、队列、栈、数组等。</p>
<p>（4）<em>EightPuzzleMain</em>：程序的入口，主要包括起始状态和末状态的输入、三种搜索算法的运行以及方法isSolvable()判断是否有解。</p>
<p>java代码参考github：<a href="https://github.com/CoderZQY/EightPuzzle">EightPuzzle</a></p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>-人工智能 -深度、宽度优先搜索、启发式搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>Android</title>
    <url>/2021/02/11/Android/</url>
    <content><![CDATA[<h1 id="1-设计理念"><a href="#1-设计理念" class="headerlink" title="1. 设计理念"></a>1. 设计理念</h1><p>天气常常影响着人们的出行，为了给人们提供方便的天气信息以及未来的天气情况，我们开发了这款雷狮APP，用户可以通过我们的APP定位所在的城市，并查看本周的天气情况，此外，我们还制作了一个小游戏，帮助客户在无聊的时候休闲放松。</p>
<h1 id="2-设计模块"><a href="#2-设计模块" class="headerlink" title="2. 设计模块"></a>2. 设计模块</h1><ol>
<li>天气预报模块：实现基本的天气预报、通知和分享功能等。</li>
<li>小游戏模块：实现曾经风靡一时的2048小游戏。</li>
</ol>
<a id="more"></a>

<h1 id="3-问题描述"><a href="#3-问题描述" class="headerlink" title="3. 问题描述"></a>3. 问题描述</h1><h2 id="3-1-天气预报模块"><a href="#3-1-天气预报模块" class="headerlink" title="3.1 天气预报模块"></a>3.1 天气预报模块</h2><ul>
<li><p>如何从网络上获取数据，并解析JSON数据。</p>
</li>
<li><p>如何使用SQLite，实现数据的存取。</p>
</li>
<li><p>如何设计各个菜单按钮，并实现其功能。</p>
</li>
<li><p>如何调用地图实现定位。</p>
</li>
<li><p>如何设计后台服务，实现定时通知。</p>
</li>
<li><p>如何实现activity与fragment，fragment与fragment之间的通信。</p>
</li>
<li><p>如何设计各个UI界面，并实现数据显示，加载网络图片。</p>
</li>
</ul>
<h2 id="3-2-2048游戏模块"><a href="#3-2-2048游戏模块" class="headerlink" title="3.2 2048游戏模块"></a>3.2 2048游戏模块</h2><ul>
<li><p>游戏的规则：控制所有方块向同一个方向运动，两个相同数字方块撞在一起之后合并成为他们的和，每次操作之后会随机生成一个2或者4，最终得到一个“2048”的方块就算胜利了。</p>
</li>
<li><p>设计步骤包括：</p>
<ul>
<li>游戏布局设计</li>
<li>触控交互设计</li>
<li>游戏卡片、随机数的添加</li>
<li>逻辑实现</li>
<li>计分实现</li>
<li>结束判定</li>
</ul>
</li>
</ul>
<h1 id="4-设计简要描述"><a href="#4-设计简要描述" class="headerlink" title="4. 设计简要描述"></a>4. 设计简要描述</h1><h2 id="4-1-天气预报模块设计"><a href="#4-1-天气预报模块设计" class="headerlink" title="4.1 天气预报模块设计"></a>4.1 天气预报模块设计</h2><ol>
<li>因为网络服务延时较长，影响用户体验且Android Studio已不允许在主线程中访问网络，所以获取网络数据，必须开辟一个新的线程。由于需求的JSON数据量不大，采用最原始的JSON数据解析方法，通过JSONObject对象来解析</li>
<li>对于SQLite使用，根据实验前分析要建立一张天气表，来存放天气的状况，建立一张城市表，来存放当前的城市名。基本逻辑如下：首先获取城市表中最新的城市名，新建线程并利用这个城市名获取JSON数据，解析JSON数据并存入数据库天气表中。UI显示数据时，直接访问数据库，获取数据并显示。</li>
<li>添加菜单时，需要在activity中添加，不能在fragment中添加。</li>
<li>对于地图的定位，我们使用高德地图的API来定位，导入jar包，建立地图管理类，使用地图容器，重写各个生命周期。定位成功后，将定位到的城市名存入数据库，否则提示定位失败。</li>
<li>在使用后台服务时，首先访问网络，获取新的天气数据存入数据库。再打开数据库，通知用户。最后通过延时服务来调用这个后台服务，保证销毁这个APP后，依然可以实现后台通知。</li>
<li>fragment与activity通信，可以通过回调函数实现，fragment与fragment之间的通信可以通过广播通信实现。</li>
<li>在设计UI界面时，通过访问数据库获取并显示数据，最后建立线程实现加载网络图片。</li>
</ol>
<h2 id="4-2-2048模块设计"><a href="#4-2-2048模块设计" class="headerlink" title="4.2 2048模块设计"></a>4.2 2048模块设计</h2><ol>
<li>设计2048游戏布局</li>
<li>实现2048游戏主类GameView</li>
<li>游戏2048在Android平台的触控交互设计</li>
<li>实现2048游戏的卡片类</li>
<li>在2048游戏中添加随机数</li>
<li>实现2048游戏逻辑</li>
<li>游戏2048的计分实现</li>
<li>游戏2048结束检查</li>
</ol>
<h1 id="5-项目关键步骤设计"><a href="#5-项目关键步骤设计" class="headerlink" title="5. 项目关键步骤设计"></a>5. 项目关键步骤设计</h1><h2 id="5-1-天气预报模块"><a href="#5-1-天气预报模块" class="headerlink" title="5.1 天气预报模块"></a>5.1 天气预报模块</h2><h3 id="5-1-1-获取天气预报数据"><a href="#5-1-1-获取天气预报数据" class="headerlink" title="5.1.1 获取天气预报数据"></a>5.1.1 获取天气预报数据</h3><ul>
<li><p>使用免费的天气预报接口openweathermap</p>
</li>
<li><p>注册并获取API Key：0be83fe5c1fd854b14095b0cc994539b</p>
</li>
<li><p>相关代码如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//免费的天气预报接口：openweathermap</span></span><br><span class="line">   String url = Uri.parse(<span class="string">&quot;https://api.openweathermap.org/data/2.5/forecast?&quot;</span>)</span><br><span class="line">                 .buildUpon()</span><br><span class="line">                 .appendQueryParameter(<span class="string">&quot;q&quot;</span>, cityName)</span><br><span class="line">                 .appendQueryParameter(<span class="string">&quot;appid&quot;</span>, API_KEY)</span><br><span class="line">                 .appendQueryParameter(<span class="string">&quot;mode&quot;</span>, <span class="string">&quot;json&quot;</span>)</span><br><span class="line">                 .build().toString();</span><br><span class="line">   String jsonString = getUrlString(url);</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * getUrlBytes(String)：从指定URL获取字节流数组</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">byte</span>[] getUrlBytes(String urlSpec) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       URL url = <span class="keyword">new</span> URL(urlSpec);</span><br><span class="line">       HttpURLConnection connection = (HttpURLConnection)url.openConnection();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">           InputStream in = connection.getInputStream();</span><br><span class="line">           <span class="keyword">if</span>(connection.getResponseCode() != HttpURLConnection.HTTP_OK)&#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IOException(connection.getResponseMessage()+<span class="string">&quot;:with &quot;</span>+urlSpec);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">int</span> bytesRead = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">           <span class="keyword">while</span> ((bytesRead = in.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               out.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">           &#125;</span><br><span class="line">           out.close();</span><br><span class="line">           <span class="keyword">return</span> out.toByteArray();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           connection.disconnect();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * getUrlString(String)：将字节流数据转化为String</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getUrlString</span><span class="params">(String urlSpec)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> String(getUrlBytes(urlSpec));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-1-2-启动一个新的线程，通过JSONobject对象来解析。"><a href="#5-1-2-启动一个新的线程，通过JSONobject对象来解析。" class="headerlink" title="5.1.2 启动一个新的线程，通过JSONobject对象来解析。"></a>5.1.2 启动一个新的线程，通过JSONobject对象来解析。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;<span class="comment">//创建线程，从网上获取JSON数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jsonObject = <span class="keyword">new</span> JSONObject(jsonString);<span class="comment">//获取json对象</span></span><br><span class="line">            <span class="comment">//数据定义</span></span><br><span class="line">            String cityName;<span class="comment">//城市</span></span><br><span class="line">            <span class="keyword">double</span> temp_max;<span class="comment">//最高温度</span></span><br><span class="line">            <span class="keyword">double</span> temp_min;<span class="comment">//最高温度</span></span><br><span class="line">            <span class="keyword">double</span> pressure;<span class="comment">//气压</span></span><br><span class="line">            <span class="keyword">double</span> humidity;<span class="comment">//湿度</span></span><br><span class="line">            String weatMain;<span class="comment">//天气状况</span></span><br><span class="line">            String weatIcon;<span class="comment">//图标</span></span><br><span class="line">            String date;<span class="comment">//日期</span></span><br><span class="line">            String oldDate = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//解析JSON数据及对数据库的操作</span></span><br><span class="line">            JSONObject city = jsonObject.getJSONObject(<span class="string">&quot;city&quot;</span>);</span><br><span class="line">            cityName = city.getString(<span class="string">&quot;name&quot;</span>);<span class="comment">//城市</span></span><br><span class="line">            Log.i(TAG, <span class="string">&quot;cityName:&quot;</span> + cityName);</span><br><span class="line">            JSONArray list = jsonObject.getJSONArray(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.length(); i++) &#123;</span><br><span class="line">                JSONObject listMain = list.getJSONObject(i);</span><br><span class="line">                JSONObject main = listMain.getJSONObject(<span class="string">&quot;main&quot;</span>);</span><br><span class="line">                temp_max = main.getDouble(<span class="string">&quot;temp_max&quot;</span>);<span class="comment">//最高温度</span></span><br><span class="line">                temp_min = main.getDouble(<span class="string">&quot;temp_min&quot;</span>);<span class="comment">//最低温度</span></span><br><span class="line">                pressure = main.getDouble(<span class="string">&quot;pressure&quot;</span>);</span><br><span class="line">                humidity = main.getDouble(<span class="string">&quot;humidity&quot;</span>);<span class="comment">//湿度</span></span><br><span class="line">                JSONArray weather = listMain.getJSONArray(<span class="string">&quot;weather&quot;</span>);</span><br><span class="line">                JSONObject weatherMain = weather.getJSONObject(<span class="number">0</span>);</span><br><span class="line">                weatMain = weatherMain.getString(<span class="string">&quot;main&quot;</span>);<span class="comment">//天气状况</span></span><br><span class="line">                weatIcon = weatherMain.getString(<span class="string">&quot;icon&quot;</span>);<span class="comment">//图标</span></span><br><span class="line">                JSONObject wind = listMain.getJSONObject(<span class="string">&quot;wind&quot;</span>);</span><br><span class="line">                Double speed = wind.getDouble(<span class="string">&quot;speed&quot;</span>);<span class="comment">//风速</span></span><br><span class="line">                date = listMain.getString(<span class="string">&quot;dt_txt&quot;</span>).substring(<span class="number">0</span>, <span class="number">10</span>);<span class="comment">//时间</span></span><br><span class="line">                <span class="keyword">if</span> (!date.equals(oldDate)) &#123;<span class="comment">//只保存第一次数据</span></span><br><span class="line">                    Log.i(TAG, <span class="string">&quot;date:&quot;</span> + date);</span><br><span class="line">                    values.put(<span class="string">&quot;date&quot;</span>, date);</span><br><span class="line">                    values.put(<span class="string">&quot;weather&quot;</span>, weatMain);</span><br><span class="line">                    values.put(<span class="string">&quot;picture&quot;</span>, weatIcon);</span><br><span class="line">                    values.put(<span class="string">&quot;maxC&quot;</span>, temp_max);</span><br><span class="line">                    values.put(<span class="string">&quot;minC&quot;</span>, temp_min);</span><br><span class="line">                    values.put(<span class="string">&quot;humidity&quot;</span>, humidity);</span><br><span class="line">                    values.put(<span class="string">&quot;pressure&quot;</span>, pressure);</span><br><span class="line">                    values.put(<span class="string">&quot;wind&quot;</span>, speed);</span><br><span class="line">                    db.insert(<span class="string">&quot;weather&quot;</span>, <span class="keyword">null</span>, values);</span><br><span class="line">                    oldDate = date;<span class="comment">//保存时间</span></span><br><span class="line">                    values.clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>
<h3 id="5-1-3-SQLite的使用"><a href="#5-1-3-SQLite的使用" class="headerlink" title="5.1.3 SQLite的使用"></a>5.1.3 SQLite的使用</h3><ul>
<li><p>建立一张天气表，来存放天气的状况</p>
</li>
<li><p>建立一张城市表，来存放当前的城市名</p>
</li>
<li><p>基本逻辑如下：首先获取城市表中最新的城市名，新建线程并利用这个城市名获取JSON数据，解析JSON数据并存入数据库天气表中。UI显示数据时，直接访问数据库，获取数据并显示。</p>
</li>
<li><p>创建表语句如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存储城市的数据库格式:</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_CITY= <span class="string">&quot;create table city (cityName text)&quot;</span>;</span><br><span class="line"><span class="comment">//存储未来天气状况的数据库格式:</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_WEATHER = <span class="string">&quot;create table weather(&quot;</span></span><br><span class="line">        +<span class="string">&quot;date text,&quot;</span></span><br><span class="line">        +<span class="string">&quot;weather text,&quot;</span></span><br><span class="line">        +<span class="string">&quot;picture text,&quot;</span></span><br><span class="line">        +<span class="string">&quot;maxC real,&quot;</span></span><br><span class="line">        +<span class="string">&quot;minC real,&quot;</span></span><br><span class="line">        +<span class="string">&quot;humidity real,&quot;</span></span><br><span class="line">        +<span class="string">&quot;pressure real,&quot;</span></span><br><span class="line">        +<span class="string">&quot;wind real)&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> Context mContext;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> DatabaseHelper <span class="title">getInstance</span><span class="params">(Context context, String name, SQLiteDatabase.CursorFactory factory, <span class="keyword">int</span> version)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mInstance = <span class="keyword">new</span> DatabaseHelper(context, name, factory, version);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mInstance;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="5-1-4-通过创建线程加载网络图片"><a href="#5-1-4-通过创建线程加载网络图片" class="headerlink" title="5.1.4 通过创建线程加载网络图片"></a>5.1.4 通过创建线程加载网络图片</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能:根据网址获取图片对应的Bitmap对象</span></span><br><span class="line"><span class="comment"> * @param path</span></span><br><span class="line"><span class="comment"> * @return Bitmap</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getPicture</span><span class="params">(String picture)</span></span>&#123;</span><br><span class="line">    Bitmap bm = <span class="keyword">null</span>;</span><br><span class="line">    URLConnection conn= <span class="keyword">null</span>;</span><br><span class="line">    URL url;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//url = new URL(&quot;https://openweathermap.org/themes/openweathermap/assets/vendor/owm/img/&quot;+picture+&quot;.png&quot;);//创建URL对象，目前不可用</span></span><br><span class="line">        <span class="comment">//url = new URL(&quot;http://openweathermap.org/img/w/&quot;+picture+&quot;.png&quot;);//创建URL对象，目前不可用</span></span><br><span class="line">        url = <span class="keyword">new</span> URL(<span class="string">&quot;https://openweathermap.org/img/wn/&quot;</span>+picture+<span class="string">&quot;@2x.png&quot;</span>);</span><br><span class="line">        conn = url.openConnection();<span class="comment">//获取URL对象对应的连接</span></span><br><span class="line">        conn.connect();<span class="comment">//打开连接</span></span><br><span class="line">        InputStream is=conn.getInputStream();<span class="comment">//获取输入流对象</span></span><br><span class="line">        bm= BitmapFactory.decodeStream(is);<span class="comment">//根据输入流对象创建Bitmap对象</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (MalformedURLException e1) &#123;</span><br><span class="line">        e1.printStackTrace();<span class="comment">//输出异常信息</span></span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();<span class="comment">//输出异常信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-1-5-后台服务的使用"><a href="#5-1-5-后台服务的使用" class="headerlink" title="5.1.5 后台服务的使用"></a>5.1.5 后台服务的使用</h3><p>首先访问网络，获取新的天气数据存入数据库。再打开数据库，通知用户。最后通过延时服务来调用这个后台服务，保证销毁这个APP后，依然可以实现后台通知。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String NoticeDate = notice.getDate();</span><br><span class="line">String NoticeWeather = notice.getWeatMain();</span><br><span class="line">String message = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(notice.getWeatMain().equals(<span class="string">&quot;Clear&quot;</span>))&#123;</span><br><span class="line">    message = <span class="string">&quot;天气晴朗，出行游玩注意安全哦~&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(notice.getWeatMain().equals(<span class="string">&quot;Rain&quot;</span>))&#123;</span><br><span class="line">    message = <span class="string">&quot;今天有雨，记得出门带伞哦~&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(notice.getWeatMain().equals(<span class="string">&quot;Clouds&quot;</span>))&#123;</span><br><span class="line">    message = <span class="string">&quot;今天多云，适宜在家养生~&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通知信息：</span></span><br><span class="line">NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">Intent intent1 = <span class="keyword">new</span> Intent(PollService.<span class="keyword">this</span>,MainActivity.class);</span><br><span class="line"><span class="comment">//PendingIntent是对Intent的封装，满足某些条件或触发某些事件后才执行</span></span><br><span class="line">PendingIntent pendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span> ,intent1,PendingIntent.FLAG_CANCEL_CURRENT);</span><br><span class="line">Notification notification = <span class="keyword">new</span> NotificationCompat.Builder(PollService.<span class="keyword">this</span>,<span class="string">&quot;default&quot;</span>)</span><br><span class="line">        .setContentTitle(NoticeDate+<span class="string">&quot; &quot;</span>+NoticeWeather)</span><br><span class="line">        .setContentText(message)</span><br><span class="line">        .setSmallIcon(R.drawable.sfasf)</span><br><span class="line">        .setContentIntent(pendingIntent)<span class="comment">//点击跳转到主页面</span></span><br><span class="line">        .setAutoCancel(<span class="keyword">true</span>)<span class="comment">//点击后消失</span></span><br><span class="line">        .build();</span><br><span class="line">notificationManager.notify(<span class="number">1</span>,notification);</span><br></pre></td></tr></table></figure>
<h3 id="5-1-6-列表与详细界面的拼接"><a href="#5-1-6-列表与详细界面的拼接" class="headerlink" title="5.1.6 列表与详细界面的拼接"></a>5.1.6 列表与详细界面的拼接</h3><p>使用fragment容器完成一个屏幕内显示两个activity布局</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    android:orientation=<span class="string">&quot;vertical&quot;</span> android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span>&gt;</span><br><span class="line">    &lt;fragment</span><br><span class="line">        android:id=<span class="string">&quot;@+id/fragment_phone_detail&quot;</span></span><br><span class="line">        android:name=<span class="string">&quot;com.example.weather.PhoneDetailActivity&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span>&gt;</span><br><span class="line">    &lt;/fragment&gt;</span><br><span class="line">    &lt;fragment</span><br><span class="line">        android:id=<span class="string">&quot;@+id/fragment_phone_list&quot;</span></span><br><span class="line">        android:name=<span class="string">&quot;com.example.weather.PhoneListActivity&quot;</span></span><br><span class="line">        android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span>&gt;</span><br><span class="line">    &lt;/fragment&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<h3 id="5-1-7-效果图展示"><a href="#5-1-7-效果图展示" class="headerlink" title="5.1.7 效果图展示"></a>5.1.7 效果图展示</h3><p><img src="/2021/02/11/Android/image-20210211175650863.png" alt="image-20210211175650863"></p>
<h3 id="5-1-8-高德地图定位"><a href="#5-1-8-高德地图定位" class="headerlink" title="5.1.8 高德地图定位"></a>5.1.8 高德地图定位</h3><p>对于地图的定位，我使用高德地图的API来定位，导入jar包，建立地图管理类，使用地图容器，重写各个生命周期。定位成功后，将定位到的城市名存入数据库，否则提示定位失败。</p>
<ul>
<li>获取API Key -&gt; cbcdc26a87de7ce1eee52e255b5bf341</li>
</ul>
<p><img src="/2021/02/11/Android/image-20210211175519549.png" alt="image-20210211175519549"></p>
<ul>
<li>参照高德地图的示例程序和开发手册，实现定位程序</li>
</ul>
<p><img src="/2021/02/11/Android/image-20210211175556801.png" alt="image-20210211175556801"></p>
<h2 id="5-2-2048游戏模块"><a href="#5-2-2048游戏模块" class="headerlink" title="5.2 2048游戏模块"></a>5.2 2048游戏模块</h2><h3 id="5-2-1-触控交互设计"><a href="#5-2-1-触控交互设计" class="headerlink" title="5.2.1 触控交互设计"></a>5.2.1 触控交互设计</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setOnTouchListener(<span class="keyword">new</span> OnTouchListener() &#123; <span class="comment">// 设置交互方式</span></span><br><span class="line">                                    <span class="comment">// 监听上下左右滑动的这几个动作，再由这几个动作去执行特定的代码，去实现游戏的逻辑</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">float</span> startX, startY, offsetX, offsetY;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">      <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">         startX = event.getX();</span><br><span class="line">         startY = event.getY();</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">         offsetX = event.getX() - startX;</span><br><span class="line">         offsetY = event.getY() - startY;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (Math.abs(offsetX) &gt; Math.abs(offsetY)) &#123; <span class="comment">// 加此判断是为了解决当用户向斜方向滑动时程序应如何判断的问题</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (offsetX &lt; -<span class="number">5</span>) &#123;</span><br><span class="line">               swipeLeft();</span><br><span class="line">               <span class="comment">// System.out.println(&quot;left&quot;);</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offsetX &gt; <span class="number">5</span>) &#123;</span><br><span class="line">               swipeRight();</span><br><span class="line">               <span class="comment">// System.out.println(&quot;right&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123; <span class="comment">// 判断向上向下</span></span><br><span class="line">            <span class="keyword">if</span> (offsetY &lt; -<span class="number">5</span>) &#123;</span><br><span class="line">               swipeUp();</span><br><span class="line">               <span class="comment">// System.out.println(&quot;up&quot;);</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offsetY &gt; <span class="number">5</span>) &#123;</span><br><span class="line">               swipeDown();</span><br><span class="line">               <span class="comment">// System.out.println(&quot;down&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 此处必须返回true,如返回false，则只会监听到MotionEvent.ACTION_DOWN这个事件，返回此事件没有成功，所以后面的事件也不会发生</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="5-2-2-主要逻辑设计（以左滑为例）"><a href="#5-2-2-主要逻辑设计（以左滑为例）" class="headerlink" title="5.2.2 主要逻辑设计（以左滑为例）"></a>5.2.2 主要逻辑设计（以左滑为例）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现游戏逻辑 只要有位置的改变就添加新的</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swipeLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">boolean</span> merge = <span class="keyword">false</span>; <span class="comment">// 判断是否有合并，如果有的话就进行一些处理</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; <span class="number">4</span>; y++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">4</span>; x++) &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> x1 = x + <span class="number">1</span>; x1 &lt; <span class="number">4</span>; x1++) &#123; <span class="comment">// 从当前的位置往右边去遍历</span></span><br><span class="line">            <span class="keyword">if</span> (cardsMap[x1][y].getNum() &gt; <span class="number">0</span>) &#123; <span class="comment">// 如果往右去遍历得到的card的值（获取到的值）不是空的，则做如下逻辑判断</span></span><br><span class="line">               <span class="keyword">if</span> (cardsMap[x][y].getNum() &lt;= <span class="number">0</span>) &#123; <span class="comment">// 如果当前位置上的值是空的，则将获取到的值移动到当前位置上</span></span><br><span class="line">                  cardsMap[x][y].setNum(cardsMap[x1][y].getNum());</span><br><span class="line">                  cardsMap[x1][y].setNum(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                  x--; <span class="comment">// 这里非常重要！！！！ 可以测试理解</span></span><br><span class="line">                  merge = <span class="keyword">true</span>;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cardsMap[x][y].equals(cardsMap[x1][y])) &#123; <span class="comment">// 如果当前位置上的值不是空的，而且获取到的值与当前位置上的值相等，则做相加处理，并将结果放在当前位置上</span></span><br><span class="line">                  cardsMap[x][y].setNum(cardsMap[x][y].getNum() * <span class="number">2</span>);</span><br><span class="line">                  cardsMap[x1][y].setNum(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                  <span class="comment">// 合并时加分 有合并就有添加（分数）</span></span><br><span class="line">                  MainActivity.getMainActivity().addScore(</span><br><span class="line">                        cardsMap[x][y].getNum());</span><br><span class="line">                  merge = <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">break</span>; <span class="comment">// 这个break的位置非常重要！！！！！ 只能写在这里！！ eg:方格最下面一行是2 32</span></span><br><span class="line">                     <span class="comment">// 64 2，然后往左滑动的情况！</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (merge) &#123; <span class="comment">// 在添加数字时判断游戏是否结束</span></span><br><span class="line">      addRandomNum();</span><br><span class="line">      checkComplete(); <span class="comment">// 添加新项后都要检查游戏是否结束：没空位置，而且已经不能再合并</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-3-界面UI设计"><a href="#5-2-3-界面UI设计" class="headerlink" title="5.2.3 界面UI设计"></a>5.2.3 界面UI设计</h3><p><img src="/2021/02/11/Android/image-20210211175803349.png" alt="image-20210211175803349"></p>
<h2 id="6-1-天气预报模块设计与调试中遇到的问题及解决方案"><a href="#6-1-天气预报模块设计与调试中遇到的问题及解决方案" class="headerlink" title="6.1 天气预报模块设计与调试中遇到的问题及解决方案"></a>6.1 天气预报模块设计与调试中遇到的问题及解决方案</h2><p><strong>问题1</strong>：地图不能显示，每当调用时，APP就会崩溃。</p>
<p>解决方案：因为地图是我最后添加的功能，在Android的Logcat中显示太多，信息太多，我就新建一个工程，单独实验地图显示，后来错误指向的布局文件。我是用的高德地图的API，也都是按照开发手册上的说明来操作的，意思也没发现错误。经过查阅别人是如何使用高德地图的，发现了问题：高德地图的jar包有不同的类型，常规使用布局关键字是*.api.maps.MapView，但我下载的是2D地图，必须使用*.api.maps2d.MapView才能正常加载地图容器。</p>
<p><strong>问题2</strong>：在每次获取到新的数据，或者要刷新已经出现的UI时，不能显示最新的数据。</p>
<p>解决方案：每次更新数据，与网络延时有很大关系，时间过长APP会依然显示上一次的天气数据，而且获取实时数据后也不可以实时刷新，必须通过重新启动这个activity才能实现UI刷新，通过网上查阅资料可以使用下拉刷新的控件，来刷新UI界面。</p>
<p><strong>问题3</strong>：每次访问网络时，都会获取很多数据，如何处理这些数据，使得每次都能访问最新天气信息。</p>
<p>解决方案：如果每次都要将获得的数据存入数据库，会使得软件的缓存越来越大，所以如果成功从天气网站上获取到天气信息，在写入数据库前，先清空数据库，这样就可以保证每次UI刷新时，取得的数据都是最新的。</p>
<h2 id="6-2-2048游戏模块设计过程中遇到的问题及感受"><a href="#6-2-2048游戏模块设计过程中遇到的问题及感受" class="headerlink" title="6.2 2048游戏模块设计过程中遇到的问题及感受"></a>6.2 2048游戏模块设计过程中遇到的问题及感受</h2><p><strong>问题1</strong>：无法显示gameView、Card，但是移动时得分在增加。</p>
<p>出错原因：我的onSizeChange这个方法用于动态调整卡片的大小，是在构造函数执行之后才会执行的，而这个时候布局已经完成了，所以没有办法将卡片加入到布局当中去。</p>
<p>解决办法如下：</p>
<p>(1)不能在initGame()中调用startGame()，应该在onSizeChanged()时调用，当应用程序界面发送改变时，会自动调用该函数，也就是在构造函数之后去调用该函数。</p>
<p>(2)在onSizeChanged()中原本的addCards()的函数要去掉，因为已经在构造函数中分配了Cards</p>
<p><strong>问题2</strong>：关于游戏逻辑方面的设计。</p>
<p>感想：很多看上去很容易实现的东西实际上并不好做，在逻辑处理时经常会出现意想不到的bug，这个时候可以通过debug的方式找出问题发生原因，此外观察logcat的输出也是比较快捷的方式。</p>
<p><code>完整代码可加QQ：1277565476</code></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android 2048</tag>
        <tag>Android 天气预报</tag>
      </tags>
  </entry>
  <entry>
    <title>Android_Calculator</title>
    <url>/2021/03/17/Android-Calculator/</url>
    <content><![CDATA[<h1 id="Java课程设计——基于Android的计算器实现"><a href="#Java课程设计——基于Android的计算器实现" class="headerlink" title="Java课程设计——基于Android的计算器实现"></a>Java课程设计——基于Android的计算器实现</h1><h2 id="1、基本要求"><a href="#1、基本要求" class="headerlink" title="1、基本要求"></a>1、基本要求</h2><p>​    功能：完成一个基本的计算器程序。界面可以是GUI方式，也<strong>可以是字符形式的命令行方式</strong>。能实现：加、减、乘、除、<strong>乘方（使用符号^）及</strong>括号的运算。运行对象是<strong>整数</strong>（能<strong>实现GUI界面的且带小数点的实</strong>数运算可以<strong>晋升为良好级别</strong>。）</p>
<a id="more"></a>

<h2 id="2、系统需求分析"><a href="#2、系统需求分析" class="headerlink" title="2、系统需求分析"></a>2、系统需求分析</h2><p>​    Android是以Linux为核心的手机操作平台，作为一款开放式的操作系统，随着Android的快速发展，如今已允许开发者使用多种编程语言来开发Android应用程序了，而不再是以前只能用Java开发Android应用程序的单一局面，因而受到众多开发者的欢迎，成为真正意义上的开放式操作系统。</p>
<p>​    计算器通过算法实行简单的数学计算从而提高了数学计算的效率，实现计算器的界面优化，使界面更加友好，操作更加方便。基于Android的计算器的设计，系统既有良好的界面、必要的交互信息，从而达到简约美观的效果。使用人员能快捷简单地进行操作，即可单击按钮进行操作，即时准确地获得需要的计算结果，充分降低了数学计算的难度，从而节约了时间。</p>
<h2 id="3、总体设计"><a href="#3、总体设计" class="headerlink" title="3、总体设计"></a>3、总体设计</h2><h3 id="3-1-程序功能概要设计"><a href="#3-1-程序功能概要设计" class="headerlink" title="3.1 程序功能概要设计"></a>3.1 程序功能概要设计</h3><p>根据需求，符合用户的实际要求，系统应实现以下功能：友好的界面、方便使用；具有基本的加、减、乘、除以及乘方功能，支持小括号更改优先级，能够判断用户输入运算数是否正确，支持小数运算和清除功能</p>
<p><img src="/2021/03/17/Android-Calculator/clip_image002.jpg" alt="img"></p>
<h3 id="3-2-程序系统结构"><a href="#3-2-程序系统结构" class="headerlink" title="3.2 程序系统结构"></a>3.2 程序系统结构</h3><p>​    程序基于Android技术开发，除总体模块外，主要分为输入模块、显示模块以及运算模块三大部分。在整个系统中总体模块控制系统的生命周期，输入模块部分负责读取用户输入的数据，显示模块部分负责显示用户之前输入的数据以及最终的计算结果，计算模块部分负责进行数据的运算以及一些其他的功能，具体地说，总体模块的作用主要是生成应用程序的主类，控制应用程序的周期。</p>
<ul>
<li><p>输入模块主要描述了计算器键盘以及键盘的监听即主要负责读取用户的键盘输入以及响应触屏的按键，需要监听手机动作。同时提供较为直观的键盘图形用户界面。</p>
</li>
<li><p>显示模块描述了计算器的显示区，即该区域用于显示用户输入的数据以及最终的计算结果，同时负责显示一些其他的信息。</p>
</li>
<li><p>计算模块则主要描述了计算器的整体，实现了计算器的界面，负责计算用户输入数据，包括加、减、乘、除、乘方等各种功能，记忆数据的相关功能、优先级判定的功能和清零的功能。</p>
</li>
</ul>
<p><img src="/2021/03/17/Android-Calculator/clip_image002-1615951609699.jpg" alt="img"></p>
<h3 id="3-3-算法设计"><a href="#3-3-算法设计" class="headerlink" title="3.3 算法设计"></a>3.3 算法设计</h3><ol>
<li><p>输入包含+、-、×、÷、圆括号和实数组成的中缀算术表达式，以 ‘@’ 作为表达式的结束符，计算表达式的运算结果返回。</p>
</li>
<li><p>中缀表达式求值算法</p>
<p>首先必须设置两个栈：一个栈存放操作符，记作OPTR；另一个栈存放操作数，记作OPND。</p>
<p>初始时，操作数栈为空，操作符栈中有一个元素 ‘@’ 。在进行表达式求值时，从左到右扫描，依次读入表达式中的每个字符，直至表达式结束。</p>
<ul>
<li><p>若读到的是操作数，则一律进入操作数栈，并读入下一个字符（若要处理实数，需创建一个方法进行处理，将读取到的实数入栈）。</p>
</li>
<li><p>若读到的是操作符c，则应用操作符栈的栈顶元素pre_op与之进行比较，会出现以下3种情况：</p>
<p>① 若pre_op &lt; c，则将c入栈，读入下一个字符。</p>
<p>② 若pre_op = c，则将pre_op出栈，并读入下一个字符。</p>
<p>③ 若pre_op &gt; c，则将pre_op出栈，并在操作数栈中退栈2次，依次得到操作数b、a（注意操作数次序）。然后进行a pre_op b运算，并将运算的结果压入操作数栈中。</p>
</li>
</ul>
</li>
<li><p>扫描完毕时，操作数栈中只有一个元素，即为运算的结果。</p>
</li>
<li><p>若输入表达式违法，则返回 “Error！” 结果。</p>
</li>
</ol>
<h2 id="4、代码实现"><a href="#4、代码实现" class="headerlink" title="4、代码实现"></a>4、代码实现</h2><h3 id="4-1-Calculator类"><a href="#4-1-Calculator类" class="headerlink" title="4.1 Calculator类"></a>4.1 Calculator类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.calculator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Description：计算器类，对表达式求值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算表达式的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 表达式结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">calculate</span><span class="params">(String expression)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(expression);</span></span><br><span class="line">        <span class="comment">// 新建两个栈，一个存储数据，一个存储操作符</span></span><br><span class="line">        Stack&lt;Float&gt; numStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Character&gt; operStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        operStack.push(<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        expression += <span class="string">&quot;@&quot;</span>;  <span class="comment">//表达式以@作为结束标志</span></span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] expToChar = expression.toCharArray();</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(!operStack.isEmpty())&#123;</span><br><span class="line">            ch = expToChar[index];</span><br><span class="line">            <span class="keyword">if</span>(isDigit(ch))&#123;</span><br><span class="line">                readNum(numStack,expToChar);  <span class="comment">//读取一个实数入栈</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">char</span> pre_op = operStack.peek();</span><br><span class="line">                <span class="keyword">switch</span> (precede(pre_op, ch)) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">                        operStack.push(ch);</span><br><span class="line">                        index++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">                        operStack.pop();</span><br><span class="line">                        index++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">                        <span class="keyword">float</span> a = numStack.pop();</span><br><span class="line">                        <span class="keyword">float</span> b = numStack.pop();</span><br><span class="line">                        pre_op = operStack.pop();</span><br><span class="line">                        numStack.push(operate(a, pre_op, b));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否是数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ch    要判断的字符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDigit</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从表达式中读取实数并入操作数栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> numStack</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expToChar</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readNum</span><span class="params">(Stack&lt;Float&gt; numStack, <span class="keyword">char</span>[] expToChar)</span> </span>&#123;</span><br><span class="line">        numStack.push((<span class="keyword">float</span>) expToChar[index] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">while</span> (isDigit(expToChar[index])) &#123;</span><br><span class="line">            numStack.push(numStack.pop() * <span class="number">10</span> + (<span class="keyword">float</span>) expToChar[index] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;.&#x27;</span> == (expToChar[index])) &#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">float</span> cost = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (isDigit(expToChar[index])) &#123;</span><br><span class="line">                numStack.push(numStack.pop() + (<span class="keyword">float</span>) (expToChar[index] - <span class="string">&#x27;0&#x27;</span>) * (cost /= <span class="number">10</span>));</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> f1     操作数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pre_op 运算符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> f2     操作数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>      运算结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">operate</span><span class="params">(<span class="keyword">float</span> f1, <span class="keyword">char</span> pre_op, <span class="keyword">float</span> f2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(pre_op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> f1+f2;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> f2-f1;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;×&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> f2*f1;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;÷&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> f2/f1;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;^&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">float</span>) Math.pow(f2, f1);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取运算符优先级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pre_op 栈顶的操作符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ch 新的操作符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 运算符优先级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">precede</span><span class="params">(<span class="keyword">char</span> pre_op, <span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[][] pri = <span class="keyword">new</span> <span class="keyword">char</span>[][]&#123;</span><br><span class="line">                &#123; <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27; &#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27; &#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;=&#x27;</span> &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> pri[transfer(pre_op)][transfer(ch)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将运算符转换为对应的优先级数组的下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c 运算符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  对应优先级数组的下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">transfer</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;×&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;÷&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;^&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;@&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;数字输入错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-activity-main-xml布局"><a href="#4-2-activity-main-xml布局" class="headerlink" title="4.2 activity_main.xml布局"></a>4.2 activity_main.xml布局</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">&quot;#000000&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;EditText</span><br><span class="line">        android:layout_marginTop=&quot;10dp&quot;</span><br><span class="line">        android:id=&quot;@+id/et_input&quot;</span><br><span class="line">        android:layout_width=&quot;350dp&quot;</span><br><span class="line">        android:layout_height=&quot;60dp&quot;</span><br><span class="line">        android:background=&quot;@drawable/white&quot;</span><br><span class="line">        android:textSize=&quot;40sp&quot;</span><br><span class="line">        android:layout_gravity=&quot;center_horizontal&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginTop=&quot;10dp&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot;</span><br><span class="line">        android:gravity=&quot;center_horizontal&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn_clr&quot;</span><br><span class="line">            android:layout_width=&quot;80dp&quot;</span><br><span class="line">            android:layout_height=&quot;80dp&quot;</span><br><span class="line">            android:text=&quot;C&quot;</span><br><span class="line">            android:textSize=&quot;30sp&quot;</span><br><span class="line">            android:paddingRight=&quot;15sp&quot;</span><br><span class="line">            android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">            android:background=&quot;@drawable/blue&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn_div&quot;</span><br><span class="line">            android:layout_width=&quot;80dp&quot;</span><br><span class="line">            android:layout_height=&quot;80dp&quot;</span><br><span class="line">            android:text=&quot;÷&quot;</span><br><span class="line">            android:textSize=&quot;30sp&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:paddingRight=&quot;15sp&quot;</span><br><span class="line">            android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">            android:background=&quot;@drawable/blue&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn_mul&quot;</span><br><span class="line">            android:layout_width=&quot;80dp&quot;</span><br><span class="line">            android:layout_height=&quot;80dp&quot;</span><br><span class="line">            android:text=&quot;×&quot;</span><br><span class="line">            android:textSize=&quot;30sp&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:paddingRight=&quot;15sp&quot;</span><br><span class="line">            android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">            android:background=&quot;@drawable/blue&quot;/&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn_del&quot;</span><br><span class="line">            android:layout_width=&quot;80dp&quot;</span><br><span class="line">            android:layout_height=&quot;80dp&quot;</span><br><span class="line">            android:text=&quot;⬅&quot;</span><br><span class="line">            android:textSize=&quot;30sp&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:paddingRight=&quot;15sp&quot;</span><br><span class="line">            android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">            android:background=&quot;@drawable/blue&quot;/&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginTop=&quot;10dp&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot;</span><br><span class="line">        android:gravity=&quot;center_horizontal&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn_pow&quot;</span><br><span class="line">            android:layout_width=&quot;80dp&quot;</span><br><span class="line">            android:layout_height=&quot;80dp&quot;</span><br><span class="line">            android:text=&quot;^&quot;</span><br><span class="line">            android:textSize=&quot;30sp&quot;</span><br><span class="line">            android:paddingRight=&quot;15sp&quot;</span><br><span class="line">            android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">            android:background=&quot;@drawable/blue&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn_lb&quot;</span><br><span class="line">            android:layout_width=&quot;80dp&quot;</span><br><span class="line">            android:layout_height=&quot;80dp&quot;</span><br><span class="line">            android:background=&quot;@drawable/blue&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:paddingRight=&quot;15sp&quot;</span><br><span class="line">            android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">            android:text=&quot;(&quot;</span><br><span class="line">            android:textSize=&quot;30sp&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:layout_width=&quot;80dp&quot;</span><br><span class="line">            android:layout_height=&quot;80dp&quot;</span><br><span class="line">            android:id=&quot;@+id/btn_rb&quot;</span><br><span class="line">            android:text=&quot;)&quot;</span><br><span class="line">            android:textSize=&quot;30sp&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:paddingRight=&quot;15sp&quot;</span><br><span class="line">            android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">            android:background=&quot;@drawable/blue&quot;/&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn_sub&quot;</span><br><span class="line">            android:layout_width=&quot;80dp&quot;</span><br><span class="line">            android:layout_height=&quot;80dp&quot;</span><br><span class="line">            android:text=&quot;-&quot;</span><br><span class="line">            android:textSize=&quot;30sp&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:paddingRight=&quot;15sp&quot;</span><br><span class="line">            android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">            android:background=&quot;@drawable/blue&quot; /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_marginTop=&quot;10dp&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot;</span><br><span class="line">        android:gravity=&quot;center_horizontal&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn_7&quot;</span><br><span class="line">            android:layout_width=&quot;80dp&quot;</span><br><span class="line">            android:layout_height=&quot;80dp&quot;</span><br><span class="line">            android:text=&quot;7&quot;</span><br><span class="line">            android:textSize=&quot;30sp&quot;</span><br><span class="line">            android:paddingRight=&quot;15sp&quot;</span><br><span class="line">            android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">            android:background=&quot;@drawable/selector&quot;/&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn_8&quot;</span><br><span class="line">            android:layout_width=&quot;80dp&quot;</span><br><span class="line">            android:layout_height=&quot;80dp&quot;</span><br><span class="line">            android:text=&quot;8&quot;</span><br><span class="line">            android:textSize=&quot;30sp&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:paddingRight=&quot;15sp&quot;</span><br><span class="line">            android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">            android:background=&quot;@drawable/selector&quot;/&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn_9&quot;</span><br><span class="line">            android:layout_width=&quot;80dp&quot;</span><br><span class="line">            android:layout_height=&quot;80dp&quot;</span><br><span class="line">            android:text=&quot;9&quot;</span><br><span class="line">            android:textSize=&quot;30sp&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:paddingRight=&quot;15sp&quot;</span><br><span class="line">            android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">            android:background=&quot;@drawable/selector&quot;/&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn_add&quot;</span><br><span class="line">            android:layout_width=&quot;80dp&quot;</span><br><span class="line">            android:layout_height=&quot;80dp&quot;</span><br><span class="line">            android:text=&quot;+&quot;</span><br><span class="line">            android:textSize=&quot;30sp&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:paddingRight=&quot;15sp&quot;</span><br><span class="line">            android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">            android:background=&quot;@drawable/blue&quot;/&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;fill_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot;</span><br><span class="line">        android:layout_marginTop=&quot;10dp&quot;</span><br><span class="line">        android:gravity=&quot;center_horizontal&quot;&gt;</span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:orientation=&quot;vertical&quot;&gt;</span><br><span class="line">            &lt;LinearLayout</span><br><span class="line">                android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">                android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                android:orientation=&quot;horizontal&quot;&gt;</span><br><span class="line">                &lt;Button</span><br><span class="line">                    android:id=&quot;@+id/btn_4&quot;</span><br><span class="line">                    android:layout_width=&quot;80dp&quot;</span><br><span class="line">                    android:layout_height=&quot;80dp&quot;</span><br><span class="line">                    android:text=&quot;4&quot;</span><br><span class="line">                    android:textSize=&quot;30sp&quot;</span><br><span class="line">                    android:paddingRight=&quot;15sp&quot;</span><br><span class="line">                    android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">                    android:background=&quot;@drawable/selector&quot;/&gt;</span><br><span class="line">                &lt;Button</span><br><span class="line">                    android:id=&quot;@+id/btn_5&quot;</span><br><span class="line">                    android:layout_width=&quot;80dp&quot;</span><br><span class="line">                    android:layout_height=&quot;80dp&quot;</span><br><span class="line">                    android:text=&quot;5&quot;</span><br><span class="line">                    android:textSize=&quot;30sp&quot;</span><br><span class="line">                    android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">                    android:paddingRight=&quot;15sp&quot;</span><br><span class="line">                    android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">                    android:background=&quot;@drawable/selector&quot;/&gt;</span><br><span class="line">                &lt;Button</span><br><span class="line">                    android:id=&quot;@+id/btn_6&quot;</span><br><span class="line">                    android:layout_width=&quot;80dp&quot;</span><br><span class="line">                    android:layout_height=&quot;80dp&quot;</span><br><span class="line">                    android:text=&quot;6&quot;</span><br><span class="line">                    android:textSize=&quot;30sp&quot;</span><br><span class="line">                    android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">                    android:paddingRight=&quot;15sp&quot;</span><br><span class="line">                    android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">                    android:background=&quot;@drawable/selector&quot;/&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">            &lt;LinearLayout</span><br><span class="line">                android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">                android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                android:orientation=&quot;horizontal&quot;</span><br><span class="line">                android:layout_marginTop=&quot;10dp&quot;&gt;</span><br><span class="line">                &lt;Button</span><br><span class="line">                    android:layout_width=&quot;80dp&quot;</span><br><span class="line">                    android:layout_height=&quot;80dp&quot;</span><br><span class="line">                    android:id=&quot;@+id/btn_1&quot;</span><br><span class="line">                    android:text=&quot;1&quot;</span><br><span class="line">                    android:textSize=&quot;30sp&quot;</span><br><span class="line">                    android:paddingRight=&quot;15sp&quot;</span><br><span class="line">                    android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">                    android:background=&quot;@drawable/selector&quot; /&gt;</span><br><span class="line">                &lt;Button</span><br><span class="line">                    android:layout_width=&quot;80dp&quot;</span><br><span class="line">                    android:layout_height=&quot;80dp&quot;</span><br><span class="line">                    android:id=&quot;@+id/btn_2&quot;</span><br><span class="line">                    android:text=&quot;2&quot;</span><br><span class="line">                    android:textSize=&quot;30sp&quot;</span><br><span class="line">                    android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">                    android:paddingRight=&quot;15sp&quot;</span><br><span class="line">                    android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">                    android:background=&quot;@drawable/selector&quot; /&gt;</span><br><span class="line">                &lt;Button</span><br><span class="line">                    android:layout_width=&quot;80dp&quot;</span><br><span class="line">                    android:layout_height=&quot;80dp&quot;</span><br><span class="line">                    android:id=&quot;@+id/btn_3&quot;</span><br><span class="line">                    android:text=&quot;3&quot;</span><br><span class="line">                    android:textSize=&quot;30sp&quot;</span><br><span class="line">                    android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">                    android:paddingRight=&quot;15sp&quot;</span><br><span class="line">                    android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">                    android:background=&quot;@drawable/selector&quot; /&gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            &lt;LinearLayout</span><br><span class="line">                android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">                android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                android:orientation=&quot;horizontal&quot;</span><br><span class="line">                android:layout_marginTop=&quot;10dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;Button</span><br><span class="line">                    android:id=&quot;@+id/btn_0&quot;</span><br><span class="line">                    android:layout_width=&quot;170dp&quot;</span><br><span class="line">                    android:layout_height=&quot;80dp&quot;</span><br><span class="line">                    android:background=&quot;@drawable/selector&quot;</span><br><span class="line">                    android:paddingRight=&quot;15sp&quot;</span><br><span class="line">                    android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">                    android:text=&quot;0&quot;</span><br><span class="line">                    android:textSize=&quot;30sp&quot; /&gt;</span><br><span class="line"></span><br><span class="line">                &lt;Button</span><br><span class="line">                    android:layout_width=&quot;80dp&quot;</span><br><span class="line">                    android:layout_height=&quot;80dp&quot;</span><br><span class="line">                    android:id=&quot;@+id/btn_pt&quot;</span><br><span class="line">                    android:text=&quot;.&quot;</span><br><span class="line">                    android:textSize=&quot;30sp&quot;</span><br><span class="line">                    android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">                    android:paddingRight=&quot;15sp&quot;</span><br><span class="line">                    android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">                    android:background=&quot;@drawable/selector&quot;/&gt;</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn_eq&quot;</span><br><span class="line">            android:layout_width=&quot;80dp&quot;</span><br><span class="line">            android:layout_height=&quot;260dp&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;10dp&quot;</span><br><span class="line">            android:background=&quot;@drawable/button_bg&quot;</span><br><span class="line">            android:paddingRight=&quot;15sp&quot;</span><br><span class="line">            android:paddingBottom=&quot;15sp&quot;</span><br><span class="line">            android:text=&quot;=&quot;</span><br><span class="line">            android:textSize=&quot;30sp&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-MainActivity类"><a href="#4-3-MainActivity类" class="headerlink" title="4.3 MainActivity类"></a>4.3 MainActivity类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.calculator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建Button对象(也就是activity_main.xml里所设置的ID)</span></span><br><span class="line">    Button btn_0,btn_1,btn_2,btn_3,btn_4,btn_5,btn_6,btn_7,btn_8,btn_9,btn_pt;</span><br><span class="line">    Button btn_mul,btn_div,btn_add,btn_sub,btn_pow,btn_lb,btn_rb;</span><br><span class="line">    Button btn_clr,btn_del,btn_eq;</span><br><span class="line">    EditText et_input;</span><br><span class="line">    <span class="keyword">boolean</span> clr_flag;    <span class="comment">//判断et编辑文本框中是否清空</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">//实例化对象</span></span><br><span class="line">        setContentView(R.layout.activity_main);<span class="comment">//客观存在，还没有在UI上显示</span></span><br><span class="line">        btn_0= (Button) findViewById(R.id.btn_0);</span><br><span class="line">        btn_1= (Button) findViewById(R.id.btn_1);</span><br><span class="line">        btn_2= (Button) findViewById(R.id.btn_2);</span><br><span class="line">        btn_3= (Button) findViewById(R.id.btn_3);</span><br><span class="line">        btn_4= (Button) findViewById(R.id.btn_4);</span><br><span class="line">        btn_5= (Button) findViewById(R.id.btn_5);</span><br><span class="line">        btn_6= (Button) findViewById(R.id.btn_6);</span><br><span class="line">        btn_7= (Button) findViewById(R.id.btn_7);</span><br><span class="line">        btn_8= (Button) findViewById(R.id.btn_8);</span><br><span class="line">        btn_9= (Button) findViewById(R.id.btn_9);</span><br><span class="line">        btn_pt= (Button) findViewById(R.id.btn_pt);</span><br><span class="line">        btn_add= (Button) findViewById(R.id.btn_add);</span><br><span class="line">        btn_sub= (Button) findViewById(R.id.btn_sub);</span><br><span class="line">        btn_mul= (Button) findViewById(R.id.btn_mul);</span><br><span class="line">        btn_div= (Button) findViewById(R.id.btn_div);</span><br><span class="line">        btn_clr= (Button) findViewById(R.id.btn_clr);</span><br><span class="line">        btn_del= (Button) findViewById(R.id.btn_del);</span><br><span class="line">        btn_eq= (Button) findViewById(R.id.btn_eq);</span><br><span class="line">        btn_pow=(Button) findViewById(R.id.btn_pow);</span><br><span class="line">        btn_lb=(Button) findViewById(R.id.btn_lb);</span><br><span class="line">        btn_rb=(Button) findViewById(R.id.btn_rb);</span><br><span class="line">        et_input= (EditText) findViewById(R.id.et_input);</span><br><span class="line">        <span class="comment">//给按钮设置的点击事件</span></span><br><span class="line">        btn_0.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_1.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_2.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_3.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_4.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_5.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_6.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_7.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_8.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_9.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_pt.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_add.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_sub.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_mul.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_div.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_clr.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_del.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_eq.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_pow.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_lb.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btn_rb.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        String str = et_input.getText().toString();</span><br><span class="line">        <span class="keyword">switch</span> (v.getId())&#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_0:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_1:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_2:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_3:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_4:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_5:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_6:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_7:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_8:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_9:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_pt:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_add:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_sub:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_mul:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_div:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_pow:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_lb:</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_rb:</span><br><span class="line">                <span class="keyword">if</span>(clr_flag)&#123;</span><br><span class="line">                    clr_flag=<span class="keyword">false</span>;</span><br><span class="line">                    str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">                    et_input.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                et_input.setText(str + ((Button)v).getText());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_clr:</span><br><span class="line">                <span class="keyword">if</span>(clr_flag)&#123;</span><br><span class="line">                    clr_flag=<span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                et_input.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_del:</span><br><span class="line">                <span class="keyword">if</span>(clr_flag)&#123;</span><br><span class="line">                    clr_flag = <span class="keyword">false</span>;</span><br><span class="line">                    et_input.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!str.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                    et_input.setText(str.substring(<span class="number">0</span>,str.length()-<span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_eq: <span class="comment">//运算得出最后结果</span></span><br><span class="line">                System.out.println(str);</span><br><span class="line">                <span class="keyword">if</span>(!str.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                    String rs = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        rs = String.valueOf(Calculator.calculate(str));</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        rs = <span class="string">&quot;ERROR!&quot;</span>;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                        et_input.setText(rs);</span><br><span class="line">                        clr_flag = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5、实现效果"><a href="#5、实现效果" class="headerlink" title="5、实现效果"></a>5、实现效果</h2><p><img src="/2021/03/17/Android-Calculator/image-20210317120555060.png" alt="image-20210317120555060"></p>
<p><img src="/2021/03/17/Android-Calculator/image-20210317120614431.png" alt="image-20210317120614431"></p>
<p><img src="/2021/03/17/Android-Calculator/image-20210317120629719.png" alt="image-20210317120629719"></p>
<p><code>更多请联系QQ:1277565476</code></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android 计算器</tag>
      </tags>
  </entry>
  <entry>
    <title>javaweb前端学习</title>
    <url>/2021/02/15/javaweb/</url>
    <content><![CDATA[<p>JavaWeb中关于前端HTML、CSS、JavaScript的学习笔记，参考<a href="https://www.bilibili.com/video/BV1Y7411K7zz?p=62&spm_id_from=pageDriver">尚硅谷教学视频</a></p>
<a id="more"></a>

<h1 id="HTML笔记"><a href="#HTML笔记" class="headerlink" title="HTML笔记"></a>HTML笔记</h1><h2 id="1、a标签"><a href="#1、a标签" class="headerlink" title="1、a标签"></a>1、a标签</h2><p>​       a标签代表超链接，href属性设置链接的地址，target属性设置哪个目标进行跳转（”self“ 表示当前界面（默认值），blank表示打开新页面来进行跳转）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:8080&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>百度_self<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:8080&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>百度_blank<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2、无序列表ul、有序列表ol"><a href="#2、无序列表ul、有序列表ol" class="headerlink" title="2、无序列表ul、有序列表ol"></a>2、无序列表ul、有序列表ol</h2><ul>
<li>type属性可以修改列表项前面的符号</li>
<li>li是列表项</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;none&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>黎明<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>郭富城<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3、img标签"><a href="#3、img标签" class="headerlink" title="3、img标签"></a>3、img标签</h2><ul>
<li>src可以设置路径，路径分为’相对路径’和’绝对路径’<ul>
<li>相对路径：<ul>
<li>”.“ ：表示当前目录       </li>
<li>”..“ ：表示父目录</li>
<li>”文件名“：表示当前文件所在目录的文件，相当于./文件名（./可以省略）</li>
</ul>
</li>
<li>绝对路径：<ul>
<li>正确格式是：<a href="http://IP:Port/工程名/资源路径">http://IP:Port/工程名/资源路径</a>   </li>
</ul>
</li>
</ul>
</li>
<li>标签属性有：<ul>
<li>width：宽度</li>
<li>height：高度</li>
<li>border：边框大小</li>
<li>alt：路径找不到图片时，用来代替文本内容</li>
</ul>
</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;../img/夜.jpg&quot;</span> <span class="attribute">width</span>=<span class="string">&quot;500&quot;</span> <span class="attribute">height</span>=<span class="string">&quot;300&quot;</span> <span class="attribute">border</span>=<span class="string">&quot;1&quot;</span> <span class="attribute">alt</span>=<span class="string">&quot;图片找不到&quot;</span></span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;../img/山河.jpg&quot;</span> <span class="attribute">width</span>=<span class="string">&quot;500&quot;</span> <span class="attribute">height</span>=<span class="string">&quot;300&quot;</span> <span class="attribute">border</span>=<span class="string">&quot;1&quot;</span> <span class="attribute">alt</span>=<span class="string">&quot;图片找不到&quot;</span></span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;../img/004.jpg&quot;</span> <span class="attribute">width</span>=<span class="string">&quot;500&quot;</span> <span class="attribute">height</span>=<span class="string">&quot;300&quot;</span> <span class="attribute">border</span>=<span class="string">&quot;1&quot;</span> <span class="attribute">alt</span>=<span class="string">&quot;图片找不到&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="4、table表格标签"><a href="#4、table表格标签" class="headerlink" title="4、table表格标签"></a>4、table表格标签</h2><ul>
<li>table标签属性有：border设置边框，width、height、cellspacing设置单元格间距<ul>
<li>tr 是行标签</li>
<li>th 是表头标签</li>
<li>td 是单元格标签</li>
<li>align设置单元格文本对齐方式</li>
<li>b标签是加粗标签</li>
<li>colspan 属性设置跨列<br>rowspan 属性设置跨行</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5、iframe标签"><a href="#5、iframe标签" class="headerlink" title="5、iframe标签"></a>5、iframe标签</h2><ul>
<li>作用：可以在页面上开辟一个小区域显示一个单独的页面</li>
<li>iframe和a标签组合使用的步骤：<ul>
<li>在iframe标签中使用name属性定义一个名称</li>
<li>在a标签的target属性上设置iframe的name的属性值</li>
</ul>
</li>
</ul>
<h2 id="6、表单form标签"><a href="#6、表单form标签" class="headerlink" title="6、表单form标签"></a>6、表单form标签</h2><ul>
<li>重要的属性如下：<ul>
<li>input type=text 是文本输入框 value设置默认值</li>
<li>input type=password 是密码输入框 value同上</li>
<li>input type=radio 是单选框 name属性可以对其进行分组</li>
<li>input type=checkbox 是复选框</li>
<li>select标签是下拉列表框<ul>
<li>option是下拉列表框中的选项，selected=‘selected‘设置默认选中</li>
</ul>
</li>
<li>textarea 表示多行文本输入框<ul>
<li>rows 属性设置显示可以显示几行的高度</li>
<li>cols 属性设置每行可以显示几个字符宽度</li>
</ul>
</li>
<li>起始标签和结束标签之间是默认值</li>
<li>input type=”reset” 是重置按钮，value属性修改文本</li>
<li>input type=”submit” 是提交按钮 value同上</li>
<li>input type=”file” 文件上传</li>
<li>input type=”hidden” 是隐藏域 当我们要发送某些信息（不需要用户参与），就可以隐藏，提交的时候发送给服务器</li>
<li>action属性设置提交的服务器地址</li>
<li>method属性设置提交的方式GET或POST<ul>
<li>GET请求的特点：<ol>
<li>浏览器地址栏中的地址是：action属性[?+请求参数]，请求参数的格式是：name=value&amp;name=value&amp;name=value…</li>
<li>不安全</li>
<li>它有数据长度限制</li>
</ol>
</li>
<li>POST请求的特点：<ol>
<li>浏览器地址栏只有action属性值</li>
<li>相对于GET请求更安全</li>
<li>理论上没有数据长度限制</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li>表单提交的时候，数据没有发送给服务器的三种情况<ol>
<li>表单项没有name属性值</li>
<li>单选、复选（下拉列表中的option标签），都需要添加value属性，以便发送给服务器</li>
<li>表单项不在提交的form标签中</li>
</ol>
</li>
<li>测试代码</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名称：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;默认值&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>确认密码：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span>女</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span>男</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>兴趣爱好：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span>JAVA</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span>Python</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>/&gt;</span>C++</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>国籍：<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>--请选择国籍--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>--中国--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>--美国--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>--德国--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>自我评价：<span class="tag">&lt;/<span class="name">td</span>&gt;&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span> &gt;</span>我是默认值<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行效果展示：</p>
<p><img src="/2021/02/15/javaweb/image-20210215212541984.png" alt="image-20210215212541984"></p>
<h2 id="7、其他标签"><a href="#7、其他标签" class="headerlink" title="7、其他标签"></a>7、其他标签</h2><ul>
<li>div标签   默认独占一行</li>
<li>span标签 长度是封装数据的长度</li>
<li>p段落标签   默认会在段落的上方或下方各空出一行来</li>
</ul>
<h1 id="CSS笔记"><a href="#CSS笔记" class="headerlink" title="CSS笔记"></a>CSS笔记</h1><h2 id="1、CSS语法规则"><a href="#1、CSS语法规则" class="headerlink" title="1、CSS语法规则"></a>1、CSS语法规则</h2><ol>
<li>选择器：浏览器根据“选择器”决定受CSS样式影响的HTML元素（标签）</li>
<li>属性：属性和值用冒号隔开，并用花括号包围，eg.p{color:blue}</li>
<li>多个声明：如果定义不止一个声明，则需要通过分号’;’分开。虽然最后一条声明的最后可以不加分号，但尽量都加上</li>
</ol>
<h2 id="2、CSS注释：和Java相同"><a href="#2、CSS注释：和Java相同" class="headerlink" title="2、CSS注释：和Java相同"></a>2、CSS注释：和Java相同</h2><h2 id="3、CSS和HTML结合"><a href="#3、CSS和HTML结合" class="headerlink" title="3、CSS和HTML结合"></a>3、CSS和HTML结合</h2><ul>
<li><p>第一种：在标签的style属性上设置“key：value value；”，修改标签样式</p>
</li>
<li><p>第二种：在head标签中，使用style标签来定义各种自己所需要的CSS样式</p>
<ul>
<li>注意：只能在同一个页面内复用代码，维护起来不方便，成千上万的页面如果都要到每一个进行修改，工作量巨大</li>
</ul>
</li>
<li><p>第三种：把CSS样式写成一个单独的CSS文件，再通过link标签引入即可复用</p>
<ul>
<li>使用html的<link rel="stylesheet" type="text/css" href="./style.css">标签，导入CSS样式文件</li>
</ul>
</li>
</ul>
<h2 id="4、标签名选择器"><a href="#4、标签名选择器" class="headerlink" title="4、标签名选择器"></a>4、标签名选择器</h2><ul>
<li>格式：标签名{ 属性：值; }</li>
<li>标签名选择器可以决定哪些标签被动地使用这个样式</li>
</ul>
<h2 id="5、id选择器"><a href="#5、id选择器" class="headerlink" title="5、id选择器"></a>5、id选择器</h2><ul>
<li><p>id 选择器的格式是：# id 属性值{ 属性：值; }</p>
</li>
<li><p>id选择器，可以让我们通过id属性选择性的去使用这个样式</p>
</li>
</ul>
<h2 id="6、class选择器（类选择器）"><a href="#6、class选择器（类选择器）" class="headerlink" title="6、class选择器（类选择器）"></a>6、class选择器（类选择器）</h2><ul>
<li>格式：.class 属性值{ 属性：值 }</li>
<li> class选择器选择器，可以让我们通过class属性选择性的去使用这个样式</li>
</ul>
<h2 id="7、组合选择器"><a href="#7、组合选择器" class="headerlink" title="7、组合选择器"></a>7、组合选择器</h2><ul>
<li>格式：选择器1，选择器2…选择器n{ 属性：值; }</li>
<li>组合选择器，可以让多个选择器共用同一个CSS代码。</li>
</ul>
<h2 id="8、常用样式"><a href="#8、常用样式" class="headerlink" title="8、常用样式"></a>8、常用样式</h2><ol>
<li>字体样式：颜色（color）、字体大小（font-size）、</li>
<li>边框border：1px solid red</li>
<li>宽width、高height</li>
<li>背景颜色 background-color</li>
<li>div居中 margin-left: auto;  margin-right: auto;</li>
<li>文本居中：text-align: center</li>
<li>超链接去下划线：text-decoration</li>
<li>表格细线：</li>
</ol>
<h1 id="JavaScript笔记"><a href="#JavaScript笔记" class="headerlink" title="JavaScript笔记"></a>JavaScript笔记</h1><h2 id="1、诞生背景"><a href="#1、诞生背景" class="headerlink" title="1、诞生背景"></a>1、诞生背景</h2><ul>
<li>诞生主要是为了完成页面的数据验证，因此它运行在客户端，需要浏览器来解析执行JavaScript代码。JS是Netscape网景公司的产品最早取名为LiveScript，为了吸引更多java程序员，更名为JavaScript</li>
</ul>
<h2 id="2、JS是弱类型语言，Java是强类型"><a href="#2、JS是弱类型语言，Java是强类型" class="headerlink" title="2、JS是弱类型语言，Java是强类型"></a>2、JS是弱类型语言，Java是强类型</h2><ul>
<li>区别：弱类型就是类型可变（var来定义）；强类型就是定义变量的时候，类型已确定，不可变。</li>
</ul>
<h2 id="3、JS语言特点"><a href="#3、JS语言特点" class="headerlink" title="3、JS语言特点"></a>3、JS语言特点</h2><ul>
<li>交互性（它可以做的就是信息的动态交互）</li>
<li>安全性（不允许直接访问本地硬盘）</li>
<li>跨平台性（只要是可以解释JS的浏览器都可以执行，和平台无关）</li>
</ul>
<h2 id="4、JS和html代码结合方式"><a href="#4、JS和html代码结合方式" class="headerlink" title="4、JS和html代码结合方式"></a>4、JS和html代码结合方式</h2><ul>
<li>只需要在head标签中，或者在body标签中，使用<strong>script标签</strong>来书写JS代码</li>
<li>使用script标签引入单独的JavaScript代码文件<br>使用src属性来引入js文件路径（可以是相对路径，也可以是绝对路径）</li>
<li>注意：script标签可以用来定义JS代码，也可以用来引入，但是两个功能”二选一”！！</li>
</ul>
<h2 id="5、JS中的变量"><a href="#5、JS中的变量" class="headerlink" title="5、JS中的变量"></a>5、JS中的变量</h2><ol>
<li><p>什么是变量？可以存放某些值的内存的命名</p>
</li>
<li><p>JS的变量类型：</p>
<ul>
<li><p>数值类型：short int long float double</p>
</li>
<li><p> 字符串类型：string</p>
</li>
<li><p>对象类型：object</p>
</li>
<li><p>布尔类型：boolean</p>
</li>
<li><p>函数类型：function</p>
</li>
<li><p>typeof是JS语言提供的一个函数，可以返回变量的数据类型</p>
</li>
</ul>
</li>
<li><p>JS里特殊的值：</p>
<ul>
<li><p> undefined：未定义，所以js变量未赋予初始值时，默认都是undefined</p>
</li>
<li><p>null：空值</p>
</li>
<li><p>NAN：全称是Not a Number。非数字或非数值</p>
</li>
</ul>
</li>
<li><p>JS的定义变量格式：</p>
<ul>
<li>var 变量名;</li>
<li>var 变量名 = 值;</li>
</ul>
</li>
</ol>
<h2 id="6、变量的运算"><a href="#6、变量的运算" class="headerlink" title="6、变量的运算"></a>6、变量的运算</h2><ol>
<li>关系（比较）运算：等于（==）：简单的数字面值比较、全等于（===）：除比较数值以外，还会比较两个数值的类型、其余和Java一样<ul>
<li>eg. var a = 12;    var b = “12”; <ul>
<li>alert(a == b);    // 输出true    </li>
<li>eg2. alert(a === b)    // 输出false</li>
</ul>
</li>
</ul>
</li>
<li>逻辑运算：和java一样：&amp;&amp;、||、!<ul>
<li><code>注意：在JS语言中，所有的变量都可以作为一个boolean类型的变量去使用。0、null、undefined、&quot;&quot;都认为是False</code></li>
<li>&amp;&amp;且运算：当表达式全为真的时候，返回最后一个表达式的值；当表达式中有一个为假时，返回第一个为假的表达式的值</li>
<li>||或运算：当表达式全为假的时候，返回最后一个表达式的值；只要有一个表达式为真，返回第一个为真的表达式的值</li>
</ul>
</li>
</ol>
<h2 id="7、数组（重点）"><a href="#7、数组（重点）" class="headerlink" title="7、数组（重点）"></a>7、数组（重点）</h2><ul>
<li>JS中数组的定义方式：<ul>
<li>var 数组名 = []; //空数组</li>
<li>var 数组名 = [1,’abc’,true];   //定义数组同时赋值元</li>
<li><code>注意：JS语言中的数组，只要通过数组下标赋值，那么最大的下标值，就会自动的给数组做扩容操作</code></li>
</ul>
</li>
</ul>
<h2 id="8、函数（重点）"><a href="#8、函数（重点）" class="headerlink" title="8、函数（重点）"></a>8、函数（重点）</h2><ol>
<li><p>函数的两种定义方式</p>
<ul>
<li><p>可以使用function关键字来定义函数</p>
</li>
<li><p>使用格式：var 函数名 = function( 形参列表 ){ 函数体 }</p>
</li>
</ul>
</li>
<li><p><code>注意：在Java中函数允许重载，但是在JS中函数的重载会直接覆盖掉上一次的定义</code></p>
</li>
<li><p>函数的<strong>arguments隐形参数</strong>（只在function函数内）：就是在function函数中不需要定义，但却可以直接用来获取所有参数的变量，叫做隐形参数</p>
<ul>
<li>eg. 编写一个函数，计算传入参数中所有数字相加的和，并返回</li>
</ul>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	s = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (<span class="keyword">typeof</span>(<span class="built_in">arguments</span>[i]) == <span class="string">&quot;number&quot;</span>)&#123;</span><br><span class="line">        	s += <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//alert是JS语言提供的一个警告框函数，可以接收任意类型的参数，这个参数就是警告框的提示信息</span></span><br><span class="line">alert(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&quot;abc&quot;</span>))	<span class="comment">// sum函数可传入任意数量的参数</span></span><br></pre></td></tr></table></figure>


<h2 id="9、JS中的自定义对象（扩展内容）"><a href="#9、JS中的自定义对象（扩展内容）" class="headerlink" title="9、JS中的自定义对象（扩展内容）"></a>9、JS中的自定义对象（扩展内容）</h2><ol>
<li>Object形式的自定义对象：<ul>
<li>对象的定义：<ul>
<li>var 变量名 = new Object();    //对象实例（空对象）</li>
<li>变量名.属性名 = 值    //定义一个属性</li>
<li>变量名.函数名 = function(){} //定义一个函数</li>
</ul>
</li>
<li>对象的访问：<ul>
<li>变量名.属性 / 函数名();</li>
</ul>
</li>
</ul>
</li>
<li>{}花括号形式的自定义对象：<ul>
<li>对象的定义：var 变量名 = { 属性: 值, 属性: 值, 函数名: function() {}   //定义函数 };   //对象实例</li>
<li>对象的访问：变量名.属性 / 函数名();</li>
</ul>
</li>
</ol>
<h2 id="10、JS中的事件（重点）"><a href="#10、JS中的事件（重点）" class="headerlink" title="10、JS中的事件（重点）"></a>10、JS中的事件（重点）</h2><ol>
<li><p>什么是事件？事件是电脑输入设备与页面进行交互的响应。我们称之为事件</p>
</li>
<li><p>常用的事件：</p>
<ul>
<li>onload()加载完成事件：常用于做页面JS代码初始化操作</li>
<li>onclick()单击事件：常用于按钮的点击响应操作</li>
<li>onblur()失去焦点事件：常用于输入框失去焦点后验证其输入内容是否合法</li>
<li>onchaneg()内容发生改变事件：常用于下拉列表和输入框内容发生改变后的操作</li>
<li>onsubmit()：表单提交事件：常用于表单提交前，验证所有表单项是否合法</li>
</ul>
</li>
<li><p>事件的注册（<strong>静态</strong>、<strong>动态</strong>）</p>
<ul>
<li><p>什么是事件的注册？其实就是告诉浏览器当事件响应后要执行哪些操作代码，叫事件注册或绑定</p>
<ul>
<li>静态注册事件：通过html标签的事件属性直接赋予事件响应后的代码，浏览器解析完页面会自动触发</li>
<li>动态注册事件：指先通过JS代码得到标签的dom对象，然后通过dom对象.事件名 = function(){}这种形式赋予事件响应后的代码，叫动态注册</li>
<li>基本步骤：<br>① 获取标签对象<br>② 标签对象.事件名 = function(){}</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>eg1.onload事件静态、动态注册</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onloadfun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	alert(<span class="string">&quot;静态注册onload事件，所有代码&quot;</span>)</span><br><span class="line">&#125;<span class="comment">//在标签中引入，如&lt;body onload=&quot;onloadfun()&quot;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//onload事件动态注册，是固定写法</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;动态注册onload事件，所有代码&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>eg2.onclick事件静态、动态注册</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onclickfun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	alert(<span class="string">&quot;静态注册onclick事件&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//1、获取标签对象</span></span><br><span class="line">        <span class="comment">//2、通过标签对象.事件名 = function()&#123;&#125;</span></span><br><span class="line">        <span class="keyword">var</span> btnObj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn2&quot;</span>)<span class="comment">//document是JS语言提供的一个对象（整个页面所有内容）</span></span><br><span class="line">        btnObj.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;动态注册onclick事件&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>eg3.onsubmit事件静态、动态注册</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onsubmitFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">//静态注册提交事务</span></span><br><span class="line">	alert(<span class="string">&quot;静态注册表单提交事件——发现不合法&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> formObj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;form2&quot;</span>);</span><br><span class="line">		formObj.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		alert(<span class="string">&quot;动态注册表单提交事件——发现不合法&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="keyword">return</span> <span class="literal">false</span>可以阻止表单提交--&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;http://localhost:8080&quot;</span> method=<span class="string">&quot;get&quot;</span> onsubmit=<span class="string">&quot;return onsubmitFun()&quot;</span>&gt;</span><br><span class="line">	&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;静态注册&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;http://localhost:8080&quot;</span> id=<span class="string">&quot;form2&quot;</span>&gt;</span><br><span class="line">	&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;动态注册&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<h2 id="11、DOM模型（Document-Object-Model）"><a href="#11、DOM模型（Document-Object-Model）" class="headerlink" title="11、DOM模型（Document Object Model）"></a>11、DOM模型（Document Object Model）</h2></li>
</ul>
<ol>
<li><p>DOM模型功能：把html文档中的标签、属性、文本，转换为对象来管理</p>
</li>
<li><p>Document对象的理解：Document管理了所有的HTML文档内容Document它是一种树结构的文档，有层级关系，它让我们把所有的标签都对象化，我们可以通过document访问所有的标签对象</p>
</li>
<li><p>Document对象中的方法介绍（重点）</p>
<ul>
<li><p><strong>document.getElementById(elementId)</strong> 返回对拥有指定id的第一个对象的引用</p>
</li>
<li><p><strong>document.getElementsByName(elementName)</strong></p>
</li>
<li><p><strong>document.getElementsByTagName(tagName)</strong></p>
</li>
<li><p><strong>document.createElement(tagName)</strong></p>
</li>
<li><p><code>注意：document对象的三个查询方法，如果有id属性，优先使用getElementById()方法查询，如果没有id属性则优先使用getElementByName()方法进行查询，最后考虑getElementByTagName()</code></p>
</li>
<li><p>eg. 当用户点击校验按钮时，要获取输入框中的内容，然后验证其是否合法，验证的规则是：必须由字母、数字、下划线组成，并且长度5~12位</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onclickFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> usernameObj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">	<span class="keyword">var</span> usernametext = usernameObj.value;</span><br><span class="line">	<span class="comment">//如何验证字符串，符合某个规则，需要使用正则表达式</span></span><br><span class="line">	<span class="keyword">var</span> pattern = <span class="regexp">/^\w&#123;5,12&#125;$/</span>;	<span class="comment">//正则表达式，有需求再去翻文档</span></span><br><span class="line">	<span class="keyword">var</span> usernameSpanObj = <span class="built_in">document</span>.getElementById(<span class="string">&quot;usernameSpan&quot;</span>);</span><br><span class="line">	<span class="comment">// innerHTML这个属性可读、可写</span></span><br><span class="line">	<span class="keyword">if</span>(pattern.test(usernametext))&#123;</span><br><span class="line">		usernameSpanObj.innerHTML = <span class="string">&#x27;用户名合法！&#x27;</span></span><br><span class="line">		<span class="comment">// alert(&#x27;用户名合法！&#x27;)</span></span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">	usernameSpanObj.innerHTML = <span class="string">&#x27;用户名不合法！&#x27;</span></span><br><span class="line">		<span class="comment">// alert(&#x27;用户名不合法！&#x27;)</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">用户名：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span>/&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;usernameSpan&quot;</span> style=<span class="string">&quot;color:red&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;button onclick=<span class="string">&quot;onclickFun()&quot;</span>&gt;校验&lt;/button&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>节点（标签对象）的常用属性和方法</p>
<ul>
<li><p>方法</p>
<ul>
<li>通过具体的元素节点调用getElementByTagName()方法，获取当前节点的指定标签名孩子节点</li>
<li>appendChild(oChildNode)方法，可以添加一个子节点，oChildNode是要添加的孩子节点</li>
</ul>
</li>
<li><p>属性</p>
<ul>
<li>childNodes：获取当前节点的所有子节点     </li>
<li>firshChild：当前节点的第一个子节点  </li>
<li>lastChild：当前节点的最后一个子节点</li>
<li>parentNode：获取当前节点的父节点</li>
<li> nextSibling：获取当前节点的下一个节点</li>
<li>previousSibling：获取当前节点的上一个节点</li>
<li>className：用于获取或设置标签的class属性值</li>
<li>innerHTML：表示获取/设置起始标签和结束标签中的内容</li>
<li>innerText：表示获取/设置起始标签和结束标签中的文本</li>
</ul>
</li>
<li><p>eg. 使用JS代码来创建html标签，并显示在页面上</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> divObj = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);  <span class="comment">//在内存中</span></span><br><span class="line">    divObj.innerHTML = <span class="string">&#x27;代码显示标签内容1&#x27;</span>;   <span class="comment">//法一：添加标签内容；此时标签已有内容，但还是在内存中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> textNodeObj = <span class="built_in">document</span>.createTextNode(<span class="string">&#x27;代码显示标签内容2&#x27;</span>);<span class="comment">//法二：添加标签内容</span></span><br><span class="line">    divObj.appendChild(textNodeObj)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(divObj)   <span class="comment">//注意要等页面加载完成以后</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>operator_precedence</title>
    <url>/2021/05/20/operator-precedence/</url>
    <content><![CDATA[<h1 id="编译原理实验4——算符优先文法实现表达式求值"><a href="#编译原理实验4——算符优先文法实现表达式求值" class="headerlink" title="编译原理实验4——算符优先文法实现表达式求值"></a>编译原理实验4——算符优先文法实现表达式求值</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>​       算符优先分析法(Operator Precedence Parse)是仿效四则运算的计算过程而构造的一种语法分析方法。算符优先分析法的关键是比较两个相继出现的终结符的优先级而决定应采取的动作。</p>
<ul>
<li>优点：简单，有效，适合表达式的分析。</li>
<li>缺点：只适合于算符优先文法，是一个不大的文法类。</li>
</ul>
<a id="more"></a>

<h2 id="2、FirstVT集和LastVT集"><a href="#2、FirstVT集和LastVT集" class="headerlink" title="2、FirstVT集和LastVT集"></a>2、FirstVT集和LastVT集</h2><h3 id="2-1-FirstVT集"><a href="#2-1-FirstVT集" class="headerlink" title="2.1 FirstVT集"></a>2.1 FirstVT集</h3><ul>
<li>定义：FirstVT(P) = {a|P=&gt;a…或P=&gt;Qa…，a属于Vt，Q属于Vn}</li>
</ul>
<ul>
<li>求法：<ul>
<li>若P→a…或P→Qa…，则将a加入FirstVT(P);</li>
<li>若P→Q…，则FirstVT(Q)加入FirstVT(P);</li>
<li>直至FirstVT(P)不再增大。</li>
</ul>
</li>
</ul>
<h3 id="2-2-LastVT集"><a href="#2-2-LastVT集" class="headerlink" title="2.2 LastVT集"></a>2.2 LastVT集</h3><ul>
<li>定义：LastVT(P) = {a|P=&gt;…a或P=&gt;…aQ，a属于Vt，Q属于Vn}</li>
<li>求法：<ul>
<li>若P→…a或P→…aQ，则a属于LastVT(P);</li>
<li>若P→…Q，则LastVT(Q)含于LastVT(P);</li>
<li>直至LastVT(P)不再增大。</li>
</ul>
</li>
</ul>
<h2 id="3、算符优先关系表"><a href="#3、算符优先关系表" class="headerlink" title="3、算符优先关系表"></a>3、算符优先关系表</h2><p><strong>终结符之间的优先关系</strong></p>
<p>对算符文法G，a、b属于Vt 定义</p>
<ul>
<li>a = b: G中有P→. . .ab. . .或P→. . .aQb. . .</li>
<li>a &lt; b: G中有P→. . .aQ. . .且Q=&gt;b…或Q=&gt;Rb…</li>
<li>a &gt; b: G中有P→. . .Qb. . . 且Q=&gt;. ..a或Q=&gt;…aR</li>
</ul>
<h2 id="4、分析句子"><a href="#4、分析句子" class="headerlink" title="4、分析句子"></a>4、分析句子</h2><h3 id="4-1-界定右句型的句柄"><a href="#4-1-界定右句型的句柄" class="headerlink" title="4.1 界定右句型的句柄"></a>4.1 界定右句型的句柄</h3><ul>
<li>&lt; 标记句柄的左端</li>
<li>= 出现在句柄的内部</li>
<li><em>&gt;</em> 标记句柄的右端</li>
</ul>
<h3 id="4-2-发现句柄的过程："><a href="#4-2-发现句柄的过程：" class="headerlink" title="4.2 发现句柄的过程："></a>4.2 发现句柄的过程：</h3><ul>
<li>从左端开始扫描串，直到遇到第一个&gt;为止。</li>
<li>向左扫描，跳过所有的=，直到遇到一个&lt;为止。</li>
<li>句柄包括从上一步遇到的 ‘&lt;’ 右部，到第一个 ‘&gt;’ 左部之间的所有符号，包括介于期间或者两边的非终结符</li>
</ul>
<h3 id="4-3-非终结符的处理"><a href="#4-3-非终结符的处理" class="headerlink" title="4.3 非终结符的处理"></a>4.3 非终结符的处理</h3><p>因为非终结符不能影响语法分析，所以不需要区分它们，于是只用一个占位符来代替它们</p>
<h3 id="4-4-算法的主体思想"><a href="#4-4-算法的主体思想" class="headerlink" title="4.4 算法的主体思想"></a>4.4 算法的主体思想</h3><ul>
<li>用栈存储已经看到的输入符号，用优先关系指导移动归约语法分析器的动作，如果栈顶的终结符和下一个输入符之间的优先关系是&lt;或=，则将输入符移进栈，表示还没有发现句柄的右端，如果是&gt;关系，就调用归约</li>
<li>算法描述：<ul>
<li>输入：输入字符串ω和优先关系表</li>
<li>输出：如果ω是语法产生的一个句子，则输出其用来归约的产生式；如果有错误，则转入错误处理</li>
</ul>
</li>
</ul>
<h2 id="5、Java代码实现"><a href="#5、Java代码实现" class="headerlink" title="5、Java代码实现"></a>5、Java代码实现</h2><h3 id="5-1-Producter类"><a href="#5-1-Producter类" class="headerlink" title="5.1 Producter类"></a>5.1 Producter类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String producter;   <span class="comment">// 产生式</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producter</span><span class="params">(String producter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.producter = producter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Character <span class="title">getLeft</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String[] arr = producter.split(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>].charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRight</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String[] arr = producter.split(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断一个产生式是否符合算符优先文法要求</span></span><br><span class="line"><span class="comment">     * 如果没有多个连续非终结符号相连的就是算符优先文法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOperPrior</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String right = getRight();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; right.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(right.charAt(i)&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; right.charAt(i)&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span>&lt;right.length() &amp;&amp; right.charAt(i+<span class="number">1</span>)&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; right.charAt(i+<span class="number">1</span>)&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> producter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-F-L工具类，用于求取FirstVT集和LastVT集"><a href="#5-2-F-L工具类，用于求取FirstVT集和LastVT集" class="headerlink" title="5.2 F_L工具类，用于求取FirstVT集和LastVT集"></a>5.2 F_L工具类，用于求取FirstVT集和LastVT集</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">F_L</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Character, Set&lt;Character&gt;&gt; firstVt = <span class="keyword">new</span> HashMap&lt;&gt;();    <span class="comment">//firstVT集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Character, Set&lt;Character&gt;&gt; lastVt = <span class="keyword">new</span> HashMap&lt;&gt;();     <span class="comment">//lastVT集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Set&lt;Producter&gt; gs;                                           <span class="comment">//文法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据输入的语法，获得相应 firstVT和 lastVT集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gs 待处理的文法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">F_L</span><span class="params">(Set&lt;Producter&gt; producters)</span> </span>&#123;</span><br><span class="line">        gs = producters;                            <span class="comment">//初始化文法</span></span><br><span class="line">        <span class="keyword">for</span>(Character vn : GSBuilder.getVN(gs)) &#123;</span><br><span class="line">            Set&lt;Character&gt; fvt = <span class="keyword">new</span> HashSet&lt;&gt;();   <span class="comment">//得到firstVT集</span></span><br><span class="line">            getFirstVT(vn, fvt);</span><br><span class="line">            firstVt.put(vn, fvt);</span><br><span class="line"></span><br><span class="line">            Set&lt;Character&gt; lvt = <span class="keyword">new</span> HashSet&lt;&gt;();   <span class="comment">//得到lastVT集</span></span><br><span class="line">            getLastVT(vn,lvt);</span><br><span class="line">            lastVt.put(vn,lvt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Character, Set&lt;Character&gt;&gt; getFirstVt() &#123;</span><br><span class="line">        <span class="keyword">return</span> firstVt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Character, Set&lt;Character&gt;&gt; getLastVt() &#123;</span><br><span class="line">        <span class="keyword">return</span> lastVt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示firstVt集合和lastVt集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowFL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;firstVt集合如下:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Character, Set&lt;Character&gt;&gt; entry : firstVt.entrySet()) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;firstVt(&quot;</span> + entry.getKey() + <span class="string">&quot;): &#123;&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Character value : entry.getValue()) &#123;</span><br><span class="line">                flag++;</span><br><span class="line">                System.out.print(value);</span><br><span class="line">                <span class="keyword">if</span> (flag != entry.getValue().size()) &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;lastVt集合如下:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Character, Set&lt;Character&gt;&gt; entry : lastVt.entrySet()) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;lastVt(&quot;</span> + entry.getKey() + <span class="string">&quot;): &#123;&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Character value : entry.getValue()) &#123;</span><br><span class="line">                flag++;</span><br><span class="line">                System.out.print(value);</span><br><span class="line">                <span class="keyword">if</span> (flag != entry.getValue().size()) &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得firstVt集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 非终结符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fvt   对应的firstVT集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getFirstVT</span><span class="params">(Character s, Set&lt;Character&gt; fvt)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, List&lt;String&gt;&gt; map = GSBuilder.gsHelper(gs);</span><br><span class="line">        <span class="keyword">for</span>(Character vn : GSBuilder.getVN(gs)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vn == s)&#123;</span><br><span class="line">                List&lt;String&gt; producters = map.get(vn);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; producters.size(); i++) &#123;</span><br><span class="line">                    String producter = producters.get(i);</span><br><span class="line">                    <span class="keyword">char</span> ch = producter.charAt(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span>(ch&lt;<span class="string">&#x27;A&#x27;</span> || ch&gt;<span class="string">&#x27;Z&#x27;</span>)&#123;           <span class="comment">//U-&gt;a...</span></span><br><span class="line">                        fvt.add(ch);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;         <span class="comment">//U-&gt;Q...</span></span><br><span class="line">                        <span class="keyword">if</span>(producter.length()&gt;<span class="number">1</span> &amp;&amp; (producter.charAt(<span class="number">1</span>)&lt;<span class="string">&#x27;A&#x27;</span>||producter.charAt(<span class="number">1</span>)&gt;<span class="string">&#x27;Z&#x27;</span>))&#123; <span class="comment">//U-&gt;Qa...</span></span><br><span class="line">                            fvt.add(producter.charAt(<span class="number">1</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(ch == vn)&#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        getFirstVT(ch, fvt);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得lastVt集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getLastVT</span><span class="params">(Character s, Set&lt;Character&gt; lvt)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, List&lt;String&gt;&gt; map = GSBuilder.gsHelper(gs);</span><br><span class="line">        <span class="keyword">for</span>(Character vn : GSBuilder.getVN(gs)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vn == s) &#123;</span><br><span class="line">                List&lt;String&gt; producters = map.get(vn);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; producters.size(); i++) &#123;</span><br><span class="line">                    String producter = producters.get(i);</span><br><span class="line">                    <span class="keyword">int</span> index = producter.length()-<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">char</span> ch = producter.charAt(index);</span><br><span class="line">                    <span class="keyword">if</span>(ch&lt;<span class="string">&#x27;A&#x27;</span> || ch&gt;<span class="string">&#x27;Z&#x27;</span>)&#123;           <span class="comment">//U-&gt;...a</span></span><br><span class="line">                        lvt.add(ch);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;         <span class="comment">//U-&gt;...Q</span></span><br><span class="line">                        <span class="keyword">if</span>(producter.length()&gt;<span class="number">1</span> &amp;&amp; (producter.charAt(index-<span class="number">1</span>)&lt;<span class="string">&#x27;A&#x27;</span>||producter.charAt(index-<span class="number">1</span>)&gt;<span class="string">&#x27;Z&#x27;</span>))&#123; <span class="comment">//U-&gt;...aQ</span></span><br><span class="line">                            lvt.add(producter.charAt(index-<span class="number">1</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(ch == vn)&#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        getLastVT(ch, lvt);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-3-PriorityTable-算符优先表类"><a href="#5-3-PriorityTable-算符优先表类" class="headerlink" title="5.3 PriorityTable 算符优先表类"></a>5.3 PriorityTable 算符优先表类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityTable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 成员变量为一个Table，下面的方法都是对该表的操作</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Character, Map&lt;Character, Character&gt;&gt; table = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Set&lt;Producter&gt; gs;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gs            规则集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start         文法的开始状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstVt       firstVT集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastVt        lastVT集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PriorityTable</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Set&lt;Producter&gt; producterSet,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">char</span> start,</span></span></span><br><span class="line"><span class="function"><span class="params">            Map&lt;Character, Set&lt;Character&gt;&gt; firstVt,</span></span></span><br><span class="line"><span class="function"><span class="params">            Map&lt;Character, Set&lt;Character&gt;&gt; lastVt)</span> </span>&#123;</span><br><span class="line">        gs = producterSet;</span><br><span class="line">        Map&lt;Character, List&lt;String&gt;&gt; map = GSBuilder.gsHelper(gs);</span><br><span class="line">        <span class="keyword">for</span>(Character vn : GSBuilder.getVN(gs)) &#123;</span><br><span class="line">            List&lt;String&gt; producters = map.get(vn);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; producters.size(); i++) &#123;</span><br><span class="line">                String producter = producters.get(i);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; producter.length(); j++) &#123;</span><br><span class="line">                    <span class="keyword">char</span> ch = producter.charAt(j);</span><br><span class="line">                    <span class="keyword">if</span>(ch&lt;<span class="string">&#x27;A&#x27;</span>||ch&gt;<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(j+<span class="number">1</span> &lt; producter.length())&#123;</span><br><span class="line">                            <span class="keyword">char</span> next = producter.charAt(j+<span class="number">1</span>);</span><br><span class="line">                            <span class="keyword">if</span>(next&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; next&lt;=<span class="string">&#x27;Z&#x27;</span>)&#123;                             <span class="comment">//...aU...</span></span><br><span class="line">                                Set&lt;Character&gt; set = firstVt.get(next);</span><br><span class="line">                                Map&lt;Character,Character&gt; tmp = table.containsKey(ch) ? table.get(ch) : <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                                <span class="keyword">for</span>(Character c : set)&#123;</span><br><span class="line">                                    tmp.put(c, <span class="string">&#x27;&lt;&#x27;</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                                table.put(ch, tmp);</span><br><span class="line">                                <span class="keyword">if</span>(j+<span class="number">2</span> &lt; producter.length()) &#123;</span><br><span class="line">                                    <span class="keyword">char</span> nnext = producter.charAt(j + <span class="number">2</span>);</span><br><span class="line">                                    <span class="keyword">if</span> (nnext &lt;<span class="string">&#x27;A&#x27;</span> || nnext &gt; <span class="string">&#x27;Z&#x27;</span>) &#123;             <span class="comment">//...aUb...</span></span><br><span class="line">                                        tmp = table.containsKey(ch) ? table.get(ch) : <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                                        tmp.put(nnext, <span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">                                        table.put(ch, tmp);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;                                                  <span class="comment">//...ab...</span></span><br><span class="line">                                Map&lt;Character,Character&gt; tmp = table.containsKey(ch) ? table.get(ch) : <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                                tmp.put(next, <span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">                                table.put(ch, tmp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (j+<span class="number">1</span> &lt; producter.length()) &#123;</span><br><span class="line">                            <span class="keyword">char</span> next = producter.charAt(j + <span class="number">1</span>);</span><br><span class="line">                            <span class="keyword">if</span>(next &lt; <span class="string">&#x27;A&#x27;</span> || next &gt; <span class="string">&#x27;Z&#x27;</span>)&#123;                           <span class="comment">//...Ub...</span></span><br><span class="line">                                Set&lt;Character&gt; set = lastVt.get(ch);</span><br><span class="line">                                <span class="keyword">for</span>(Character c : set)&#123;</span><br><span class="line">                                    <span class="keyword">if</span> (table.containsKey(c)) &#123;</span><br><span class="line">                                        table.get(c).put(next, <span class="string">&#x27;&gt;&#x27;</span>);</span><br><span class="line">                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                        Map&lt;Character,Character&gt; tmp = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                                        tmp.put(next, <span class="string">&#x27;&gt;&#x27;</span>);</span><br><span class="line">                                        table.put(c, tmp);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Character&gt; set = firstVt.get(start);</span><br><span class="line">        Map&lt;Character,Character&gt; tmp = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Character c : set)&#123;</span><br><span class="line">            tmp.put(c, <span class="string">&#x27;&lt;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        table.put(<span class="string">&#x27;#&#x27;</span>, tmp);</span><br><span class="line"></span><br><span class="line">        set = lastVt.get(start);</span><br><span class="line">        <span class="keyword">for</span>(Character c : set)&#123;</span><br><span class="line">            <span class="keyword">if</span> (table.containsKey(c)) &#123;</span><br><span class="line">                table.get(c).put(<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                tmp.put(<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>);</span><br><span class="line">                table.put(c, tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tmp = table.containsKey(<span class="string">&#x27;#&#x27;</span>) ? table.get(<span class="string">&#x27;#&#x27;</span>) : <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        tmp.put(<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">        table.put(<span class="string">&#x27;#&#x27;</span>,tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Set&lt;Character&gt; vt = getVT(gs);</span><br><span class="line">        vt.add(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">        <span class="keyword">int</span> control = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Character value : vt) &#123;    <span class="comment">//第一行打印终结符</span></span><br><span class="line">            <span class="keyword">if</span> (control == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            control++;</span><br><span class="line">            System.out.print(value);</span><br><span class="line">            <span class="keyword">if</span> (control != vt.size()) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (Character value : vt) &#123;</span><br><span class="line">            System.out.print(value);</span><br><span class="line">            <span class="keyword">for</span> (Character value1 : vt) &#123;</span><br><span class="line">                Character ch = table.get(value).get(value1);</span><br><span class="line">                <span class="keyword">if</span> (ch != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;\t&quot;</span> + ch);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;\t&quot;</span> + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// findTable查表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">findTable</span><span class="params">(Character vt_row, Character vt_col)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(table.get(vt_row) != <span class="keyword">null</span> &amp;&amp; table.get(vt_row).get(vt_col) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> table.get(vt_row).get(vt_col);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-4、Analysis工具类，用于分析一个句子是否符合算符优先文法，并给出识别过程"><a href="#5-4、Analysis工具类，用于分析一个句子是否符合算符优先文法，并给出识别过程" class="headerlink" title="5. 4、Analysis工具类，用于分析一个句子是否符合算符优先文法，并给出识别过程"></a>5. 4、Analysis工具类，用于分析一个句子是否符合算符优先文法，并给出识别过程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Analysis</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Producter&gt; gs;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Character&gt; vt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Analysis</span><span class="params">(Set&lt;Producter&gt; producters)</span> </span>&#123;</span><br><span class="line">        gs = producters;</span><br><span class="line">        vt = GSBuilder.getVT(gs);</span><br><span class="line">        vt.add(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 算符优先分析过程</span></span><br><span class="line"><span class="comment">     * 使用一个符号栈，用它寄存终结符和非终结符,k代表符号栈的深度</span></span><br><span class="line"><span class="comment">     * 在正常情况下，算法工作完毕时，符号栈S应呈现:#N</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">analysis</span><span class="params">(String sentence)</span> </span>&#123;</span><br><span class="line">        sentence = preDeal(sentence);</span><br><span class="line">        System.out.println(<span class="string">&quot;预处理后的字符串：&quot;</span>+sentence);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------分析过程如下--------------------&quot;</span>);</span><br><span class="line">        PriorityTable pt = <span class="keyword">new</span> PriorityTable(gs, <span class="string">&#x27;E&#x27;</span>, <span class="keyword">new</span> F_L(gs).getFirstVt(), <span class="keyword">new</span> F_L(gs).getLastVt());</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        String gui = <span class="keyword">null</span>;</span><br><span class="line">        sentence += <span class="string">&#x27;#&#x27;</span>;        <span class="comment">//要识别的句子以#结束</span></span><br><span class="line">        List&lt;Character&gt; listStack = <span class="keyword">new</span> ArrayList&lt;&gt;();  <span class="comment">//用一个List来模拟栈</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;%-8s%-20s%-8s%-10s%-8s\n&quot;</span>, <span class="string">&quot;步骤&quot;</span>, <span class="string">&quot;栈&quot;</span>, <span class="string">&quot;读入&quot;</span>, <span class="string">&quot;剩余串&quot;</span>, <span class="string">&quot;操作&quot;</span>);</span><br><span class="line">        listStack.add(<span class="string">&#x27;#&#x27;</span>);     <span class="comment">//将#压入栈</span></span><br><span class="line">        <span class="keyword">char</span> a = sentence.charAt(step++);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%-8s\n%-8d %-20s %-8c %-10s&quot;</span>, <span class="string">&quot;移进&quot;</span>, count, listToString(listStack), a, sentence.substring(step));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%-8d %-20s %-8c %-10s&quot;</span>, count, listToString(listStack), a, sentence.substring(step));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">char</span> ch = listStack.get(k);</span><br><span class="line">            <span class="keyword">if</span> (isVt(ch)) &#123;</span><br><span class="line">                j = k;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">                j = k - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">char</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (pt.findTable(listStack.get(j),a) == <span class="string">&#x27;&gt;&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (listStack.size() == <span class="number">2</span> &amp;&amp; a == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                StringBuilder judge = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    temp = listStack.get(j);</span><br><span class="line">                    <span class="keyword">if</span> (isVt(listStack.get(j - <span class="number">1</span>))) &#123;</span><br><span class="line">                        j = j - <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        j = j - <span class="number">2</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">while</span> (pt.findTable(listStack.get(j),temp) != <span class="string">&#x27;&lt;&#x27;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = j + <span class="number">1</span>; i &lt; listStack.size(); i++) &#123;</span><br><span class="line">                    judge.append(listStack.get(i));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> c = judge.length();</span><br><span class="line">                <span class="keyword">while</span>(c &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    c--;</span><br><span class="line">                    listStack.remove(j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">char</span> res = retLeft(judge.toString());</span><br><span class="line">                count++;</span><br><span class="line">                k = j + <span class="number">1</span>;</span><br><span class="line">                listStack.add(res);</span><br><span class="line">                gui = <span class="string">&quot;用&quot;</span> + res + <span class="string">&quot;-&gt;&quot;</span> + judge.toString() + <span class="string">&quot;规约&quot;</span>;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%-8s\n%-8d %-20s %-8c %-10s&quot;</span>, gui, count, listToString(listStack), a, sentence.substring(step));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">char</span> sym = pt.findTable(listStack.get(j), a);</span><br><span class="line">            <span class="keyword">if</span> (sym==<span class="string">&#x27;&lt;&#x27;</span> || sym==<span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                k++;</span><br><span class="line">                listStack.add(a);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;算符优先分析法推导失败，请检查输入表达式！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (listStack.size() == <span class="number">2</span> &amp;&amp; a == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (step &lt; sentence.length()) &#123;</span><br><span class="line">                a = sentence.charAt(step++);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!(listStack.size() == <span class="number">2</span> &amp;&amp; a == <span class="string">&#x27;#&#x27;</span>));</span><br><span class="line">        System.out.printf(<span class="string">&quot;%-8s\n&quot;</span>, <span class="string">&quot;算符优先分析法推导成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 句子进行预处理，将其中的实数转为 i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sentence 待检查的句子</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">preDeal</span><span class="params">(String sentence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] expToChar = sentence.toCharArray();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; expToChar.length; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = expToChar[i];</span><br><span class="line">            <span class="keyword">if</span>(!isDigit(ch))&#123;</span><br><span class="line">                sb.append(ch);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>(i+<span class="number">1</span> &lt; expToChar.length &amp;&amp; isDigit(expToChar[i+<span class="number">1</span>]))&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDigit</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) || ch == <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">char</span> <span class="title">retLeft</span><span class="params">(String right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Producter p : gs)&#123;</span><br><span class="line">            String str = p.getRight();</span><br><span class="line">            <span class="keyword">if</span>(str.length() != right.length())&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; str.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">char</span> ch1 = str.charAt(i);</span><br><span class="line">                <span class="keyword">char</span> ch2 = right.charAt(i);</span><br><span class="line">                <span class="keyword">if</span>(ch1&lt;<span class="string">&#x27;A&#x27;</span> || ch1&gt;<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ch1 != ch2)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!(ch2&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; ch2&lt;=<span class="string">&#x27;Z&#x27;</span>))&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == str.length())&#123;</span><br><span class="line">                <span class="keyword">return</span> p.getLeft();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isVt</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Character value : vt) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value.equals(ch)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符数组转换成字符串，用于输出打印</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">listToString</span><span class="params">(List&lt;Character&gt; list)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (Character value : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="string">&#x27;,&#x27;</span> &amp;&amp; value != <span class="string">&#x27;[&#x27;</span> &amp;&amp; value != <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">                sb.append(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-5-Calculator计算类，用于计算输入表达式的值"><a href="#5-5-Calculator计算类，用于计算输入表达式的值" class="headerlink" title="5.5 Calculator计算类，用于计算输入表达式的值"></a>5.5 Calculator计算类，用于计算输入表达式的值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Stack&lt;Float&gt; numStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Stack&lt;Character&gt; operStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> PriorityTable pt;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String expression;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calculator</span><span class="params">(PriorityTable priorityTable, String express)</span> </span>&#123;</span><br><span class="line">        pt = priorityTable;</span><br><span class="line">        expression = express+<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 表达式的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">calculate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 新建两个栈，一个存储数据，一个存储操作符</span></span><br><span class="line">        operStack.push(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">        <span class="keyword">char</span>[] expToChar = expression.toCharArray();</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(!operStack.isEmpty())&#123;</span><br><span class="line">            ch = expToChar[index];</span><br><span class="line">            <span class="keyword">if</span>(isDigit(ch))&#123;</span><br><span class="line">                readNum();  <span class="comment">//读取一个实数入栈</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">char</span> pre_op = operStack.peek();</span><br><span class="line">                <span class="keyword">switch</span> (pt.findTable(pre_op,ch)) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>:</span><br><span class="line">                        operStack.push(ch);</span><br><span class="line">                        index++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">                        operStack.pop();</span><br><span class="line">                        index++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:</span><br><span class="line">                        <span class="keyword">float</span> a = numStack.pop();</span><br><span class="line">                        <span class="keyword">float</span> b = numStack.pop();</span><br><span class="line">                        pre_op = operStack.pop();</span><br><span class="line">                        numStack.push(operate(a, pre_op, b));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numStack.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDigit</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从表达式中读取实数并入操作数栈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] expressToChar = expression.toCharArray();    <span class="comment">//将原表达式转化为char数组</span></span><br><span class="line">        numStack.push((<span class="keyword">float</span>) expressToChar[index] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">while</span> (isDigit(expressToChar[index])) &#123;</span><br><span class="line">            numStack.push(numStack.pop() * <span class="number">10</span> + (<span class="keyword">float</span>) expressToChar[index] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;.&#x27;</span> == (expressToChar[index])) &#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">float</span> cost = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (isDigit(expressToChar[index])) &#123;</span><br><span class="line">                numStack.push(numStack.pop() + (<span class="keyword">float</span>) (expressToChar[index] - <span class="string">&#x27;0&#x27;</span>) * (cost /= <span class="number">10</span>));</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">operate</span><span class="params">(<span class="keyword">float</span> f1, <span class="keyword">char</span> pre_op, <span class="keyword">float</span> f2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(pre_op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> f1+f2;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> f2-f1;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> f2*f1;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> f2/f1;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;^&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">float</span>) Math.pow(f2, f1);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;输入错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-6-GSBuilder工具类，用于接收输入的文法"><a href="#5-6-GSBuilder工具类，用于接收输入的文法" class="headerlink" title="5.6 GSBuilder工具类，用于接收输入的文法"></a>5.6 GSBuilder工具类，用于接收输入的文法</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GSBuilder</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 接受输入，返回GS文法，即产生式的集合：Set&lt;Producter&gt;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">Set</span>&lt;Producter&gt; build() throws IOException &#123;</span><br><span class="line">        <span class="built_in">Set</span>&lt;Producter&gt; gs = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="built_in">String</span> line = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!(line = br.readLine().trim()).equals(<span class="string">&quot;end&quot;</span>))&#123;</span><br><span class="line">            gs.add(<span class="keyword">new</span> Producter(line));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据文法GS，获取所有的非终结符集</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">Set</span>&lt;Character&gt; <span class="function"><span class="title">getVN</span>(<span class="params"><span class="built_in">Set</span>&lt;Producter&gt; gs</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">Set</span>&lt;Character&gt; vn = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Producter producter : gs)&#123;</span><br><span class="line">            vn.add(producter.getLeft());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将文法GS转换成Map&lt;非终结符, 对应规则的集合&gt;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">Map</span>&lt;Character, List&lt;<span class="built_in">String</span>&gt;&gt; <span class="function"><span class="title">gsHelper</span>(<span class="params"><span class="built_in">Set</span>&lt;Producter&gt; gs</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">Map</span>&lt;Character, List&lt;<span class="built_in">String</span>&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Producter producter : gs)&#123;</span><br><span class="line">            Character c = producter.getLeft();</span><br><span class="line">            <span class="built_in">String</span> s = producter.getRight();</span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(c))&#123;</span><br><span class="line">                List&lt;<span class="built_in">String</span>&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                map.put(c, list);</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(c).add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据文法GS，获取所有的终结符集</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">Set</span>&lt;Character&gt; <span class="function"><span class="title">getVT</span>(<span class="params"><span class="built_in">Set</span>&lt;Producter&gt; gs</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">Set</span>&lt;Character&gt; vt = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Producter producter : gs)&#123;</span><br><span class="line">            <span class="keyword">for</span>(Character c : producter.getRight().toCharArray())&#123;</span><br><span class="line">                <span class="keyword">if</span>(c&lt;<span class="string">&#x27;A&#x27;</span> || c&gt;<span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                    vt.add(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-7-Main主函数测试类"><a href="#5-7-Main主函数测试类" class="headerlink" title="5.7 Main主函数测试类"></a>5.7 Main主函数测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入文法GS（一行一行的输入生成式，end表示结束）：&quot;</span>);</span><br><span class="line">        Set&lt;Producter&gt; gs = GSBuilder.build();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;是否是算符优先文法？&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Producter p : gs) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!p.isOperPrior())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;\t不是，请重新输入文法&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\t是&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> F_L(gs).ShowFL();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;构造的算符优先关系表如下：&quot;</span>);</span><br><span class="line">        PriorityTable pt = <span class="keyword">new</span> PriorityTable(gs, <span class="string">&#x27;E&#x27;</span>, <span class="keyword">new</span> F_L(gs).getFirstVt(), <span class="keyword">new</span> F_L(gs).getLastVt());</span><br><span class="line">        pt.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要检查的串：&quot;</span>);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String sentence = br.readLine();</span><br><span class="line">        <span class="keyword">new</span> Analysis(gs).analysis(sentence);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------计算表达式的值--------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Calculator(pt, sentence).calculate());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Test Example:</span></span><br><span class="line"><span class="comment">E-&gt;E+T</span></span><br><span class="line"><span class="comment">E-&gt;T</span></span><br><span class="line"><span class="comment">T-&gt;T*F</span></span><br><span class="line"><span class="comment">T-&gt;F</span></span><br><span class="line"><span class="comment">F-&gt;i</span></span><br><span class="line"><span class="comment">F-&gt;(E)</span></span><br><span class="line"><span class="comment">end</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2 id="6、运行效果"><a href="#6、运行效果" class="headerlink" title="6、运行效果"></a>6、运行效果</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">==========================================</span><br><span class="line">请输入文法GS（一行一行的输入生成式，end表示结束）：</span><br><span class="line">E-&gt;E+T</span><br><span class="line">E-&gt;T</span><br><span class="line">T-&gt;T*F</span><br><span class="line">T-&gt;F</span><br><span class="line">F-&gt;i</span><br><span class="line">F-&gt;(E)</span><br><span class="line">end</span><br><span class="line">------------------------------------------</span><br><span class="line">是否是算符优先文法？	是</span><br><span class="line">------------------------------------------</span><br><span class="line">firstVt集合如下:</span><br><span class="line">firstVt(T): &#123;(,i,*&#125;</span><br><span class="line">firstVt(E): &#123;(,i,*,+&#125;</span><br><span class="line">firstVt(F): &#123;(,i&#125;</span><br><span class="line">------------------------------------------</span><br><span class="line">lastVt集合如下:</span><br><span class="line">lastVt(T): &#123;),i,*&#125;</span><br><span class="line">lastVt(E): &#123;),i,*,+&#125;</span><br><span class="line">lastVt(F): &#123;),i&#125;</span><br><span class="line">------------------------------------------</span><br><span class="line">构造的算符优先关系表如下：</span><br><span class="line">	#	(	)	i	*	+</span><br><span class="line">#	=	&lt;	 	&lt;	&lt;	&lt;</span><br><span class="line">(	 	&lt;	=	&lt;	&lt;	&lt;</span><br><span class="line">)	&gt;	 	&gt;	 	&gt;	&gt;</span><br><span class="line">i	&gt;	 	&gt;	 	&gt;	&gt;</span><br><span class="line">*	&gt;	&lt;	&gt;	&lt;	&gt;	&gt;</span><br><span class="line">+	&gt;	&lt;	&gt;	&lt;	&lt;	&gt;</span><br><span class="line">==========================================</span><br><span class="line">请输入要检查的串：</span><br><span class="line">1.23*(7+3)</span><br><span class="line">预处理后的字符串：i*(i+i)</span><br><span class="line">------------------分析过程如下--------------------</span><br><span class="line">步骤      栈                   读入      剩余串       操作      </span><br><span class="line">0        #                    i        *(i+i)#   移进      </span><br><span class="line">1        #i                   *        (i+i)#    用F-&gt;i规约 </span><br><span class="line">2        #F                   *        (i+i)#    移进      </span><br><span class="line">3        #F*                  (        i+i)#     移进      </span><br><span class="line">4        #F*(                 i        +i)#      移进      </span><br><span class="line">5        #F*(i                +        i)#       用F-&gt;i规约 </span><br><span class="line">6        #F*(F                +        i)#       移进      </span><br><span class="line">7        #F*(F+               i        )#        移进      </span><br><span class="line">8        #F*(F+i              )        #         用F-&gt;i规约 </span><br><span class="line">9        #F*(F+F              )        #         用E-&gt;F+F规约</span><br><span class="line">10       #F*(E                )        #         移进      </span><br><span class="line">11       #F*(E)               #                  用F-&gt;(E)规约</span><br><span class="line">12       #F*F                 #                  用T-&gt;F*F规约</span><br><span class="line">13       #T                   #                  算符优先分析法推导成功！</span><br><span class="line">------------------计算表达式的值--------------------</span><br><span class="line">12.3</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>自下而上的语法分析</tag>
      </tags>
  </entry>
  <entry>
    <title>pygame_study</title>
    <url>/2021/02/14/pygame-study/</url>
    <content><![CDATA[<h1 id="pygame学习笔记"><a href="#pygame学习笔记" class="headerlink" title="pygame学习笔记"></a>pygame学习笔记</h1><p>前言：通过一个简单的壁球小游戏来学习pygame模块，并在学习过程中不断完善和改进，笔记内容分为四大章节：pygame最小开发框架、屏幕绘制机制、事件处理机制、色彩与绘图机制</p>
<p>学习视频参考：<a href="https://www.bilibili.com/video/BV1XW411E7vb?p=25">b站的嵩天教授的Python游戏开发教程（pygame）</a></p>
<a id="more"></a>

<h2 id="1、pygame最小游戏开发框架"><a href="#1、pygame最小游戏开发框架" class="headerlink" title="1、pygame最小游戏开发框架"></a>1、pygame最小游戏开发框架</h2><h3 id="1）引入pygame和sys"><a href="#1）引入pygame和sys" class="headerlink" title="1）引入pygame和sys"></a>1）引入pygame和sys</h3><ul>
<li>sys是python的标准库，提供了python运行时环境变量的操作，如sys.exit()用于结束游戏并退出（使用率最高）</li>
</ul>
<h3 id="2）初始化init-及设置"><a href="#2）初始化init-及设置" class="headerlink" title="2）初始化init()及设置"></a>2）初始化init()及设置</h3><ul>
<li>pygame.init()对pygame内部各功能模块进行初始化创建及变量设置，默认调用</li>
<li> pygame.display.set_mode(size) 初始化显示窗口，第一个参数size是一个二元元组，分别表示窗口的宽度和高度</li>
<li>pygame.display.set_caption(title) 设置显示窗口的标题内容，参数title是一个字符串类型 </li>
</ul>
<h3 id="3）获取事件并逐类响应"><a href="#3）获取事件并逐类响应" class="headerlink" title="3）获取事件并逐类响应"></a>3）获取事件并逐类响应</h3><ul>
<li>pygame会维护一个事件队列</li>
<li> pygame.event.get()会从pygame的队列事件中取出并删除，例如键盘按下就是一个事件</li>
<li> event.type：获取事件类型并逐类响应；pygame.QUIT是pygame中定义的退出事件常量</li>
</ul>
<h3 id="4）刷新屏幕"><a href="#4）刷新屏幕" class="headerlink" title="4）刷新屏幕"></a>4）刷新屏幕</h3><p>​        pygame.display.update()对显示窗口进行更新，默认窗口全部重绘</p>
<h3 id="5）最小框架代码"><a href="#5）最小框架代码" class="headerlink" title="5）最小框架代码"></a>5）最小框架代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">pygame.init()</span><br><span class="line">bg_size = width, height = <span class="number">600</span>, <span class="number">400</span></span><br><span class="line">screen = pygame.display.set_mode(bg_size)</span><br><span class="line">pygame.display.set_caption(<span class="string">&quot;pygame游戏之旅&quot;</span>)  <span class="comment"># 设置窗口的标题</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure>
<h3 id="6）运行结果"><a href="#6）运行结果" class="headerlink" title="6）运行结果"></a>6）运行结果</h3><p><img src="/2021/02/14/pygame-study/image-20210214202340393.png" alt="image-20210214202340393"></p>
<h2 id="2、碰壁球小游戏案例"><a href="#2、碰壁球小游戏案例" class="headerlink" title="2、碰壁球小游戏案例"></a>2、碰壁球小游戏案例</h2><p><code>注：壁球使用植物大战僵尸中的窝瓜素材，推荐一个免费的素材网站http://aigei.com/game/?m=b_3125497</code></p>
<h3 id="1）从需求到实现的三个关键要素"><a href="#1）从需求到实现的三个关键要素" class="headerlink" title="1）从需求到实现的三个关键要素"></a>1）从需求到实现的三个关键要素</h3><ul>
<li>壁球：游戏需要一个壁球，通过图片引入</li>
<li>壁球运动：壁球要能够上下左右运动</li>
<li>壁球反弹：壁球要能够在上下左右边缘反弹</li>
</ul>
<h3 id="2）壁球的载入"><a href="#2）壁球的载入" class="headerlink" title="2）壁球的载入"></a>2）壁球的载入</h3><ul>
<li><p>pygame使用内部定义的surface对象表示所有载入的图像，其中pygame.get_rect()方法返回一个覆盖图像的矩形Rect对象</p>
</li>
<li><p>那么得到一个图像的外切矩形有什么好处呢？<br>Rect对象有一些很重要的属性，例如：top、bottom、left、right、width、height</p>
</li>
</ul>
<h3 id="3）壁球的移动"><a href="#3）壁球的移动" class="headerlink" title="3）壁球的移动"></a>3）壁球的移动</h3><ul>
<li>ballrect.move(x,y) ，Rect对象移动一个偏移量(x,y)，即在横轴方向上移动x像素、纵轴方向上移动y像素，x、y为整数</li>
</ul>
<h3 id="4）壁球的反弹运动（逻辑控制）"><a href="#4）壁球的反弹运动（逻辑控制）" class="headerlink" title="4）壁球的反弹运动（逻辑控制）"></a>4）壁球的反弹运动（逻辑控制）</h3><ul>
<li><p>遇到左右两侧，横向速度取反</p>
</li>
<li><p>遇到上下两侧，纵向速度取反</p>
</li>
</ul>
<h3 id="5）填充背景"><a href="#5）填充背景" class="headerlink" title="5）填充背景"></a>5）填充背景</h3><ul>
<li><p>壁球移动后，原有位置将默认填充白色，因此需要重新对背景进行填充</p>
</li>
<li><p>screen.fill(color)显示窗口背景填充为color颜色，采用RGB色彩体系</p>
</li>
</ul>
<h3 id="6）通过Rect对象引导对壁球的绘制"><a href="#6）通过Rect对象引导对壁球的绘制" class="headerlink" title="6）通过Rect对象引导对壁球的绘制"></a>6）通过Rect对象引导对壁球的绘制</h3><ul>
<li>screen.blit(src,dest)将一个图像绘制在另一个图像上，即将src绘制到dest位置上。</li>
</ul>
<h3 id="7）节奏控制"><a href="#7）节奏控制" class="headerlink" title="7）节奏控制"></a>7）节奏控制</h3><ul>
<li><p>如何有效的控制壁球的运动速度？</p>
<p>clock = pygame.time.Clock()创建一个Clock对象，用于操作时间</p>
<p>clock.tick(framerate) 控制帧速度，即窗口刷新速度</p>
<p>例如clock.tick(100)表示每秒钟100次帧刷新，视频中每次展示的静态图像成为帧</p>
</li>
</ul>
<h3 id="8）完整代码"><a href="#8）完整代码" class="headerlink" title="8）完整代码"></a>8）完整代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">bg_size = width, height = <span class="number">600</span>, <span class="number">400</span></span><br><span class="line">screen = pygame.display.set_mode(bg_size)</span><br><span class="line">pygame.display.set_caption(<span class="string">&#x27;crash ball game&#x27;</span>)</span><br><span class="line">ball = pygame.image.load(<span class="string">&#x27;../squash.png&#x27;</span>)</span><br><span class="line">ballrect = ball.get_rect()</span><br><span class="line">speed = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">BLACK = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">fps = <span class="number">300</span> <span class="comment"># Frames per Second 每秒帧率参数</span></span><br><span class="line">fclock = pygame.time.Clock()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">    ballrect = ballrect.move(speed[<span class="number">0</span>], speed[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> ballrect.left &lt; <span class="number">0</span> <span class="keyword">or</span> ballrect.right &gt; width:</span><br><span class="line">        speed[<span class="number">0</span>] = -speed[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> ballrect.top &lt; <span class="number">0</span> <span class="keyword">or</span> ballrect.bottom &gt; height:</span><br><span class="line">        speed[<span class="number">1</span>] = -speed[<span class="number">1</span>]</span><br><span class="line">    screen.fill(BLACK)</span><br><span class="line">    screen.blit(ball, ballrect)</span><br><span class="line">    pygame.display.update()</span><br><span class="line">    fclock.tick(fps)</span><br></pre></td></tr></table></figure>
<h3 id="9）运行效果截图"><a href="#9）运行效果截图" class="headerlink" title="9）运行效果截图"></a>9）运行效果截图</h3><p><img src="/2021/02/14/pygame-study/image-20210214232236323.png" alt="image-20210214232236323"></p>
<h3 id="10）添加速度控制"><a href="#10）添加速度控制" class="headerlink" title="10）添加速度控制"></a>10）添加速度控制</h3><h4 id="增加键盘按下事件响应"><a href="#增加键盘按下事件响应" class="headerlink" title="增加键盘按下事件响应"></a>增加键盘按下事件响应</h4><ul>
<li>“↑”：纵向绝对速度增加一个像素（纵向加速）</li>
<li>“↓”：纵向绝对速度减少一个像素（纵向减速）</li>
<li>“←”：纵向绝对速度减少一个像素（横向减速）</li>
<li>“→”：横向绝对速度增加一个像素（横向加速）</li>
</ul>
<p>增添如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:  <span class="comment"># 加入键盘按下事件响应</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_LEFT:</span><br><span class="line">        speed[<span class="number">0</span>] = speed[<span class="number">0</span>] <span class="keyword">if</span> speed[<span class="number">0</span>] == <span class="number">0</span> <span class="keyword">else</span> (<span class="built_in">abs</span>(speed[<span class="number">0</span>]) - <span class="number">1</span>) * <span class="built_in">int</span>(speed[<span class="number">0</span>] / <span class="built_in">abs</span>(speed[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        speed[<span class="number">0</span>] = speed[<span class="number">0</span>] + <span class="number">1</span> <span class="keyword">if</span> speed[<span class="number">0</span>] &gt;= <span class="number">0</span> <span class="keyword">else</span> speed[<span class="number">0</span>] - <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_UP:</span><br><span class="line">        speed[<span class="number">1</span>] = speed[<span class="number">1</span>] + <span class="number">1</span> <span class="keyword">if</span> speed[<span class="number">1</span>] &gt;= <span class="number">0</span> <span class="keyword">else</span> speed[<span class="number">1</span>] - <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_DOWN:</span><br><span class="line">        speed[<span class="number">1</span>] = speed[<span class="number">1</span>] <span class="keyword">if</span> speed[<span class="number">1</span>] == <span class="number">0</span> <span class="keyword">else</span> (<span class="built_in">abs</span>(speed[<span class="number">1</span>]) - <span class="number">1</span>) * <span class="built_in">int</span>(speed[<span class="number">1</span>] / <span class="built_in">abs</span>(speed[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>
<h2 id="3、屏幕绘制机制"><a href="#3、屏幕绘制机制" class="headerlink" title="3、屏幕绘制机制"></a>3、屏幕绘制机制</h2><h3 id="1）游戏屏幕的控制——pygame-display"><a href="#1）游戏屏幕的控制——pygame-display" class="headerlink" title="1）游戏屏幕的控制——pygame.display()"></a>1）游戏屏幕的控制——pygame.display()</h3><h3 id="2）控制需求"><a href="#2）控制需求" class="headerlink" title="2）控制需求"></a>2）控制需求</h3><ul>
<li>游戏全屏</li>
<li>游戏屏幕大小可调节</li>
<li>游戏屏幕无边框</li>
<li>更改游戏标题栏内容</li>
<li>更改游戏图标</li>
</ul>
<h3 id="3）屏幕绘制的重要函数"><a href="#3）屏幕绘制的重要函数" class="headerlink" title="3）屏幕绘制的重要函数"></a>3）屏幕绘制的重要函数</h3><h4 id="Ⅰ-屏幕尺寸和模式"><a href="#Ⅰ-屏幕尺寸和模式" class="headerlink" title="Ⅰ. 屏幕尺寸和模式"></a>Ⅰ. 屏幕尺寸和模式</h4><ul>
<li><strong>pygame.display.set_mode(r=(0,0),flags=0)</strong> 设置相关屏幕模式<ul>
<li>r是游戏的分辨率，采用（width，height）方式输入</li>
<li>flags用来控制显示类型，可用 | 组合使用，常用的显示标签如下：<br>pygame.RESIZABLE 窗口大小可调<br>pygame.NOFRAME  窗口没有边界显示<br>pygame,FULLSCREEN   窗口全屏显示</li>
<li>注：每种显示方式要配合相应的处理机制。比如大小可调时要有尺寸变化的响应：对扩张显示界面的刷新，对扩张/缩小显示界面的游戏响应<ul>
<li>pygame.VIDEORESIZE是一种窗口大小改变的事件。事件发生后，返回event.size元组，包含新窗口的宽度和高度<br>.size[0] 宽度，也可以用event.w<br>.size[1] 高度，也可以用event.h<br>返回参数只在事件发生时有用</li>
</ul>
</li>
</ul>
</li>
<li><strong>pygame.display.Info()</strong> 生成屏幕相关信息<ul>
<li>产生一个显示信息对象videoInfo，表达当前屏幕的参数信息<br>在.set_mode()之前调用，则显示当前系统参数信息，参数很多，其中有两个十分重要，如下：<br>current_w：当前显示模式或窗口的像素宽度<br>current_h：当前显示模式或窗口的像素高度</li>
</ul>
</li>
</ul>
<h4 id="Ⅱ-窗口标题和图标"><a href="#Ⅱ-窗口标题和图标" class="headerlink" title="Ⅱ. 窗口标题和图标"></a>Ⅱ. 窗口标题和图标</h4><ul>
<li><strong>pygame.display.set_caption(title,icontitle=None)</strong> 设置标题信息<ul>
<li>title设置窗口标题内容</li>
<li>icontitle 设置图标化后的小标题，可选，部分系统没有</li>
<li>pygame.display.get_caption()返回当前设置窗口的标题及小标题内容，返回结构为(title,icontitle)<ul>
<li>用途：该函数与游戏交互逻辑相配合，可以根据游戏情节修改标题内容</li>
</ul>
</li>
<li>pygame.display.set_icon() 设置窗口图标效果，图标是一个surface对象</li>
<li>pygame.display.get_icon() 获得图标</li>
</ul>
</li>
</ul>
<h4 id="Ⅲ-窗口感知和刷新"><a href="#Ⅲ-窗口感知和刷新" class="headerlink" title="Ⅲ. 窗口感知和刷新"></a>Ⅲ. 窗口感知和刷新</h4><ul>
<li><p>**pygame.display.get_active()**当窗口在系统中显示（屏幕绘制 / 非图标化）时返回True。否则返回False     </p>
</li>
<li><p><strong>pygame.display.flip()</strong> 重绘整个窗口</p>
</li>
<li><p>**pygame.display.update()**只重绘改变的部分</p>
</li>
</ul>
<h4 id="Ⅳ-pygame还提供OpenGL和硬件加速"><a href="#Ⅳ-pygame还提供OpenGL和硬件加速" class="headerlink" title="Ⅳ. pygame还提供OpenGL和硬件加速"></a>Ⅳ. pygame还提供OpenGL和硬件加速</h4><h2 id="4、事件处理机制"><a href="#4、事件处理机制" class="headerlink" title="4、事件处理机制"></a>4、事件处理机制</h2><h3 id="1）pygame中的事件类型"><a href="#1）pygame中的事件类型" class="headerlink" title="1）pygame中的事件类型"></a>1）pygame中的事件类型</h3><p>① 系统    ② 键盘    ③ 鼠标    ④ 游戏杆    ⑤ 窗口    ⑥ 用户定义</p>
<h3 id="2）事件处理的重要函数"><a href="#2）事件处理的重要函数" class="headerlink" title="2）事件处理的重要函数"></a>2）事件处理的重要函数</h3><h4 id="Ⅰ-处理事件"><a href="#Ⅰ-处理事件" class="headerlink" title="Ⅰ. 处理事件"></a>Ⅰ. 处理事件</h4><ul>
<li><p><strong>pygame.event.get()</strong></p>
<ul>
<li><p>从事件队列中获得事件列表，即获得所有队列的事件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">    <span class="keyword">if</span> event.<span class="built_in">type</span> == pyagme.QUIT:</span><br><span class="line">      sys.exit()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>增加参数，获得某类或某些类事件<br>pygame.event.get(type)<br>pygame.event.get(typelist)    </p>
</li>
<li><p><strong>pygame.event.poll()</strong></p>
<ul>
<li><p>从事件队列中获取一个事件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">While <span class="literal">True</span>:</span><br><span class="line">   event = pygame.event.poll()</span><br></pre></td></tr></table></figure></li>
<li><p>获取的事件将从队列中删除</p>
</li>
<li><p>如果事件队列为空，则返回event.NOEVENT        </p>
</li>
</ul>
</li>
<li><p><strong>pygame.event.clear()</strong></p>
<ul>
<li>从事件队列中删除事件，默认删除所有事件</li>
<li>该函数与pygame.event.get()类似，区别仅是不对事件进行处理</li>
<li>可以增加参数，指定删除某类或某些类事件：<br>pygame.event.clear(type)<br>pygame.event.clear(typelist)</li>
</ul>
</li>
</ul>
<h4 id="Ⅱ-操作事件队列"><a href="#Ⅱ-操作事件队列" class="headerlink" title="Ⅱ. 操作事件队列"></a>Ⅱ. 操作事件队列</h4><ul>
<li><strong>pygame.event.set_blocked(type or typelist)</strong> 控制哪些类型事件不允许被保存到事件队列中</li>
<li><strong>pygame.event.set_allowed(type or typelist)</strong> 控制哪些类型事件允许被保存到事件队列中</li>
<li>**pygame.event.get_blocked() **测试某个事件类型是否被事件队列所禁止，如果事件队列被禁止返回True，否则返回False</li>
</ul>
<h4 id="Ⅲ-生成事件处理函数"><a href="#Ⅲ-生成事件处理函数" class="headerlink" title="Ⅲ. 生成事件处理函数"></a>Ⅲ. 生成事件处理函数</h4><ul>
<li>**pygame.event.post(event) **产生一个事件并将其放入事件队列中，一般用于放置用户自定义事件（pygame.USEREVENT）<br>也可以用于放置系统定义事件（如鼠标或键盘等），给定参数</li>
<li><strong>pygame.event.Event(type,dict)</strong> 创建一个给定类型的事件<br>其中，事件的属性和值都采用字典类型赋值，属性名采用字符串形式，如果创建已有事件，属性需要一致</li>
</ul>
<h4 id="Ⅲ-鼠标事件及类型"><a href="#Ⅲ-鼠标事件及类型" class="headerlink" title="Ⅲ. 鼠标事件及类型"></a>Ⅲ. 鼠标事件及类型</h4><ul>
<li><strong>pygame.event.MOUSEMOTION()</strong> 鼠标移动事件，返回三个值：<ul>
<li>event.pos 鼠标当前的坐标值(x,y)，相对于窗口左上角</li>
<li>event.rel 鼠标相对移动距离(x,y)，相对于上次事件</li>
<li>event.buttons 鼠标按钮状态(a,b,c) 对应鼠标三个键，鼠标移动时这三个键处于按下状态，对应的位置为1，反之为0</li>
</ul>
</li>
<li><strong>pygame.event.MOUSEBUTTONUP()</strong>  鼠标释放事件<ul>
<li>event.pos 鼠标当前坐标值(x,y)，相对于窗口左上角</li>
<li>event.button 鼠标按下键编号n，取值0/1/2，分别对应三个键</li>
</ul>
</li>
<li><strong>pygame.event.MOUSEBUTTONDOWN()</strong> 鼠标按下事件<ul>
<li>event.pos 鼠标当前坐标值(x,y)，相对于窗口左上角</li>
<li>event.button 鼠标按下键编号n，取值为整数，左键为1，右键为3，设备相关</li>
</ul>
</li>
</ul>
<h3 id="3）代码演示"><a href="#3）代码演示" class="headerlink" title="3）代码演示"></a>3）代码演示</h3><p>描述：模拟鼠标按下、抬起、移动事件，打印对应坐标以及按键编号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">size = width, height = <span class="number">600</span>, <span class="number">400</span></span><br><span class="line">screen = pygame.display.set_mode(size)</span><br><span class="line">pygame.display.set_caption(<span class="string">&quot;pygame游戏之旅&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:</span><br><span class="line">            <span class="keyword">if</span> event.unicode == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                print(<span class="string">&quot;[KEYDOWN]:&quot;</span>, <span class="string">&quot;#&quot;</span>, event.key, event.mod)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&quot;[KEYDOWN]:&quot;</span>, event.unicode, event.key, event.mod)</span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.MOUSEMOTION:</span><br><span class="line">            print(<span class="string">&#x27;[MOUSEMOTION]:&#x27;</span>, event.pos, event.rel, event.buttons)</span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">            print(<span class="string">&#x27;[MOUSEBUTTONDOWN]:&#x27;</span>, event.pos, event.button)</span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.MOUSEBUTTONUP:</span><br><span class="line">            print(<span class="string">&#x27;[MOUSEBUTTONUP]:&#x27;</span>, event.pos, event.button)</span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure>
<h3 id="4）用户自定义事件演示"><a href="#4）用户自定义事件演示" class="headerlink" title="4）用户自定义事件演示"></a>4）用户自定义事件演示</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">size = width, height = <span class="number">600</span>, <span class="number">400</span></span><br><span class="line">screen = pygame.display.set_mode(size)</span><br><span class="line">pygame.display.set_caption(<span class="string">&quot;pygame游戏之旅&quot;</span>)</span><br><span class="line">fps = <span class="number">1</span></span><br><span class="line">fclock = pygame.time.Clock()</span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    uevent = pygame.event.Event(pygame.KEYDOWN, &#123;<span class="string">&#x27;unicode&#x27;</span>: <span class="number">123</span>, <span class="string">&#x27;key&#x27;</span>: pygame.K_SPACE, <span class="string">&#x27;mod&#x27;</span>: pygame.KMOD_ALT&#125;)	<span class="comment"># 自定义按键事件</span></span><br><span class="line">    pygame.event.post(uevent)	<span class="comment"># 放入事件队列</span></span><br><span class="line">    num = num + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:	<span class="comment"># 事件被处理，打印输出</span></span><br><span class="line">            <span class="keyword">if</span> event.unicode == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                print(<span class="string">&#x27;[KEYDOWN&#123;&#125;]:&#x27;</span>.<span class="built_in">format</span>(num), <span class="string">&quot;#&quot;</span>, event.key, event.mod)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;[KEYDOWN&#123;&#125;]:&#x27;</span>.<span class="built_in">format</span>(num), event.unicode, event.key, event.mod)</span><br><span class="line">    pygame.display.update()</span><br><span class="line">    fclock.tick(fps)</span><br></pre></td></tr></table></figure>
<h3 id="5）壁球小游戏扩展"><a href="#5）壁球小游戏扩展" class="headerlink" title="5）壁球小游戏扩展"></a>5）壁球小游戏扩展</h3><p>扩展需求：鼠标左键摆放壁球，按键按下时壁球停止运动，按键按下并且移动时，壁球随着鼠标移动，当释放时壁球继续运动</p>
<p>代码略…</p>
<h2 id="5、色彩与绘图机制"><a href="#5、色彩与绘图机制" class="headerlink" title="5、色彩与绘图机制"></a>5、色彩与绘图机制</h2><h3 id="1）色彩表达：pygame-Color"><a href="#1）色彩表达：pygame-Color" class="headerlink" title="1）色彩表达：pygame.Color"></a>1）色彩表达：pygame.Color</h3><ul>
<li>Color类用于表达色彩，使用RGB或RGBA色彩模式，A可选</li>
<li>Color类可以用色彩名字、RGB值、HTML色彩格式等方式定义<ul>
<li>Color(name)    eg.Color(‘green’)    </li>
<li>Color(r,g,b,a)  eg.Color(190,190,190,255)</li>
<li>Color(rgbvalue) eg.Color(‘#BEBEBEFF’)，对应十六进制表示</li>
</ul>
</li>
<li>RGBA多了一个alpha通道，表示不透明度，取值0-255，通道值越大，不透明度越高</li>
</ul>
<h3 id="2）图形绘制机制"><a href="#2）图形绘制机制" class="headerlink" title="2）图形绘制机制"></a>2）图形绘制机制</h3><ul>
<li>pygame.Rect表达一个矩形区域的类，用来存储坐标和长度信息</li>
<li>pygame利用Rect类来操作图形/图像元素，提供如下属性：size、width、height、top、left、bottom、right、topleft…<br>提供如下方法：.copy()、.move()、…</li>
<li>pygame.draw可绘制多种图形，如<ul>
<li>.rect(Surface，color，Rect，width=0)矩形：Surface矩形的绘制屏幕、color矩形的绘制颜色、Rect矩形的绘制区域、绘制边缘的宽度默认为0即填充图形             </li>
<li>.polygon(Surface,color,pointlist,width=0) 多边形   </li>
<li>.circle(Surface,color,pos,radius,width=0) 圆形      </li>
<li>.ellipse(Surface,color,Rect,width=0) 椭圆形</li>
<li>.line() 直线</li>
</ul>
</li>
</ul>
<h3 id="3）图形绘制示例"><a href="#3）图形绘制示例" class="headerlink" title="3）图形绘制示例"></a>3）图形绘制示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">pygame.mixer.init()  <span class="comment"># 初始化混音器模块</span></span><br><span class="line">bg_size = width, height = <span class="number">600</span>, <span class="number">400</span></span><br><span class="line">screen = pygame.display.set_mode(bg_size)</span><br><span class="line">pygame.display.set_caption(<span class="string">&quot;pygame图形绘制&quot;</span>)  <span class="comment"># 设置窗口的标题</span></span><br><span class="line">GOLD = <span class="number">255</span>, <span class="number">251</span>, <span class="number">0</span></span><br><span class="line">RED = pygame.Color(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">GREEN = pygame.Color(<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">WHITE = <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span></span><br><span class="line">e1rect = pygame.draw.ellipse(screen, GREEN, (<span class="number">50</span>, <span class="number">50</span>, <span class="number">500</span>, <span class="number">3000</span>), <span class="number">3</span>)</span><br><span class="line">c1rect = pygame.draw.circle(screen, GOLD, (<span class="number">200</span>, <span class="number">180</span>), <span class="number">30</span>, <span class="number">5</span>)</span><br><span class="line">c2rect = pygame.draw.circle(screen, GOLD, (<span class="number">400</span>, <span class="number">180</span>), <span class="number">30</span>)</span><br><span class="line">r1rect = pygame.draw.rect(screen, RED, (<span class="number">170</span>, <span class="number">130</span>, <span class="number">60</span>, <span class="number">10</span>), <span class="number">3</span>)</span><br><span class="line">r2rect = pygame.draw.rect(screen, RED, (<span class="number">370</span>, <span class="number">130</span>, <span class="number">60</span>, <span class="number">10</span>))</span><br><span class="line">plist = [(<span class="number">295</span>, <span class="number">178</span>), (<span class="number">285</span>, <span class="number">250</span>), (<span class="number">260</span>, <span class="number">280</span>), (<span class="number">340</span>, <span class="number">280</span>), (<span class="number">315</span>, <span class="number">250</span>), (<span class="number">305</span>, <span class="number">170</span>)]</span><br><span class="line">l1rect = pygame.draw.lines(screen, GOLD, <span class="literal">True</span>, plist, <span class="number">2</span>)</span><br><span class="line">a1rect = pygame.draw.arc(screen, RED, (<span class="number">200</span>, <span class="number">220</span>, <span class="number">200</span>, <span class="number">100</span>), <span class="number">1.4</span> * pi, <span class="number">1.9</span> * pi, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">    pygame.display.update()</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="/2021/02/14/pygame-study/image-20210215142257889.png" alt="image-20210215142257889"></p>
<h3 id="4）文字绘制"><a href="#4）文字绘制" class="headerlink" title="4）文字绘制"></a>4）文字绘制</h3><h4 id="Ⅰ-文字绘制机制："><a href="#Ⅰ-文字绘制机制：" class="headerlink" title="Ⅰ. 文字绘制机制："></a>Ⅰ. 文字绘制机制：</h4><p>使用pygame.freetype向屏幕上绘制特定字体的文字（需要import引入）<br><code>注：文字不能直接print()，而是用像素根据字体点阵图绘制</code></p>
<h4 id="Ⅱ-生成Font对象"><a href="#Ⅱ-生成Font对象" class="headerlink" title="Ⅱ. 生成Font对象"></a>Ⅱ. 生成Font对象</h4><ul>
<li><p>**pygame.freetype.Font(file,size=0)**，根据字体和字号生成一个Font对象</p>
<ul>
<li><p>file：字体类型名称或路径，注意字体是否支持中文</p>
</li>
<li><p> size：字体的大小</p>
</li>
</ul>
</li>
<li><p>然后调用Font.render_to()或Font.render(）</p>
<ul>
<li>**Font.render_to(surf，dest，text，fgcolor=None，bgcolor=None，rotation=0，size=0)**，返回Rect类型     <ul>
<li>surf：绘制字体的平面，Surface对象</li>
<li>dest：在平面中的具体位置，（x，y）</li>
<li>text：绘制的文字内容</li>
<li>fgcolor：文字颜色</li>
<li>bgcolor：背景颜色</li>
<li>rotation：逆时针的旋转角度，取值0-359，部分字体可旋转</li>
<li>size：文字大小，赋值该参数将覆盖Font中的设定值</li>
</ul>
</li>
<li>**Font.render(text,fgcolor=None,bgcolor=None,rotation=0,size=0)**绘制具体文字，返回（Surface,Rect）</li>
</ul>
</li>
</ul>
<h4 id="Ⅲ-Surface讲解"><a href="#Ⅲ-Surface讲解" class="headerlink" title="Ⅲ. Surface讲解"></a>Ⅲ. Surface讲解</h4><ul>
<li><strong>pygame.Surface</strong> 称为绘图层，或绘图平面，或图层<ul>
<li>用于表示图形、文字或图像的绘制效果，与当前屏幕主图层可以并列存在，如果不绘制在主图层上，则不会被显示</li>
</ul>
</li>
<li>主图层由pygame.display.set_mode()生成<ul>
<li>在主图层上绘制其他图层使用**.blit()**方法：screen.blit(pygame.Surface,pygame.Rect)</li>
</ul>
</li>
</ul>
<h3 id="5）将碰壁球用文字来代替"><a href="#5）将碰壁球用文字来代替" class="headerlink" title="5）将碰壁球用文字来代替"></a>5）将碰壁球用文字来代替</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame.freetype</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">bg_size = width, height = <span class="number">600</span>, <span class="number">400</span></span><br><span class="line">screen = pygame.display.set_mode(bg_size)</span><br><span class="line">pygame.display.set_caption(<span class="string">&#x27;crash character game&#x27;</span>)</span><br><span class="line">ball = pygame.image.load(<span class="string">&#x27;../squash.png&#x27;</span>)</span><br><span class="line">ballrect = ball.get_rect()</span><br><span class="line">speed = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">GOLD = <span class="number">255</span>, <span class="number">251</span>, <span class="number">0</span></span><br><span class="line">BLACK = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">pos = [<span class="number">230</span>, <span class="number">160</span>]</span><br><span class="line">f1 = pygame.freetype.Font(<span class="string">&#x27;..\\font\\font.ttf&#x27;</span>, <span class="number">36</span>)</span><br><span class="line">f1rect = f1.render_to(screen, pos, <span class="string">&#x27;ACPASSER&#x27;</span>, fgcolor=GOLD, size=<span class="number">50</span>)</span><br><span class="line">fps = <span class="number">300</span>  <span class="comment"># Frames per Second 每秒帧率参数</span></span><br><span class="line">fclock = pygame.time.Clock()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:  <span class="comment"># 加入键盘按下事件响应</span></span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_LEFT:</span><br><span class="line">                speed[<span class="number">0</span>] = speed[<span class="number">0</span>] <span class="keyword">if</span> speed[<span class="number">0</span>] == <span class="number">0</span> <span class="keyword">else</span> (<span class="built_in">abs</span>(speed[<span class="number">0</span>]) - <span class="number">1</span>) * <span class="built_in">int</span>(speed[<span class="number">0</span>] / <span class="built_in">abs</span>(speed[<span class="number">0</span>]))</span><br><span class="line">            <span class="keyword">elif</span> event.key == pygame.K_RIGHT:</span><br><span class="line">                print(<span class="string">&#x27;速度增加&#x27;</span>)</span><br><span class="line">                speed[<span class="number">0</span>] = speed[<span class="number">0</span>] + <span class="number">1</span> <span class="keyword">if</span> speed[<span class="number">0</span>] &gt;= <span class="number">0</span> <span class="keyword">else</span> speed[<span class="number">0</span>] - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> event.key == pygame.K_UP:</span><br><span class="line">                speed[<span class="number">1</span>] = speed[<span class="number">1</span>] + <span class="number">1</span> <span class="keyword">if</span> speed[<span class="number">1</span>] &gt;= <span class="number">0</span> <span class="keyword">else</span> speed[<span class="number">1</span>] - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> event.key == pygame.K_DOWN:</span><br><span class="line">                speed[<span class="number">1</span>] = speed[<span class="number">1</span>] <span class="keyword">if</span> speed[<span class="number">1</span>] == <span class="number">0</span> <span class="keyword">else</span> (<span class="built_in">abs</span>(speed[<span class="number">1</span>]) - <span class="number">1</span>) * <span class="built_in">int</span>(speed[<span class="number">1</span>] / <span class="built_in">abs</span>(speed[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">if</span> pos[<span class="number">0</span>] &lt;= <span class="number">0</span> <span class="keyword">or</span> pos[<span class="number">0</span>] + f1rect.width &gt; width:</span><br><span class="line">        speed[<span class="number">0</span>] = -speed[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> pos[<span class="number">1</span>] &lt;= <span class="number">0</span> <span class="keyword">or</span> pos[<span class="number">1</span>] + f1rect.height &gt; height:</span><br><span class="line">        speed[<span class="number">1</span>] = -speed[<span class="number">1</span>]</span><br><span class="line">    pos[<span class="number">0</span>] = pos[<span class="number">0</span>] + speed[<span class="number">0</span>]</span><br><span class="line">    pos[<span class="number">1</span>] = pos[<span class="number">1</span>] + speed[<span class="number">1</span>]</span><br><span class="line">    screen.fill(BLACK)</span><br><span class="line">    f1rect = f1.render_to(screen, pos, <span class="string">&#x27;ACPASSER&#x27;</span>, fgcolor=GOLD, size=<span class="number">50</span>)</span><br><span class="line">    pygame.display.update()</span><br><span class="line">    fclock.tick(fps)</span><br></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="/2021/02/14/pygame-study/image-20210215143227205.png" alt="image-20210215143227205"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pygame</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统存储管理实验</title>
    <url>/2021/02/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="操作系统——存储管理大作业"><a href="#操作系统——存储管理大作业" class="headerlink" title="操作系统——存储管理大作业"></a>操作系统——存储管理大作业</h1><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><ul>
<li><p>用malloc申请一块1M字节的内存空间作为自己的空闲内存</p>
</li>
<li><p>实现自己的void *myalloc(int size) 和int myfree(void *ptr)函数，用于分配和回收内存，替代malloc和free函数</p>
</li>
<li><p>采用最先适应、最优适应或最差适应分配算法对空闲内存进行管理</p>
</li>
</ul>
<p><strong>注意</strong>：实现之前一定要理解malloc和free的底层实现原理</p>
<a id="more"></a>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="定义BlockNode存储内存块信息"><a href="#定义BlockNode存储内存块信息" class="headerlink" title="定义BlockNode存储内存块信息"></a>定义BlockNode存储内存块信息</h3><p>先通过_aligned_malloc申请一块8字节对齐的内存(也可以采用VirtualAlloc分配)，然后实现malloc和free函数对这块内存进行管理。</p>
<p>这里将内存以块(Block)的方式进行管理，每块内存分为标记区(Header)和数据区(Data)，块的定义如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 内存块分为标记区(Header)和数据区(Data)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BlockNode</span>&#123;</span>	<span class="comment">//Header</span></span><br><span class="line">	BlockNode* m_next;</span><br><span class="line">	<span class="keyword">size_t</span> m_size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>Header中记录了指向下一块内存的指针和一个size_t类型的m_size记录这块内存数据的大小</p>
<h3 id="构造MemAllocator类管理内存"><a href="#构造MemAllocator类管理内存" class="headerlink" title="构造MemAllocator类管理内存"></a>构造MemAllocator类管理内存</h3><p>定义一个MemAllocator类，类中维持一个指向所有空闲内存块的m_freeList。在类的构造函数中通过_aligned_malloc申请一块8字节对齐的内存，除了申请内存外，构造构造函数还负责初始化m_freeList(直接在申请的内存上构建一个空闲块并将其添加到freelist中)，并在析构函数中释放了这块内存。</p>
<p>m_numAllocations记录了申请和释放内存的次数(每次申请内存时加一，释放时减一)，m_remainSize记录了空闲块数据区的总大小。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemAllocator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	MemAllocator(<span class="keyword">size_t</span> pSize, SEARCH_MODE pMode) &#123;</span><br><span class="line">		m_size = pSize * <span class="number">8</span>;</span><br><span class="line">		m_data = _aligned_malloc(m_size, <span class="number">8</span>);<span class="comment">//申请一块8字节对齐的内存</span></span><br><span class="line">		m_mode = pMode;</span><br><span class="line">		<span class="built_in">memset</span>(m_data, <span class="number">0</span>, m_size);</span><br><span class="line">		InitFreeList(m_data, m_size);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;申请内存空间大小为：&quot;</span> &lt;&lt; m_size &lt;&lt; <span class="string">&quot;B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;内存空间实际剩余为：&quot;</span> &lt;&lt; m_remainSize &lt;&lt; <span class="string">&quot;B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;内存空间首地址为：0x&quot;</span> &lt;&lt; m_data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//初始化m_freeList</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">InitFreeList</span><span class="params">(<span class="keyword">void</span>* pStart, <span class="keyword">size_t</span> pSize)</span></span>&#123;</span><br><span class="line">		assert(pStart != <span class="literal">nullptr</span>);</span><br><span class="line">		m_numAllocations = <span class="number">0</span>;</span><br><span class="line">		m_remainSize = pSize - <span class="keyword">sizeof</span>(BlockNode);</span><br><span class="line">		m_freeList = <span class="keyword">static_cast</span>&lt;BlockNode*&gt;(pStart);</span><br><span class="line">		m_freeList-&gt;m_next = <span class="literal">nullptr</span>;</span><br><span class="line">		m_freeList-&gt;m_size = m_remainSize;</span><br><span class="line">	&#125;</span><br><span class="line">	~MemAllocator() &#123;</span><br><span class="line">		<span class="keyword">if</span> (m_data != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">			_aligned_free(m_data);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	BlockNode* m_freeList;<span class="comment">//指向所有空闲内存块</span></span><br><span class="line">	<span class="keyword">void</span>* m_data;</span><br><span class="line">	<span class="keyword">size_t</span> m_size;</span><br><span class="line">	<span class="keyword">size_t</span> m_numAllocations; <span class="comment">//记录申请和释放内存的次数</span></span><br><span class="line">	<span class="keyword">size_t</span> m_remainSize; <span class="comment">//记录空闲块数据区的总大小</span></span><br><span class="line">	SEARCH_MODE m_mode;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>每次申请内存时需要在FreeList中找到合适大小的空闲内存块，这是可以采用两种不同的查找方法：</p>
<ul>
<li>First fit，返回<strong>第一个</strong>数据区大小大于等于所申请内存的空闲块。</li>
<li>Best fit，检查所有块，返回数据区和所申请内存大小差距<strong>最小</strong>且大于等于所需内存的空闲块。</li>
<li>Worst fit，和Best类似，返回数据区和所申请内存大小差距<strong>最大</strong>且大于等于所需内存的空闲块（代码略）。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">SEARCH_MODE</span>&#123;</span>	<span class="comment">//定义三种内存分配算法</span></span><br><span class="line">	FIRST_FIT,</span><br><span class="line">	BEST_FIT,</span><br><span class="line">    WORST_FIT	<span class="comment">//和BEST_FIT类似，这里未实现</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetProperBlock</span><span class="params">(<span class="keyword">size_t</span> pSize, SEARCH_MODE pMode, BlockNode** pPrevNode, BlockNode** pFoundNode)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (pMode == SEARCH_MODE::FIRST_FIT) &#123;</span><br><span class="line">			<span class="keyword">return</span> GetFirstFitBlock(pSize, pPrevNode, pFoundNode);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> GetBestFitBlock(pSize, pPrevNode, pFoundNode);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>First fit的查找实现如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetFirstFitBlock</span><span class="params">(<span class="keyword">size_t</span> pSize, BlockNode** pPrevNode, BlockNode** pFoundNode)</span> </span>&#123;</span><br><span class="line">		BlockNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">		BlockNode* curr = m_freeList;</span><br><span class="line">		<span class="keyword">bool</span> success = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (curr != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (curr-&gt;m_size &gt;= pSize)&#123;</span><br><span class="line">				success = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			prev = curr;</span><br><span class="line">			curr = curr-&gt;m_next;</span><br><span class="line">		&#125;</span><br><span class="line">		*pPrevNode = prev;</span><br><span class="line">		*pFoundNode = curr;</span><br><span class="line">		<span class="keyword">return</span> success;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>Best fit的查找实现如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetBestFitBlock</span><span class="params">(<span class="keyword">size_t</span> pSize, BlockNode** pPrevNode, BlockNode** pFoundNode)</span></span>&#123;</span><br><span class="line">		BlockNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">		BlockNode* curr = m_freeList;</span><br><span class="line">		<span class="keyword">bool</span> success = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		BlockNode* best = <span class="literal">nullptr</span>;</span><br><span class="line">		BlockNode* bestPrev = <span class="literal">nullptr</span>;</span><br><span class="line">		<span class="keyword">size_t</span> bestSize = m_size;</span><br><span class="line">		<span class="keyword">while</span> (curr != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			<span class="keyword">size_t</span> currSize = curr-&gt;m_size;</span><br><span class="line">			<span class="keyword">if</span> (currSize &gt;= pSize)&#123;</span><br><span class="line">				success = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">if</span> (currSize &lt; bestSize)&#123;</span><br><span class="line">					bestSize = currSize;</span><br><span class="line">					best = curr;</span><br><span class="line">					bestPrev = prev;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			prev = curr;</span><br><span class="line">			curr = curr-&gt;m_next;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		*pPrevNode = bestPrev;</span><br><span class="line">		*pFoundNode = best;</span><br><span class="line">		<span class="keyword">return</span> success;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SplitBlock"><a href="#SplitBlock" class="headerlink" title="SplitBlock"></a>SplitBlock</h3><p>若找到的空闲内存块的大小size &gt; 所需内存大小+sizeof(BlockNode)，则可以将该空闲块分裂为两个新的块，并将新分出的块插入到m_freeList中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SplitBlock</span><span class="params">(BlockNode* pOld, <span class="keyword">size_t</span> pSize)</span></span>&#123;</span><br><span class="line">		assert(pOld != <span class="literal">nullptr</span>);</span><br><span class="line">		<span class="keyword">size_t</span> oldBlockSize = pOld-&gt;m_size;</span><br><span class="line">		assert(oldBlockSize &gt; pSize);</span><br><span class="line">		BlockNode* newBlock = pOld + (pSize + <span class="keyword">sizeof</span>(BlockNode)) / <span class="number">8</span>;</span><br><span class="line">		newBlock-&gt;m_size = oldBlockSize - pSize - <span class="keyword">sizeof</span>(BlockNode);</span><br><span class="line">		pOld-&gt;m_size = pSize;</span><br><span class="line">		InsertNode(pOld, newBlock);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Split block&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>m_freeList的插入和删除操作定义如下（均需要插入或删除节点的前驱结点，若前驱结点为空则需要操作的节点为m_freeList的头节点）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveNode</span><span class="params">(BlockNode* pPrev, <span class="keyword">const</span> BlockNode* pDelete)</span></span>&#123;</span><br><span class="line">		assert(pDelete != <span class="literal">nullptr</span>);</span><br><span class="line">		<span class="keyword">if</span> (pPrev != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			pPrev-&gt;m_next = pDelete-&gt;m_next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			m_freeList = pDelete-&gt;m_next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">InsertNode</span><span class="params">(BlockNode* pPrev, BlockNode* pNew)</span></span>&#123;</span><br><span class="line">		assert(pNew != <span class="literal">nullptr</span>);</span><br><span class="line">		<span class="keyword">if</span> (pPrev != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			pNew-&gt;m_next = pPrev-&gt;m_next;</span><br><span class="line">			pPrev-&gt;m_next = pNew;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			pNew-&gt;m_next = m_freeList;</span><br><span class="line">			m_freeList = pNew;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="myalloc实现"><a href="#myalloc实现" class="headerlink" title="myalloc实现"></a>myalloc实现</h3><p>myalloc的完整定义如下(myalloc时每次申请的内存大小会被缩放为8的倍数)：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">myalloc</span><span class="params">(<span class="keyword">size_t</span> pSize)</span></span>&#123;</span><br><span class="line">		<span class="keyword">size_t</span> dataSize = pSize * <span class="number">8</span>;</span><br><span class="line">		<span class="keyword">if</span> (dataSize &lt;= m_remainSize)&#123;</span><br><span class="line">			BlockNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">			BlockNode* found = <span class="literal">nullptr</span>;</span><br><span class="line">			<span class="keyword">if</span> (GetProperBlock(dataSize, m_mode, &amp;prev, &amp;found))&#123;</span><br><span class="line">				assert(found != <span class="literal">nullptr</span>);</span><br><span class="line">				<span class="keyword">size_t</span> founBlockSize = found-&gt;m_size;</span><br><span class="line">				<span class="keyword">size_t</span> allocateSize = founBlockSize + <span class="keyword">sizeof</span>(BlockNode);</span><br><span class="line">				<span class="keyword">if</span> (founBlockSize &gt; (dataSize + <span class="keyword">sizeof</span>(BlockNode)))&#123;</span><br><span class="line">					SplitBlock(found, dataSize);</span><br><span class="line">					allocateSize = dataSize + <span class="keyword">sizeof</span>(BlockNode);</span><br><span class="line">				&#125;</span><br><span class="line">				RemoveNode(prev, found);</span><br><span class="line">				m_remainSize -= allocateSize;</span><br><span class="line">				++m_numAllocations;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Malloc success, num allocations: &quot;</span> &lt;&lt; m_numAllocations &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Remain size: &quot;</span> &lt;&lt; m_remainSize &lt;&lt; <span class="string">&quot;B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="keyword">return</span> found + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Malloc failed!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Remain size: &quot;</span> &lt;&lt; m_remainSize &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>若所需内存为0或者所需内存大于剩余总空闲内存则直接返回空指针(myalloc(0)是未定义型为也可以返回一个无法使用但可以被释放的内存块，即只有Header的块)，分配成功后将符合要求的空闲内存块移出m_freeList，并返回指向该块数据区的指针。</p>
<h3 id="myfree实现"><a href="#myfree实现" class="headerlink" title="myfree实现"></a>myfree实现</h3><p>释放由myalloc所申请的内存时，通过指针比较，找到该内存块在m_freeList中的前驱节点(m_freeList中的节点以地址从小到大的顺序排列)，查找前驱节点的函数定义如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetPrevNode</span><span class="params">(BlockNode** pPrev, BlockNode* pNode)</span></span>&#123;</span><br><span class="line">		assert(pNode != <span class="literal">nullptr</span>);</span><br><span class="line">		<span class="keyword">bool</span> success = <span class="literal">false</span>;</span><br><span class="line">		BlockNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">		BlockNode* curr = m_freeList;</span><br><span class="line">		<span class="keyword">while</span> (curr != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (pNode &lt;= curr)&#123;</span><br><span class="line">				success = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			prev = curr;</span><br><span class="line">			curr = curr-&gt;m_next;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		*pPrev = prev;</span><br><span class="line">		<span class="keyword">return</span> success;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>有了前驱节点和需要释放的内存块后，可以将需要释放的内存块插入到m_freeList中，这时可以判断所需释放的内存块的前部和后部的内存块(不是m_freeList中的前驱或后驱节点，而是和需要释放的内存块地址连续邻接的内存块)是否处于空闲状态(可以通过指针的地址进行检查所后驱节点和前驱节点与该节点的内存地址连续则为邻接块)，若是则进行合并。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeBlock</span><span class="params">(BlockNode* pPrev, BlockNode* pMerge)</span></span>&#123;</span><br><span class="line">		assert(pMerge != <span class="literal">nullptr</span>);</span><br><span class="line">		<span class="keyword">size_t</span> mergeNodeSize = pMerge-&gt;m_size;</span><br><span class="line">		m_remainSize += mergeNodeSize;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (pMerge-&gt;m_next != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			<span class="keyword">size_t</span> nextNodeSize = pMerge-&gt;m_next-&gt;m_size;</span><br><span class="line">			<span class="keyword">if</span> ((pMerge + (mergeNodeSize + <span class="keyword">sizeof</span>(BlockNode)) / <span class="number">8</span>) == pMerge-&gt;m_next) &#123;</span><br><span class="line">				RemoveNode(pMerge, pMerge-&gt;m_next);</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Merge block with next block, size after merge :&quot;</span> &lt;&lt; nextNodeSize &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				mergeNodeSize += <span class="keyword">sizeof</span>(BlockNode) + nextNodeSize;<span class="comment">//更新mergeNodeSize</span></span><br><span class="line">				pMerge-&gt;m_size = mergeNodeSize;</span><br><span class="line">				m_remainSize += <span class="keyword">sizeof</span>(BlockNode);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (pPrev != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			<span class="keyword">size_t</span> prevNodeSize = pPrev-&gt;m_size;</span><br><span class="line">			<span class="keyword">if</span> ((pPrev + (prevNodeSize + <span class="keyword">sizeof</span>(BlockNode)) / <span class="number">8</span>) == pMerge) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Merge block with prev block, size before merge :&quot;</span> &lt;&lt; prevNodeSize &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				RemoveNode(pPrev, pMerge);</span><br><span class="line">				prevNodeSize += mergeNodeSize + <span class="keyword">sizeof</span>(BlockNode);</span><br><span class="line">				pPrev-&gt;m_size = prevNodeSize;</span><br><span class="line">				m_remainSize += <span class="keyword">sizeof</span>(BlockNode);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>myfree函数的具体实现如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myfree</span><span class="params">(<span class="keyword">void</span>* pPtr)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (pPtr != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			BlockNode* freeBlock = (BlockNode*)pPtr - <span class="number">1</span>;</span><br><span class="line">			BlockNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">			GetPrevNode(&amp;prev, freeBlock);</span><br><span class="line">			InsertNode(prev, freeBlock);</span><br><span class="line">			MergeBlock(prev, freeBlock);</span><br><span class="line">			--m_numAllocations;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Free success, num allocations: &quot;</span> &lt;&lt; m_numAllocations &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Remain size: &quot;</span> &lt;&lt; m_remainSize &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>由于初始申请的一大块内存为8字节对齐，Header的大小为8，每次申请的内存大小也为8的倍数，所以myalloc所返回的指针均为8字节对齐，这种实现的优点是比较简单，而且对任何对齐大小(1,2,4,8字节对齐)都可以实现对齐，缺点是若所需的内存大小不是8的倍数则会浪费一部分的内存…。若想要实现更节省内存一点的分配方式则可以每次分配时计算内存对齐地址，然后再进行分配可以节省一些内存。</p>
<p>这里的myalloc实现只是一个玩具而已…，实际的malloc实现会更复杂一些，需要考虑到更多的问题。</p>
<p>ps:什么是内存碎片？</p>
<p>如果如果每次分配8字节内存，且每相邻的两块内存一个被使用而另一个空闲，此时总的空闲内存远大于8字节(空闲内存为：8*N，N为空闲块的数量)，但是此时却无法再分配一个16字节的内存，因为所有空闲块都不是连续的。</p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;         </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 内存块分为标记区(Header)和数据区(Data)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BlockNode</span>&#123;</span><span class="comment">//Header</span></span><br><span class="line">	BlockNode* m_next;</span><br><span class="line">	<span class="keyword">size_t</span> m_size;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">SEARCH_MODE</span>&#123;</span></span><br><span class="line">	FIRST_FIT,</span><br><span class="line">	BEST_FIT</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemAllocator</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	MemAllocator(<span class="keyword">size_t</span> pSize, SEARCH_MODE pMode) &#123;</span><br><span class="line">		m_size = pSize * <span class="number">8</span>;</span><br><span class="line">		m_data = _aligned_malloc(m_size, <span class="number">8</span>);<span class="comment">//申请一块8字节对齐的内存</span></span><br><span class="line">		m_mode = pMode;</span><br><span class="line">		<span class="built_in">memset</span>(m_data, <span class="number">0</span>, m_size);</span><br><span class="line">		InitFreeList(m_data, m_size);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;申请内存空间大小为：&quot;</span> &lt;&lt; m_size &lt;&lt; <span class="string">&quot;B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;内存空间实际剩余为：&quot;</span> &lt;&lt; m_remainSize &lt;&lt; <span class="string">&quot;B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;内存空间首地址为：0x&quot;</span> &lt;&lt; m_data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//初始化FreeList</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">InitFreeList</span><span class="params">(<span class="keyword">void</span>* pStart, <span class="keyword">size_t</span> pSize)</span></span>&#123;</span><br><span class="line">		assert(pStart != <span class="literal">nullptr</span>);</span><br><span class="line">		m_numAllocations = <span class="number">0</span>;</span><br><span class="line">		m_remainSize = pSize - <span class="keyword">sizeof</span>(BlockNode);</span><br><span class="line">		m_freeList = <span class="keyword">static_cast</span>&lt;BlockNode*&gt;(pStart);</span><br><span class="line">		m_freeList-&gt;m_next = <span class="literal">nullptr</span>;</span><br><span class="line">		m_freeList-&gt;m_size = m_remainSize;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">GetProperBlock</span><span class="params">(<span class="keyword">size_t</span> pSize, SEARCH_MODE pMode, BlockNode** pPrevNode, BlockNode** pFoundNode)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (pMode == SEARCH_MODE::FIRST_FIT) &#123;</span><br><span class="line">			<span class="keyword">return</span> GetFirstFitBlock(pSize, pPrevNode, pFoundNode);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> GetBestFitBlock(pSize, pPrevNode, pFoundNode);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">GetFirstFitBlock</span><span class="params">(<span class="keyword">size_t</span> pSize, BlockNode** pPrevNode, BlockNode** pFoundNode)</span> </span>&#123;</span><br><span class="line">		BlockNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">		BlockNode* curr = m_freeList;</span><br><span class="line">		<span class="keyword">bool</span> success = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (curr != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (curr-&gt;m_size &gt;= pSize)&#123;</span><br><span class="line">				success = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			prev = curr;</span><br><span class="line">			curr = curr-&gt;m_next;</span><br><span class="line">		&#125;</span><br><span class="line">		*pPrevNode = prev;</span><br><span class="line">		*pFoundNode = curr;</span><br><span class="line">		<span class="keyword">return</span> success;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">GetBestFitBlock</span><span class="params">(<span class="keyword">size_t</span> pSize, BlockNode** pPrevNode, BlockNode** pFoundNode)</span></span>&#123;</span><br><span class="line">		BlockNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">		BlockNode* curr = m_freeList;</span><br><span class="line">		<span class="keyword">bool</span> success = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">		BlockNode* best = <span class="literal">nullptr</span>;</span><br><span class="line">		BlockNode* bestPrev = <span class="literal">nullptr</span>;</span><br><span class="line">		<span class="keyword">size_t</span> bestSize = m_size;</span><br><span class="line">		<span class="keyword">while</span> (curr != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			<span class="keyword">size_t</span> currSize = curr-&gt;m_size;</span><br><span class="line">			<span class="keyword">if</span> (currSize &gt;= pSize)&#123;</span><br><span class="line">				success = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">if</span> (currSize &lt; bestSize)&#123;</span><br><span class="line">					bestSize = currSize;</span><br><span class="line">					best = curr;</span><br><span class="line">					bestPrev = prev;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			prev = curr;</span><br><span class="line">			curr = curr-&gt;m_next;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		*pPrevNode = bestPrev;</span><br><span class="line">		*pFoundNode = best;</span><br><span class="line">		<span class="keyword">return</span> success;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*若找到的空闲内存块的大小size &gt; 所需内存大小 + sizeof(BlockNode)，</span></span><br><span class="line"><span class="comment">	则将该空闲块分裂为两个新的块，并将新分出的块插入到FreeList中：*/</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SplitBlock</span><span class="params">(BlockNode* pOld, <span class="keyword">size_t</span> pSize)</span></span>&#123;</span><br><span class="line">		assert(pOld != <span class="literal">nullptr</span>);</span><br><span class="line">		<span class="keyword">size_t</span> oldBlockSize = pOld-&gt;m_size;</span><br><span class="line">		assert(oldBlockSize &gt; pSize);</span><br><span class="line">		BlockNode* newBlock = pOld + (pSize + <span class="keyword">sizeof</span>(BlockNode)) / <span class="number">8</span>;</span><br><span class="line">		newBlock-&gt;m_size = oldBlockSize - pSize - <span class="keyword">sizeof</span>(BlockNode);</span><br><span class="line">		pOld-&gt;m_size = pSize;</span><br><span class="line">		InsertNode(pOld, newBlock);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Split block&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">RemoveNode</span><span class="params">(BlockNode* pPrev, <span class="keyword">const</span> BlockNode* pDelete)</span></span>&#123;</span><br><span class="line">		assert(pDelete != <span class="literal">nullptr</span>);</span><br><span class="line">		<span class="keyword">if</span> (pPrev != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			pPrev-&gt;m_next = pDelete-&gt;m_next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			m_freeList = pDelete-&gt;m_next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">InsertNode</span><span class="params">(BlockNode* pPrev, BlockNode* pNew)</span></span>&#123;</span><br><span class="line">		assert(pNew != <span class="literal">nullptr</span>);</span><br><span class="line">		<span class="keyword">if</span> (pPrev != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			pNew-&gt;m_next = pPrev-&gt;m_next;</span><br><span class="line">			pPrev-&gt;m_next = pNew;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			pNew-&gt;m_next = m_freeList;</span><br><span class="line">			m_freeList = pNew;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span>* <span class="title">myalloc</span><span class="params">(<span class="keyword">size_t</span> pSize)</span></span>&#123;</span><br><span class="line">		<span class="keyword">size_t</span> dataSize = pSize * <span class="number">8</span>;</span><br><span class="line">		<span class="keyword">if</span> (dataSize &lt;= m_remainSize)&#123;</span><br><span class="line">			BlockNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">			BlockNode* found = <span class="literal">nullptr</span>;</span><br><span class="line">			<span class="keyword">if</span> (GetProperBlock(dataSize, m_mode, &amp;prev, &amp;found))&#123;</span><br><span class="line">				assert(found != <span class="literal">nullptr</span>);</span><br><span class="line">				<span class="keyword">size_t</span> founBlockSize = found-&gt;m_size;</span><br><span class="line">				<span class="keyword">size_t</span> allocateSize = founBlockSize + <span class="keyword">sizeof</span>(BlockNode);</span><br><span class="line">				<span class="keyword">if</span> (founBlockSize &gt; (dataSize + <span class="keyword">sizeof</span>(BlockNode)))&#123;</span><br><span class="line">					SplitBlock(found, dataSize);</span><br><span class="line">					allocateSize = dataSize + <span class="keyword">sizeof</span>(BlockNode);</span><br><span class="line">				&#125;</span><br><span class="line">				RemoveNode(prev, found);</span><br><span class="line">				m_remainSize -= allocateSize;</span><br><span class="line">				++m_numAllocations;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Malloc success, num allocations: &quot;</span> &lt;&lt; m_numAllocations &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Remain size: &quot;</span> &lt;&lt; m_remainSize &lt;&lt; <span class="string">&quot;B&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="keyword">return</span> found + <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Malloc failed!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Remain size: &quot;</span> &lt;&lt; m_remainSize &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">GetPrevNode</span><span class="params">(BlockNode** pPrev, BlockNode* pNode)</span></span>&#123;</span><br><span class="line">		assert(pNode != <span class="literal">nullptr</span>);</span><br><span class="line">		<span class="keyword">bool</span> success = <span class="literal">false</span>;</span><br><span class="line">		BlockNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">		BlockNode* curr = m_freeList;</span><br><span class="line">		<span class="keyword">while</span> (curr != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span> (pNode &lt;= curr)&#123;</span><br><span class="line">				success = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			prev = curr;</span><br><span class="line">			curr = curr-&gt;m_next;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		*pPrev = prev;</span><br><span class="line">		<span class="keyword">return</span> success;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">MergeBlock</span><span class="params">(BlockNode* pPrev, BlockNode* pMerge)</span></span>&#123;</span><br><span class="line">		assert(pMerge != <span class="literal">nullptr</span>);</span><br><span class="line">		<span class="keyword">size_t</span> mergeNodeSize = pMerge-&gt;m_size;</span><br><span class="line">		m_remainSize += mergeNodeSize;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (pMerge-&gt;m_next != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			<span class="keyword">size_t</span> nextNodeSize = pMerge-&gt;m_next-&gt;m_size;</span><br><span class="line">			<span class="keyword">if</span> ((pMerge + (mergeNodeSize + <span class="keyword">sizeof</span>(BlockNode)) / <span class="number">8</span>) == pMerge-&gt;m_next) &#123;</span><br><span class="line">				RemoveNode(pMerge, pMerge-&gt;m_next);</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Merge block with next block, size after merge :&quot;</span> &lt;&lt; nextNodeSize &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				mergeNodeSize += <span class="keyword">sizeof</span>(BlockNode) + nextNodeSize;<span class="comment">//更新mergeNodeSize</span></span><br><span class="line">				pMerge-&gt;m_size = mergeNodeSize;</span><br><span class="line">				m_remainSize += <span class="keyword">sizeof</span>(BlockNode);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (pPrev != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			<span class="keyword">size_t</span> prevNodeSize = pPrev-&gt;m_size;</span><br><span class="line">			<span class="keyword">if</span> ((pPrev + (prevNodeSize + <span class="keyword">sizeof</span>(BlockNode)) / <span class="number">8</span>) == pMerge) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Merge block with prev block, size before merge :&quot;</span> &lt;&lt; prevNodeSize &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				RemoveNode(pPrev, pMerge);</span><br><span class="line">				prevNodeSize += mergeNodeSize + <span class="keyword">sizeof</span>(BlockNode);</span><br><span class="line">				pPrev-&gt;m_size = prevNodeSize;</span><br><span class="line">				m_remainSize += <span class="keyword">sizeof</span>(BlockNode);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">myfree</span><span class="params">(<span class="keyword">void</span>* pPtr)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (pPtr != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">			BlockNode* freeBlock = (BlockNode*)pPtr - <span class="number">1</span>;</span><br><span class="line">			BlockNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">			GetPrevNode(&amp;prev, freeBlock);</span><br><span class="line">			InsertNode(prev, freeBlock);</span><br><span class="line">			MergeBlock(prev, freeBlock);</span><br><span class="line">			--m_numAllocations;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Free success, num allocations: &quot;</span> &lt;&lt; m_numAllocations &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Remain size: &quot;</span> &lt;&lt; m_remainSize &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	~MemAllocator() &#123;</span><br><span class="line">		<span class="keyword">if</span> (m_data != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">			_aligned_free(m_data);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	BlockNode* m_freeList;<span class="comment">//指向所有空闲内存块</span></span><br><span class="line">	<span class="keyword">void</span>* m_data;</span><br><span class="line">	<span class="keyword">size_t</span> m_size;</span><br><span class="line">	<span class="keyword">size_t</span> m_numAllocations; <span class="comment">//记录申请和释放内存的次数</span></span><br><span class="line">	<span class="keyword">size_t</span> m_remainSize; <span class="comment">//记录空闲块数据区的总大小</span></span><br><span class="line">	SEARCH_MODE m_mode;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block</span> &#123;</span></span><br><span class="line">	<span class="built_in">string</span> name;	<span class="comment">//要分配的内存块名，便于删除想要操作的内存卡</span></span><br><span class="line">	<span class="keyword">size_t</span> size;	<span class="comment">//分配的大小</span></span><br><span class="line">	BlockNode* ptr;</span><br><span class="line">&#125;block[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> choice = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请从下列选项中进行选择&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.最先适应算法&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.最优适应算法&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3.退出&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt;&quot;</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; choice;</span><br><span class="line">	SEARCH_MODE mode;</span><br><span class="line">	<span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:mode = SEARCH_MODE::FIRST_FIT; <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:mode = SEARCH_MODE::BEST_FIT; <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">		<span class="keyword">default</span>:<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">MemAllocator <span class="title">ma</span><span class="params">(<span class="number">1024</span> / <span class="number">8</span>, mode)</span></span>;<span class="comment">//申请一块1K字节的内存空间作为空闲内存</span></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请从下列选项中进行选择:&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.分配内存&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.回收内存&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3.结束操作&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&gt;&gt;&quot;</span>;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; choice;</span><br><span class="line">		&#125; <span class="keyword">while</span> (choice != <span class="string">&#x27;1&#x27;</span> &amp;&amp; choice != <span class="string">&#x27;2&#x27;</span> &amp;&amp; choice != <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">		<span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要分配的内存名称：&quot;</span>;</span><br><span class="line">			<span class="built_in">string</span> name;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">			block[num].name = name;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要分配的内存大小：&quot;</span>;</span><br><span class="line">			<span class="keyword">int</span> size;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; size;</span><br><span class="line">			BlockNode* ptr = (BlockNode*)ma.myalloc(size / <span class="number">8</span>);</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;分配的地址空间为：0x&quot;</span> &lt;&lt; ptr &lt;&lt; <span class="string">&quot;--&quot;</span> &lt;&lt; <span class="string">&quot;0x&quot;</span> &lt;&lt; ptr + size / <span class="number">8</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			block[num].ptr = ptr;</span><br><span class="line">			block[num].size = size;</span><br><span class="line">			num++;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>: &#123;</span><br><span class="line">			<span class="built_in">string</span> name;</span><br><span class="line">			<span class="keyword">bool</span> success = <span class="literal">false</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要释放的内存名称：&quot;</span>;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (block[i].name == name) &#123;</span><br><span class="line">					success = <span class="literal">true</span>;</span><br><span class="line">					ma.myfree(block[i].ptr);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!success) &#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;名称不存在！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:<span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多参考：<a href="https://zhuanlan.zhihu.com/p/51855842">浅谈C++内存管理</a></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统存储管理实验</tag>
        <tag>malloc和free</tag>
        <tag>最先、最优、最差适应分配算法</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程相册管理系统文档</title>
    <url>/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="相册管理系统"><a href="#相册管理系统" class="headerlink" title="相册管理系统"></a>相册管理系统</h1><h1 id="一、面向对象分析"><a href="#一、面向对象分析" class="headerlink" title="一、面向对象分析"></a>一、面向对象分析</h1><h2 id="1-设计目的"><a href="#1-设计目的" class="headerlink" title="1. 设计目的"></a>1. 设计目的</h2><p>随着数码产品的普及，传统的相册已经淡出了市场，人们一般把照片存放在电脑中。如果电脑中照片很多，不易查和别人分享。制作这个电子相册系统对相册进行分类管理，可以上传自己的照片和朋友分享，同时对朋友的照片可以发表自己的评论。系统拥有较好的用户界面，信息共享，信息管理使管理人员和用户使用更加便捷，可操作性强。面向所有希望在电脑上进行照片管理的用户。</p>
<a id="more"></a>

<h2 id="2-功能需求"><a href="#2-功能需求" class="headerlink" title="2. 功能需求"></a>2. 功能需求</h2><h3 id="2-1-系统结构"><a href="#2-1-系统结构" class="headerlink" title="2.1 系统结构"></a>2.1 系统结构</h3><p>该相册管理系统一共包含三个子系统，分别是用户登陆子系统、用户管理子系统、相册管理子系统。</p>
<ul>
<li>用户登陆子系统：用户登陆子系统具有用户注册和用户登录功能。</li>
<li>用户管理子系统：普通用户具有个人信息管理功能、管理员还具有用户管理功能。</li>
<li>相册管理子系统：相册管理子系统具有照片管理和相册管理功能。</li>
<li>整个系统采用MVC结构，即JSP + javabeen + servlet的模式</li>
</ul>
<h3 id="2-2-功能描述"><a href="#2-2-功能描述" class="headerlink" title="2.2 功能描述"></a>2.2 功能描述</h3><h4 id="2-2-1-用户管理子系统"><a href="#2-2-1-用户管理子系统" class="headerlink" title="2.2.1 用户管理子系统"></a>2.2.1 用户管理子系统</h4><p>Ⅰ、用户：</p>
<ul>
<li><p>普通用户：系统的合法用户</p>
</li>
<li><p>管理员：具有系统管理权限的用户</p>
</li>
</ul>
<p>Ⅱ、功能：</p>
<p>普通用户：</p>
<ul>
<li><p>注册：注册成为系统用户</p>
</li>
<li><p>注销：删除用户</p>
</li>
<li><p>更改：修改用户信息</p>
</li>
<li><p>登入：登陆系统</p>
</li>
</ul>
<p>管理员：</p>
<ul>
<li><p>登录</p>
</li>
<li><p>升级用户</p>
</li>
<li><p>删除用户</p>
</li>
</ul>
<p>Ⅲ、用例模型视图：</p>
<p><img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211030909956.png" alt="image-20210211030909956"></p>
<div align="center">图 1 普通用户-用户管理子系统用例图</div>

<p><img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211030918761.png" alt="image-20210211030918761"></p>
<div align="center">图 2 管理员-用户管理子系统用例图</div>

<p> Ⅳ、活动图：</p>
<ul>
<li>注册功能活动图：</li>
</ul>
<p><img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211135526352.png" alt="image-20210211135526352"></p>
<div align="center">图 3 注册功能的活动图</div>

<ul>
<li><p>登入功能活动图：</p>
<p><img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211031023098.png" alt="image-20210211031023098"></p>
</li>
</ul>
<div align="center">图 4 登入功能的活动图</div>

<ul>
<li><p>注销功能活动图：</p>
<p><img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211031045642.png" alt="image-20210211031045642"></p>
</li>
</ul>
<div align="center">图 5 注销功能的活动图</div>

<ul>
<li><p>更改功能活动图：</p>
<p><img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211031055500.png" alt="image-20210211031055500"></p>
</li>
</ul>
<div align="center">图 6 更改功能的活动图</div>

<ul>
<li><p>管理员更新用户信息活动图：</p>
<p><img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211031108968.png" alt="image-20210211031108968"></p>
</li>
</ul>
<div align="center">图 7 管理员更新用户信息功能的活动图</div>

<p>Ⅴ、场景描述: </p>
<div align="center">表 1 用户登录场景</div>

<table>
<thead>
<tr>
<th>用例名称</th>
<th>用户登录</th>
</tr>
</thead>
<tbody><tr>
<td>范围</td>
<td>用户管理子系统</td>
</tr>
<tr>
<td>级别</td>
<td>重要</td>
</tr>
<tr>
<td>主要参与者</td>
<td>用户(关注身份的合法性)</td>
</tr>
<tr>
<td>涉众及其关注点</td>
<td>无</td>
</tr>
<tr>
<td>前置条件</td>
<td>合法用户</td>
</tr>
<tr>
<td>成功保证</td>
<td>进入系统</td>
</tr>
<tr>
<td>主成功场景</td>
<td>(1)启动系统，出现登录界面。   (2)输入用户名和密码，提交。   (3)系统验证。   (4)验证成功进入系统</td>
</tr>
</tbody></table>
<div align="center">表 2 管理员删除用户场景</div>

<table>
<thead>
<tr>
<th>用例名称</th>
<th>管理员删除用户</th>
</tr>
</thead>
<tbody><tr>
<td>范围</td>
<td>用户管理子系统</td>
</tr>
<tr>
<td>级别</td>
<td>重要</td>
</tr>
<tr>
<td>主要参与者</td>
<td>管理员(拥有相应权限)</td>
</tr>
<tr>
<td>涉众及其关注点</td>
<td>违规用户</td>
</tr>
<tr>
<td>前置条件</td>
<td>管理员拥有管理用户权限</td>
</tr>
<tr>
<td>成功保证</td>
<td>进入管理员界面</td>
</tr>
<tr>
<td>主成功场景</td>
<td>(1)启动系统，登录管理员界面   (2)输入管理员用户名和密码，提交   (3)系统验证   (4)验证成功进入管理员界面  (5)查找所要删除的用户  (6)若找到，进行删除</td>
</tr>
</tbody></table>
<h4 id="2-2-2相册管理子系统"><a href="#2-2-2相册管理子系统" class="headerlink" title="2.2.2相册管理子系统"></a>2.2.2相册管理子系统</h4><p>Ⅰ、用户：</p>
<ul>
<li><p>普通用户</p>
</li>
<li><p>管理员</p>
</li>
</ul>
<p>Ⅱ、功能：</p>
<p>普通用户:</p>
<ul>
<li><p>创建相册：创建一个新的相册</p>
</li>
<li><p>修改相册：对相册进行修改</p>
</li>
<li><p>上传图片：上传照片或图片到某个相册</p>
</li>
<li><p>浏览照片：播放照片</p>
</li>
<li><p>对照片评论：在每张照片的评论区写感想</p>
</li>
</ul>
<p>管理员：</p>
<ul>
<li>审核用户图片</li>
</ul>
<p>Ⅲ、用例模型视图：</p>
<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211031304329.png" alt="image-20210211031304329"></p>
<div align="center">图 8 普通用户相册管理用例图</div>

<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211031313669.png" alt="image-20210211031313669"></p>
<div align="center">图 9 管理员相册管理用例图</div>

<p>Ⅳ、泳道图：</p>
<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211031323568.png" alt="image-20210211031323568"></p>
<div align="center">图 10 用户相册管理功能的泳道图</div>

<p>Ⅴ、场景描述：</p>
<div align="center">表 3 用户上传图片场景</div>

<table>
<thead>
<tr>
<th>用例名称</th>
<th>用户相册管理</th>
</tr>
</thead>
<tbody><tr>
<td>范围</td>
<td>相册管理子系统</td>
</tr>
<tr>
<td>级别</td>
<td>重要</td>
</tr>
<tr>
<td>主要参与者</td>
<td>用户、管理员</td>
</tr>
<tr>
<td>涉众及其关注点</td>
<td>无</td>
</tr>
<tr>
<td>前置条件</td>
<td>用户成功登入相册管理系统，</td>
</tr>
<tr>
<td>成功保证</td>
<td>上传的照片符合要求</td>
</tr>
<tr>
<td>主成功场景</td>
<td>(1)上传照片，等待审核。   (2)审核通过。   (3)成功上传，相册更新。</td>
</tr>
</tbody></table>
<h2 id="3-逻辑分析与建模"><a href="#3-逻辑分析与建模" class="headerlink" title="3. 逻辑分析与建模"></a>3. 逻辑分析与建模</h2><h3 id="3-1-用户管理子系统建模"><a href="#3-1-用户管理子系统建模" class="headerlink" title="3.1 用户管理子系统建模"></a>3.1 用户管理子系统建模</h3><h4 id="3-1-1-业务类和领域类"><a href="#3-1-1-业务类和领域类" class="headerlink" title="3.1.1 业务类和领域类"></a>3.1.1 业务类和领域类</h4><ul>
<li><p>实体类：用户、登入、注册、更新和注销；管理员的登入、升级用户、删除用户</p>
</li>
<li><p>控制类：用户管理、管理员管理</p>
</li>
<li><p>界面类：登录界面、用户管理界面、管理员界面</p>
</li>
</ul>
<h4 id="3-1-2-类模型"><a href="#3-1-2-类模型" class="headerlink" title="3.1.2 类模型"></a>3.1.2 类模型</h4><ul>
<li><p>登入功能的类模型：</p>
<p><img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211135747603.png" alt="image-20210211135747603"></p>
</li>
</ul>
<div align="center">图 11 登录功能的类模型</div>

<ul>
<li>用户管理的类模型：</li>
</ul>
<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211135756360.png" alt="image-20210211135756360"></p>
<div align="center">图 12 用户管理的类模型</div>

<ul>
<li>管理员管理的类模型：</li>
</ul>
<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211135804536.png" alt="image-20210211135804536"></p>
<div align="center">图 13 管理员管理的类模型</div>

<h4 id="3-1-3-协作模型"><a href="#3-1-3-协作模型" class="headerlink" title="3.1.3 协作模型"></a>3.1.3 协作模型</h4><ul>
<li>登录功能的协作模型：</li>
</ul>
<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211135920158.png" alt="image-20210211135920158"></p>
<div align="center">图 14 登录功能的协作模型</div>

<ul>
<li>用户管理功能的协作模型：</li>
</ul>
<p>  <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211135926006.png" alt="image-20210211135926006"></p>
<div align="center">图 15 用户管理功能的协作模型</div>

<ul>
<li>管理员管理功能的协作模型：</li>
</ul>
<p><img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140024512.png" alt="image-20210211140024512"></p>
<div align="center">图 16 管理员管理功能的协作模型</div>

<h3 id="3-2-相册管理子系统建模"><a href="#3-2-相册管理子系统建模" class="headerlink" title="3.2 相册管理子系统建模"></a>3.2 相册管理子系统建模</h3><h4 id="3-2-1-业务类和领域类"><a href="#3-2-1-业务类和领域类" class="headerlink" title="3.2.1 业务类和领域类"></a>3.2.1 业务类和领域类</h4><ul>
<li>实体类：相册目录、相册、照片列表、照片、浏览、评论、上传、审核</li>
</ul>
<ul>
<li>控制类：相册管理、用户相册管理</li>
</ul>
<ul>
<li>界面类：相册管理界面、管理员界面</li>
</ul>
<h4 id="3-2-2-类模型"><a href="#3-2-2-类模型" class="headerlink" title="3.2.2 类模型"></a>3.2.2 类模型</h4><p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140045143.png" alt="image-20210211140045143"></p>
<div align="center">图 17 相册管理的类模型</div>

<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140122049.png" alt="image-20210211140122049"></p>
<div align="center">图 18 用户相册管理的类模型</div>

<h4 id="3-2-3-协作模型"><a href="#3-2-3-协作模型" class="headerlink" title="3.2.3 协作模型"></a>3.2.3 协作模型</h4><ul>
<li>管理员相册管理的协作模型：</li>
</ul>
<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140141502.png" alt="image-20210211140141502"></p>
<div align="center">图 19 用管理员相册管理的协作模型</div>

<ul>
<li>用户相册管理的协作模型：</li>
</ul>
<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140146776.png" alt="image-20210211140146776"></p>
<div align="center">图 20 相册管理的协作模型</div>

<h2 id="4-非功能分析"><a href="#4-非功能分析" class="headerlink" title="4. 非功能分析"></a>4. 非功能分析</h2><h3 id="4-1-技术可行性分析"><a href="#4-1-技术可行性分析" class="headerlink" title="4.1 技术可行性分析"></a>4.1 技术可行性分析</h3><p>目前为止，用户登入子系统、用户管理子系统和相册管理子系统已经基本实现，用户在使用过程中并无不良反馈，能够在规定时间内完成系统的开发。</p>
<h3 id="4-2-社会可行性分析"><a href="#4-2-社会可行性分析" class="headerlink" title="4.2 社会可行性分析"></a>4.2 社会可行性分析</h3><ul>
<li>  法律方面的可行性：本产品未触犯任何法律法规，可进行开发。</li>
</ul>
<ul>
<li>  使用方面的可行性：由调查可知，本系统是一款实用价值较强的产品，提供诸多功能，能满足用户的需求。</li>
</ul>
<h3 id="4-3-经济可行性分析"><a href="#4-3-经济可行性分析" class="headerlink" title="4.3 经济可行性分析"></a>4.3 经济可行性分析</h3><p>本产品属于小型软件，对于经费的开支并不大，开发系统时所用的软件成本也不高，系统开发的支出较少，也在预算范围内，主要支出为数据库与网络服务器的费用。</p>
<h3 id="4-4-可行性研究结论"><a href="#4-4-可行性研究结论" class="headerlink" title="4.4 可行性研究结论"></a>4.4 可行性研究结论</h3><p>在软件开发时，支出主要源于服务器和安全维护费用，其他方面并无太多支出，所以，该软件的经济效益时可观的。</p>
<h1 id="二、面向对象设计"><a href="#二、面向对象设计" class="headerlink" title="二、面向对象设计"></a>二、面向对象设计</h1><h2 id="1-系统结构"><a href="#1-系统结构" class="headerlink" title="1. 系统结构"></a>1. 系统结构</h2><h3 id="1-1-系统整体结构设计"><a href="#1-1-系统整体结构设计" class="headerlink" title="1.1 系统整体结构设计"></a>1.1 系统整体结构设计</h3><p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140330759.png" alt="image-20210211140330759"></p>
<div align="center">图 1 系统结构设计图</div>

<h3 id="1-2-系统功能框架设计"><a href="#1-2-系统功能框架设计" class="headerlink" title="1.2 系统功能框架设计"></a>1.2 系统功能框架设计</h3><p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140414657.png" alt="image-20210211140414657"></p>
<div align="center">图 2 系统功能框架图</div>

<h2 id="2-功能设计"><a href="#2-功能设计" class="headerlink" title="2. 功能设计"></a>2. 功能设计</h2><h3 id="2-1-用户登录子系统"><a href="#2-1-用户登录子系统" class="headerlink" title="2.1 用户登录子系统"></a>2.1 用户登录子系统</h3><h4 id="2-1-1-注册、登录功能类图"><a href="#2-1-1-注册、登录功能类图" class="headerlink" title="2.1.1 注册、登录功能类图"></a>2.1.1 注册、登录功能类图</h4><p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140705665.png" alt="image-20210211140705665"></p>
<div align="center">图 3 注册、登录功能精化类图</div>

<h3 id="2-1-2-注册功能顺序图"><a href="#2-1-2-注册功能顺序图" class="headerlink" title="2.1.2 注册功能顺序图"></a>2.1.2 注册功能顺序图</h3><p><img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140715988.png" alt="image-20210211140715988"></p>
<div align="center">  图 4 注册功能顺序图</div>

<h3 id="2-1-3-登录功能顺序图"><a href="#2-1-3-登录功能顺序图" class="headerlink" title="2.1.3 登录功能顺序图"></a>2.1.3 登录功能顺序图</h3><p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140723802.png" alt="image-20210211140723802"></p>
<div align="center">图 5 登录功能顺序图</div>

<h3 id="2-2-用户管理子系统"><a href="#2-2-用户管理子系统" class="headerlink" title="2.2 用户管理子系统"></a>2.2 用户管理子系统</h3><h4 id="2-2-1-用户修改密码功能"><a href="#2-2-1-用户修改密码功能" class="headerlink" title="2.2.1 用户修改密码功能"></a>2.2.1 用户修改密码功能</h4><ul>
<li>类图</li>
</ul>
<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140739917.png" alt="image-20210211140739917"></p>
<div align="center">图 6 用户密码修改功能精化类图</div>

<ul>
<li>顺序图</li>
</ul>
<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140743627.png" alt="image-20210211140743627"></p>
<div align="center">图 7 用户密码修改功能顺序图</div>

<h4 id="2-2-2-管理员查看用户功能"><a href="#2-2-2-管理员查看用户功能" class="headerlink" title="2.2.2 管理员查看用户功能"></a>2.2.2 管理员查看用户功能</h4><ul>
<li>类图</li>
</ul>
<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140755710.png" alt="image-20210211140755710"></p>
<div align="center">图 8 用户查看功能精化类图</div>

<ul>
<li>顺序图</li>
</ul>
<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140802821.png" alt="image-20210211140802821"></p>
<div align="center">图 9 用户查看功能顺序图</div>

<h3 id="2-3相册管理子系统"><a href="#2-3相册管理子系统" class="headerlink" title="2.3相册管理子系统"></a>2.3相册管理子系统</h3><h4 id="2-3-1添加、删除相册功能"><a href="#2-3-1添加、删除相册功能" class="headerlink" title="2.3.1添加、删除相册功能"></a>2.3.1添加、删除相册功能</h4><ul>
<li>类图</li>
</ul>
<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140816599.png" alt="image-20210211140816599"></p>
<div align="center">图 10 添加、删除相册功能精化类图</div>

<ul>
<li>添加相册功能顺序图</li>
</ul>
<p><img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140824396.png" alt="image-20210211140824396"></p>
<div align="center">图 11 添加相册功能顺序图</div>

<h4 id="2-3-2-上传、查询、删除图片功能"><a href="#2-3-2-上传、查询、删除图片功能" class="headerlink" title="2.3.2 上传、查询、删除图片功能"></a>2.3.2 上传、查询、删除图片功能</h4><ul>
<li>类图</li>
</ul>
<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140842667.png" alt="image-20210211140842667"></p>
<div align="center">图 12 上传、查询、删除图片功能精化类图</div>

<ul>
<li>上传图片功能顺序图</li>
</ul>
<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140846499.png" alt="image-20210211140846499"></p>
<div align="center">图 13 上传图片功能顺序图</div>

<h4 id="2-3-3-放映单张图片功能"><a href="#2-3-3-放映单张图片功能" class="headerlink" title="2.3.3 放映单张图片功能"></a>2.3.3 放映单张图片功能</h4><ul>
<li>类图</li>
</ul>
<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140903535.png" alt="image-20210211140903535"></p>
<div align="center">图 14 放映单张图片功能精化类图</div>

<ul>
<li>顺序图</li>
</ul>
<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211140907132.png" alt="image-20210211140907132"></p>
<div align="center">图 15 放映单张图片功能顺序图</div>

<h2 id="3-非功能设计"><a href="#3-非功能设计" class="headerlink" title="3. 非功能设计"></a>3. 非功能设计</h2><h3 id="3-1-程序运行环境"><a href="#3-1-程序运行环境" class="headerlink" title="3.1 程序运行环境"></a>3.1 程序运行环境</h3><ul>
<li>开发平台：Windows 10，Intel(R) Core(TM) i7-9750H <a href="mailto:CPU@2.60Hz">CPU @ 2.60GHz</a> </li>
</ul>
<ul>
<li>开发软件：IDEA 2019.3.3 x64</li>
</ul>
<ul>
<li>Tomcat版本：apache-tomcat-8.5.59</li>
</ul>
<ul>
<li>数据库：MySql 8.0.19</li>
</ul>
<ul>
<li>MySql数据库管理和开发工具：Navicat 12.0.11</li>
</ul>
<ul>
<li><p>相关Jar包：</p>
<p>① 使用SmartUpload组件：jsmartcom_zh_CN.jar</p>
<p>② 使用C标签：jstl.jar和 standard.jar</p>
<p>③ Mysql驱动：mysql-connector-java-8.0.19.jar</p>
</li>
</ul>
<h3 id="3-2-易用性"><a href="#3-2-易用性" class="headerlink" title="3.2 易用性"></a>3.2 易用性</h3><p>本系统具有：易理解性、易学习性和易操作性等特点</p>
<ul>
<li>在UI设计上充分考虑了用户的需求，通过各种提示使得整个相册管理系统的操作简单易上手。</li>
</ul>
<ul>
<li>增设用户名、当前时间的屏幕显示，以体现整个系统的友好性、人性化。</li>
</ul>
<ul>
<li>当鼠标移动到相关链接时会发生颜色变化，使用户很容易理解系统的操作模式，增强了用户体验效果。</li>
</ul>
<h2 id="4-数据库设计"><a href="#4-数据库设计" class="headerlink" title="4. 数据库设计"></a>4. 数据库设计</h2><h3 id="4-1-E-R图"><a href="#4-1-E-R图" class="headerlink" title="4.1 E-R图"></a>4.1 E-R图</h3><p><img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211141124234.png" alt="image-20210211141124234"> </p>
<div align="center">图 16 E-R图</div>

<h3 id="4-2-表设计"><a href="#4-2-表设计" class="headerlink" title="4.2 表设计"></a>4.2 表设计</h3><h4 id="4-2-1-用户信息表-tb-user-设计"><a href="#4-2-1-用户信息表-tb-user-设计" class="headerlink" title="4.2.1 用户信息表(tb_user)设计"></a>4.2.1 用户信息表(tb_user)设计</h4><table>
<thead>
<tr>
<th>字段名</th>
<th>类型</th>
<th>长度</th>
<th>约束</th>
<th>自增</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>u_id</td>
<td>int  unsigned</td>
<td></td>
<td>pk</td>
<td>√</td>
<td>用户id</td>
</tr>
<tr>
<td>u_name</td>
<td>varchar</td>
<td>50</td>
<td>Unique</td>
<td></td>
<td>用户名</td>
</tr>
<tr>
<td>u_pass</td>
<td>varchar</td>
<td>50</td>
<td></td>
<td></td>
<td>密码</td>
</tr>
<tr>
<td>u_flag</td>
<td>int</td>
<td>1</td>
<td></td>
<td></td>
<td>标志位(1,admin,0,user)  default:0</td>
</tr>
</tbody></table>
<div align="center">表 1 tb_user表</div>

<h4 id="4-2-2-相册表-tb-album-设计"><a href="#4-2-2-相册表-tb-album-设计" class="headerlink" title="4.2.2 相册表(tb_album)设计"></a>4.2.2 相册表(tb_album)设计</h4><table>
<thead>
<tr>
<th>字段名</th>
<th>类型</th>
<th>长度</th>
<th>约束</th>
<th>自增</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>a_id</td>
<td>int  unsigned</td>
<td></td>
<td>pk</td>
<td>√</td>
<td>相册ID</td>
</tr>
<tr>
<td>a_name</td>
<td>varchar</td>
<td>50</td>
<td></td>
<td></td>
<td>相册名</td>
</tr>
<tr>
<td>a_discription</td>
<td>varchar</td>
<td>255</td>
<td></td>
<td></td>
<td>相册描述</td>
</tr>
</tbody></table>
<div align="center">表 2 tb_album表</div>

<h4 id="4-2-3-照片表-tb-photo-设计"><a href="#4-2-3-照片表-tb-photo-设计" class="headerlink" title="4.2.3 照片表(tb_photo)设计"></a>4.2.3 照片表(tb_photo)设计</h4><table>
<thead>
<tr>
<th>字段名</th>
<th>类型</th>
<th>长度</th>
<th>约束</th>
<th>自增</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>P_id</td>
<td>int  unsigned</td>
<td></td>
<td>pk</td>
<td>√</td>
<td>照片ID</td>
</tr>
<tr>
<td>P_name</td>
<td>varchar</td>
<td>50</td>
<td></td>
<td></td>
<td>照片名称</td>
</tr>
<tr>
<td>P_discription</td>
<td>varchar</td>
<td>255</td>
<td></td>
<td></td>
<td>照片描述</td>
</tr>
</tbody></table>
<div align="center">表 3 tb_photo表</div>

<h4 id="4-2-4-相册类别表-tb-type-设计"><a href="#4-2-4-相册类别表-tb-type-设计" class="headerlink" title="4.2.4 相册类别表(tb_type)设计"></a>4.2.4 相册类别表(tb_type)设计</h4><table>
<thead>
<tr>
<th>字段名</th>
<th>类型</th>
<th>长度</th>
<th>约束</th>
<th>自增</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>t_id</td>
<td>int  unsigned</td>
<td></td>
<td>pk</td>
<td>√</td>
<td>类别id</td>
</tr>
<tr>
<td>t_name</td>
<td>varchar</td>
<td>50</td>
<td>unique/not  null</td>
<td></td>
<td>类别名称</td>
</tr>
</tbody></table>
<div align="center">表 4 tb_type表</div>

<h4 id="4-2-5-创建相册表-tb-ua-设计"><a href="#4-2-5-创建相册表-tb-ua-设计" class="headerlink" title="4.2.5 创建相册表(tb_ua)设计"></a>4.2.5 创建相册表(tb_ua)设计</h4><table>
<thead>
<tr>
<th>字段名</th>
<th>类型</th>
<th>长度</th>
<th>约束</th>
<th>自增</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>u_id</td>
<td>int  unsigned</td>
<td></td>
<td>Pk/not  null</td>
<td></td>
<td>用户id</td>
</tr>
<tr>
<td>a_id</td>
<td>int  unsigned</td>
<td></td>
<td>Pk/not  null</td>
<td></td>
<td>相册ID</td>
</tr>
<tr>
<td>a_createtime</td>
<td>datetime</td>
<td></td>
<td></td>
<td></td>
<td>创建时间</td>
</tr>
</tbody></table>
<div align="center">表 5 tb_ua表</div>

<h4 id="4-2-6-上传图片表-tb-ap-设计"><a href="#4-2-6-上传图片表-tb-ap-设计" class="headerlink" title="4.2.6 上传图片表(tb_ap)设计"></a>4.2.6 上传图片表(tb_ap)设计</h4><table>
<thead>
<tr>
<th>字段名</th>
<th>类型</th>
<th>长度</th>
<th>约束</th>
<th>自增</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>a_id</td>
<td>int  unsigned</td>
<td></td>
<td>Pk/not  null</td>
<td></td>
<td>相册ID</td>
</tr>
<tr>
<td>P_id</td>
<td>int  unsigned</td>
<td></td>
<td>Pk/not  null</td>
<td></td>
<td>照片ID</td>
</tr>
<tr>
<td>P_uploadtime</td>
<td>datetime</td>
<td></td>
<td></td>
<td></td>
<td>上传时间</td>
</tr>
</tbody></table>
<div align="center">表 6 tb_ap表</div>

<h4 id="4-2-7-搜索图片表-tb-up-设计"><a href="#4-2-7-搜索图片表-tb-up-设计" class="headerlink" title="4.2.7 搜索图片表(tb_up)设计"></a>4.2.7 搜索图片表(tb_up)设计</h4><table>
<thead>
<tr>
<th>字段名</th>
<th>类型</th>
<th>长度</th>
<th>约束</th>
<th>自增</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>u_id</td>
<td>int  unsigned</td>
<td></td>
<td>Pk/not  null</td>
<td></td>
<td>用户id</td>
</tr>
<tr>
<td>P_id</td>
<td>int  unsigned</td>
<td></td>
<td>Pk/not  null</td>
<td></td>
<td>照片ID</td>
</tr>
<tr>
<td>P_uploadtime</td>
<td>datetime</td>
<td></td>
<td></td>
<td></td>
<td>上传时间</td>
</tr>
</tbody></table>
<div align="center">表 7 tb_up表</div>

<h4 id="4-2-8-相册分类表-tb-ta-设计"><a href="#4-2-8-相册分类表-tb-ta-设计" class="headerlink" title="4.2.8 相册分类表(tb_ta)设计"></a>4.2.8 相册分类表(tb_ta)设计</h4><table>
<thead>
<tr>
<th>字段名</th>
<th>类型</th>
<th>长度</th>
<th>约束</th>
<th>自增</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>t_id</td>
<td>int  unsigned</td>
<td></td>
<td>Pk/not  null</td>
<td></td>
<td>类别id</td>
</tr>
<tr>
<td>a_id</td>
<td>int  unsigned</td>
<td></td>
<td>Pk/not  null</td>
<td></td>
<td>相册ID</td>
</tr>
<tr>
<td>a_createtime</td>
<td>datetime</td>
<td></td>
<td></td>
<td></td>
<td>创建时间</td>
</tr>
</tbody></table>
<div align="center">表 8 tb_ta表</div>

<h1 id="三、系统实现"><a href="#三、系统实现" class="headerlink" title="三、系统实现"></a>三、系统实现</h1><h2 id="1-功能实现"><a href="#1-功能实现" class="headerlink" title="1. 功能实现"></a>1. 功能实现</h2><h3 id="1-1-需求功能"><a href="#1-1-需求功能" class="headerlink" title="1.1 需求功能"></a>1.1 需求功能</h3><p>该系统实现了课程的全部要求，可对相册进行分类管理，可以上传自己的照片和朋友分享，同时对朋友的照片可以发表自己的评论。</p>
<h3 id="1-2-扩展功能"><a href="#1-2-扩展功能" class="headerlink" title="1.2 扩展功能"></a>1.2 扩展功能</h3><ul>
<li>精美的用户界面来提升用户体验感</li>
</ul>
<ul>
<li>在图片浏览时我们采用百度图片的设计，可以鼠标触碰图片边缘来实现上下张的翻页</li>
</ul>
<ul>
<li>供快捷的图片搜索服务，可以按照片名称+所属相册精确查找，也可以只输入照片名称模糊查找</li>
</ul>
<ul>
<li>友情链接可以跳转到其他在线用户相册系统</li>
</ul>
<ul>
<li>帮助可以跳转到用户使用指导界面</li>
</ul>
<h2 id="2-界面实现"><a href="#2-界面实现" class="headerlink" title="2. 界面实现"></a>2. 界面实现</h2><h3 id="2-1-注册登录界面"><a href="#2-1-注册登录界面" class="headerlink" title="2.1 注册登录界面"></a>2.1 注册登录界面</h3><p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211141301815.png" alt="image-20210211141301815"></p>
<div align="center">图 1 系统登录注册界面图</div>

<h3 id="2-2-相册查看界面（主界面）"><a href="#2-2-相册查看界面（主界面）" class="headerlink" title="2.2 相册查看界面（主界面）"></a>2.2 相册查看界面（主界面）</h3><p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211141306476.png" alt="image-20210211141306476"></p>
<div align="center">图 2 主界面图</div>

<h3 id="2-3-图片查看界面"><a href="#2-3-图片查看界面" class="headerlink" title="2.3 图片查看界面"></a>2.3 图片查看界面</h3><p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211141309671.png" alt="image-20210211141309671"></p>
<div align="center">图 3 图片查看界面图</div>

<h3 id="2-4-图片放映界面"><a href="#2-4-图片放映界面" class="headerlink" title="2.4 图片放映界面"></a>2.4 图片放映界面</h3><p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211141313727.png" alt="image-20210211141313727"></p>
<div align="center">图 4 图片放映界面图</div>

<h3 id="2-5-新建相册界面"><a href="#2-5-新建相册界面" class="headerlink" title="2.5 新建相册界面"></a>2.5 新建相册界面</h3><p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211141320066.png" alt="image-20210211141320066"></p>
<div align="center">图 5 新建相册界面图</div>

<h3 id="2-6-上传图片界面"><a href="#2-6-上传图片界面" class="headerlink" title="2.6 上传图片界面"></a>2.6 上传图片界面</h3><p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211141324215.png" alt="image-20210211141324215"></p>
<div align="center">图 6 上传图片界面图</div>

<h3 id="2-7-密码修改界面"><a href="#2-7-密码修改界面" class="headerlink" title="2.7 密码修改界面"></a>2.7 密码修改界面</h3><p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211141328109.png" alt="image-20210211141328109"></p>
<div align="center">图 7 密码修改界面图</div>

<h3 id="2-8-管理员查看用户界面"><a href="#2-8-管理员查看用户界面" class="headerlink" title="2.8 管理员查看用户界面"></a>2.8 管理员查看用户界面</h3><p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211141333675.png" alt="image-20210211141333675"></p>
<div align="center">图 8 用户查看界面图</div>

<h3 id="2-9-照片评论界面"><a href="#2-9-照片评论界面" class="headerlink" title="2.9 照片评论界面"></a>2.9 照片评论界面</h3><p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211141338213.png" alt="image-20210211141338213"></p>
<div align="center">图 9 照片评论界面图</div>

<p> <img src="/2021/01/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20210211141342027.png" alt="image-20210211141342027"></p>
<div align="center">图 10 照片评论区</div>

<h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>略</p>
<p>java代码参考github：<a href="https://github.com/CoderZQY/AlbumManage">AlbumManage</a></p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>软件工程</tag>
        <tag>相册管理系统</tag>
        <tag>JSP+javabeen+servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>LL1</title>
    <url>/2021/05/20/LL1/</url>
    <content><![CDATA[<h1 id="编译原理实验3——LL-1-文法分析实现"><a href="#编译原理实验3——LL-1-文法分析实现" class="headerlink" title="编译原理实验3——LL(1)文法分析实现"></a>编译原理实验3——LL(1)文法分析实现</h1><h2 id="1、LL-1-文法介绍"><a href="#1、LL-1-文法介绍" class="headerlink" title="1、LL(1)文法介绍"></a>1、LL(1)文法介绍</h2><p>对文法G的句子进行确定的自顶向下语法分析的充分必要条件是：G的任意两个具有相同左部的产生式A—&gt;α|β 满足下列条件：</p>
<p>（1）如果α、β均不能推导出ε，则 FIRST(α) ∩ FIRST(β) = ∅。</p>
<p>（2）α 和 β 至多有一个能推导出 ε。</p>
<p>（3）如果 β *═&gt; ε，则 FIRST(α) ∩ FOLLOW(A) = ∅。</p>
<p>将满足上述条件的文法称为LL(1)文法。</p>
<h2 id="2、实验要求"><a href="#2、实验要求" class="headerlink" title="2、实验要求"></a>2、实验要求</h2><ol>
<li>给定文法构造FIRST集、SELECT集与FOLLOW集。</li>
<li>构造文法预测分析表。</li>
<li>进行语法分析，构造语法分析过程表</li>
</ol>
<a id="more"></a>

<h2 id="3、Java代码实现"><a href="#3、Java代码实现" class="headerlink" title="3、Java代码实现"></a>3、Java代码实现</h2><h3 id="3-1-Producter类"><a href="#3-1-Producter类" class="headerlink" title="3.1 Producter类"></a>3.1 Producter类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String producter;   <span class="comment">// 产生式</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producter</span><span class="params">(String producter)</span></span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.producter = producter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProducter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> producter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProducter</span><span class="params">(String producter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.producter = producter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Character <span class="title">getLeft</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String[] arr = producter.split(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>].charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRight</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String[] arr = producter.split(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(Character c)</span></span>&#123;</span><br><span class="line">        String[] arr = producter.split(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        producter = c + <span class="string">&quot;-&gt;&quot;</span> + arr[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        String[] arr = producter.split(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">        producter = arr[<span class="number">0</span>] + <span class="string">&quot;-&gt;&quot;</span> + s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> producter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-F-F-S类，根据文法求出First集、Follow集、Select集"><a href="#3-2-F-F-S类，根据文法求出First集、Follow集、Select集" class="headerlink" title="3.2 F_F_S类，根据文法求出First集、Follow集、Select集"></a>3.2 F_F_S类，根据文法求出First集、Follow集、Select集</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">F_F_S</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求firstV集————非终结符VN和终结符VT的firstV集，为之后求推导式右侧字符串的first集作准备</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gs    文法GS（推导式Producter的Set集合）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>      非终结符VN和终结符VT的firstV集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Character, Set&lt;Character&gt;&gt; firstV(Set&lt;Producter&gt; gs) &#123;</span><br><span class="line">        Map&lt;Character, Set&lt;Character&gt;&gt; firstV = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 将所有的VN和VT先初始化到HashMap当中</span></span><br><span class="line">        <span class="keyword">for</span>(Character vn : GSBuilder.getVN(gs))&#123;</span><br><span class="line">            firstV.put(vn, <span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Character vt : GSBuilder.getVT(gs))&#123;</span><br><span class="line">            firstV.put(vt, <span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">            firstV.get(vt).add(vt);</span><br><span class="line">            <span class="comment">// 对于终结符VT，其firstV就是自身（e.g. FirstV(a) = &#123;a&#125;）</span></span><br><span class="line">            <span class="comment">// 而对于非终结符VN，求其firstV需要扫描（下面就是）</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用了can_2_empty()方法————返回emptyOK和emptyNO————如果当前字符属于emptyNO或者是终结符，就没有继续找firstV的必要了</span></span><br><span class="line">        List&lt;Set&lt;Character&gt;&gt; res = can_2_empty(gs);</span><br><span class="line">        Set&lt;Character&gt; emptyOK = res.get(<span class="number">0</span>);</span><br><span class="line">        Set&lt;Character&gt; emptyNO = res.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不断尝试更新firstV，当其不再变化时停止循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> beforeCnt = countCell(firstV);</span><br><span class="line">            <span class="keyword">for</span>(Producter producter : gs)&#123;</span><br><span class="line">                String str = producter.getRight();</span><br><span class="line">                Set&lt;Character&gt; tempSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">                <span class="comment">// index不断后移，扫描生成式右侧的字符串</span></span><br><span class="line">                <span class="comment">// 一个小技巧：如果这个index能够移动到串的最后(str.length())，就可以把ε加到该VN的firstV中</span></span><br><span class="line">                <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(index &lt; str.length())&#123;</span><br><span class="line">                    <span class="keyword">char</span> c = str.charAt(index);</span><br><span class="line">                    tempSet.addAll(firstV.get(c));</span><br><span class="line">                    tempSet.remove(<span class="string">&#x27;ε&#x27;</span>);</span><br><span class="line">                    <span class="keyword">if</span>(emptyNO.contains(c) || isVT(c))&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(index == str.length())&#123;</span><br><span class="line">                    tempSet.add(<span class="string">&#x27;ε&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                firstV.get(producter.getLeft()).addAll(tempSet);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(countCell(firstV) == beforeCnt)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> firstV;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求first集————推导式右侧字符串的first集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gs    文法GS（推导式Producter的Set集合）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>      推导式右侧字符串的first集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Set&lt;Character&gt;&gt; first(Set&lt;Producter&gt; gs)&#123;</span><br><span class="line">        Map&lt;String, Set&lt;Character&gt;&gt; first = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;Character, Set&lt;Character&gt;&gt; firstV = firstV(gs);</span><br><span class="line">        <span class="comment">// 这里仍旧用到了emptyOK和emptyNO，因为需要扫描，我们需要判断index是否还可以后移</span></span><br><span class="line">        List&lt;Set&lt;Character&gt;&gt; res = <span class="keyword">new</span> F_F_S().can_2_empty(gs);</span><br><span class="line">        Set&lt;Character&gt; emptyOK = res.get(<span class="number">0</span>);</span><br><span class="line">        Set&lt;Character&gt; emptyNO = res.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 我们已经求出每个文法符号(VN+VT)的firstVN了，在求字符串的first的时候是完全不需要while循环的</span></span><br><span class="line">        <span class="keyword">for</span>(Producter producter : gs)&#123;</span><br><span class="line">            first.put(producter.getRight(), <span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">            String str = producter.getRight();</span><br><span class="line">            <span class="keyword">if</span>(str.length() == <span class="number">1</span>)&#123;</span><br><span class="line">                first.get(str).add(str.charAt(<span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; str.length())&#123;</span><br><span class="line">                <span class="keyword">char</span> c = str.charAt(index);</span><br><span class="line">                first.get(str).addAll(firstV.get(c));</span><br><span class="line">                first.get(str).remove(<span class="string">&#x27;ε&#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span>(emptyNO.contains(c) || isVT(c))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(index == str.length())&#123;</span><br><span class="line">                first.get(str).add(<span class="string">&#x27;ε&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回follow集</span></span><br><span class="line"><span class="comment">     * 这里有必要说一下实现的思路。以「S -&gt; ABCD」为例</span></span><br><span class="line"><span class="comment">     * 用一个index扫描生成式右侧字符串，当index指向一个非终结符VN时，开启以下算法(假设当前指向B)：</span></span><br><span class="line"><span class="comment">     *      1. 将其后方的firstV加到当前的follow当中；如果后方可推出ε，则用一个jndex继续向后扫直到扫到不可推出ε的字符为止</span></span><br><span class="line"><span class="comment">     *      2. 如果这个时候jndex == str.length()，说明这一路(包括结束)都可以推出ε，因此这时把左侧的VN的follow加到当前的follow当中</span></span><br><span class="line"><span class="comment">     * 另外两点，要有这种意识：</span></span><br><span class="line"><span class="comment">     *      1. 第一步啥都别干，赶紧直接把把&#123;#&#125;加到开始符号S的follow里</span></span><br><span class="line"><span class="comment">     *      2. 随符集follow中是不可能出现ε的，因此每次向follow加first时，都要把ε去掉，即加入&quot;非空串元素&quot;</span></span><br><span class="line"><span class="comment">     *      3. while循环结束的条件依旧是follow集不再变化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Character, Set&lt;Character&gt;&gt; follow(Set&lt;Producter&gt; gs)&#123;</span><br><span class="line">        Map&lt;Character, Set&lt;Character&gt;&gt; follow = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Character c : GSBuilder.getVN(gs))&#123;</span><br><span class="line">            follow.put(c, <span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一步就是把&#123;#&#125;加到开始符号S的follow里</span></span><br><span class="line">        follow.get(<span class="string">&#x27;S&#x27;</span>).add(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">        <span class="comment">// 这里仍旧用到了emptyOK和emptyNO</span></span><br><span class="line">        List&lt;Set&lt;Character&gt;&gt; res = <span class="keyword">new</span> F_F_S().can_2_empty(gs);</span><br><span class="line">        Set&lt;Character&gt; emptyOK = res.get(<span class="number">0</span>);</span><br><span class="line">        Set&lt;Character&gt; emptyNO = res.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Character, Set&lt;Character&gt;&gt; firstV = firstV(gs);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> beforeCnt = countCell(follow);</span><br><span class="line">            <span class="keyword">for</span>(Producter producter : gs)&#123;</span><br><span class="line">                String str = producter.getRight();</span><br><span class="line">                <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (index &lt; str.length())&#123;</span><br><span class="line">                    <span class="keyword">char</span> c = str.charAt(index);</span><br><span class="line">                    <span class="keyword">if</span>(isVN(c))&#123;</span><br><span class="line">                        <span class="keyword">int</span> jndex = index + <span class="number">1</span>;  <span class="comment">// 幽默一下</span></span><br><span class="line">                        <span class="keyword">while</span> (jndex &lt; str.length())&#123;</span><br><span class="line">                            <span class="keyword">char</span> nextC = str.charAt(jndex);</span><br><span class="line">                            follow.get(c).addAll(firstV.get(nextC));</span><br><span class="line">                            follow.get(c).remove(<span class="string">&#x27;ε&#x27;</span>);</span><br><span class="line">                            <span class="keyword">if</span>(emptyNO.contains(nextC) || isVT(nextC))&#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            jndex++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(jndex == str.length())&#123;</span><br><span class="line">                            follow.get(c).addAll(follow.get(producter.getLeft()));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(countCell(follow) == beforeCnt)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> follow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回select集————这可能是整个文法分析中最简单的一步</span></span><br><span class="line"><span class="comment">     * 以「S-&gt;ABC」为例：</span></span><br><span class="line"><span class="comment">     *      1.如果first(ABC)中含有ε，Select(S-&gt;ABC) = First(ABC) - &#123;ε&#125; + Follow(S)</span></span><br><span class="line"><span class="comment">     *      2.如果first(ABC)中不含有ε，Select(S-&gt;ABC) = First(ABC)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Producter, Set&lt;Character&gt;&gt; select(Set&lt;Producter&gt; gs)&#123;</span><br><span class="line">        <span class="comment">// 之前求的first集和follow集</span></span><br><span class="line">        Map&lt;Producter, Set&lt;Character&gt;&gt; select = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;String, Set&lt;Character&gt;&gt; first = first(gs);</span><br><span class="line">        Map&lt;Character, Set&lt;Character&gt;&gt; follow = follow(gs);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Producter producter : gs)&#123;</span><br><span class="line">            select.put(producter, <span class="keyword">new</span> HashSet&lt;&gt;());</span><br><span class="line">            <span class="keyword">if</span>(!first.get(producter.getRight()).contains(<span class="string">&#x27;ε&#x27;</span>))&#123;</span><br><span class="line">                select.get(producter).addAll(first.get(producter.getRight()));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                select.get(producter).addAll(first.get(producter.getRight()));</span><br><span class="line">                select.get(producter).remove(<span class="string">&#x27;ε&#x27;</span>);</span><br><span class="line">                select.get(producter).addAll(follow.get(producter.getLeft()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> select;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回emptyOK + emptyNO</span></span><br><span class="line"><span class="comment">     * 即对非终结符号VN分为了两类：最终可以推出空串的 + 最终也无法推导出空串的（这尤为关键，是整个自上而下分析的基础，一步错步步错）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Set&lt;Character&gt;&gt; can_2_empty(Set&lt;Producter&gt; gs)&#123;</span><br><span class="line">        Set&lt;Character&gt; emptyOK = <span class="keyword">new</span> HashSet&lt;&gt;();                       <span class="comment">// 最终可以推导出空串</span></span><br><span class="line">        Set&lt;Character&gt; emptyNO = <span class="keyword">new</span> HashSet&lt;&gt;();                       <span class="comment">// 最终不可推导出空串</span></span><br><span class="line">        Set&lt;Producter&gt; gs1 = gs;                                        <span class="comment">// GS文法格式1</span></span><br><span class="line">        Map&lt;Character, List&lt;String&gt;&gt; gs2 = GSBuilder.gsHelper(gs);      <span class="comment">// GS文法格式2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一次扫描</span></span><br><span class="line">        <span class="comment">// 对于某个终结符A，如果生成式右侧为ε，即直接可以推导出空串，将该生成式左侧加入emptyOK集合</span></span><br><span class="line">        <span class="keyword">for</span>(Producter producter : gs)&#123;</span><br><span class="line">            <span class="keyword">if</span>(producter.getRight().equals(<span class="string">&quot;ε&quot;</span>)) &#123;</span><br><span class="line">                emptyOK.add(producter.getLeft());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二次扫描</span></span><br><span class="line">        <span class="comment">// 对于某个终结符A，如果以此为左侧的生成式，右侧全都包括至少一个终结符a，则将其加入emptyNO集合</span></span><br><span class="line">        <span class="keyword">for</span>(Character c : gs2.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span>(emptyOK.contains(c))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(String s : gs2.get(c))&#123;</span><br><span class="line">                <span class="keyword">if</span>(!hasVT(s))&#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                emptyNO.add(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环扫描（1次扫描尝试加入emptyOK + 1次扫描尝试加入emptyNO）</span></span><br><span class="line">        <span class="comment">// 当这两个集合都不再变化时，STOP</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 记录一下两个集合每次循环之前的大小，循环结束后比较的时候要用————决定是否还需要下一次循环</span></span><br><span class="line">            <span class="keyword">int</span> emptyOK_num = emptyOK.size();</span><br><span class="line">            <span class="keyword">int</span> emptyNO_num = emptyNO.size();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环中的第一次扫描，当右侧全为非终结符(ABC)并且它们都在emptyOK之中时，将生成式左侧加入emptyOK集合</span></span><br><span class="line">            <span class="keyword">for</span> (Producter producter : gs)&#123;</span><br><span class="line">                <span class="keyword">if</span>(emptyOK.contains(producter.getLeft()) || emptyNO.contains(producter.getLeft()))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!hasVT(producter.getRight()))&#123;</span><br><span class="line">                    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">char</span> i : producter.getRight().toCharArray())&#123;</span><br><span class="line">                        <span class="keyword">if</span>(!emptyOK.contains(i))&#123;</span><br><span class="line">                            flag = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                        emptyOK.add(producter.getLeft());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环中的第二次扫描，对于某个非终结符A，以其为左侧的所有生成式的右侧，都至少包括一个终结符b 或 一个在emptyNO中的非终结符B，则将A加入emptyNO集合</span></span><br><span class="line">            <span class="keyword">for</span>(Character c : gs2.keySet())&#123;</span><br><span class="line">                <span class="keyword">if</span>(emptyOK.contains(c) || emptyNO.contains(c))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(String s : gs2.get(c))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!hasVT(s))&#123;</span><br><span class="line">                        flag = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">char</span> i : s.toCharArray())&#123;</span><br><span class="line">                            <span class="keyword">if</span>(emptyNO.contains(i))&#123;</span><br><span class="line">                                flag = <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                    emptyNO.add(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当这两个集合都不再变化时，跳出循环</span></span><br><span class="line">            <span class="keyword">if</span>(emptyOK_num == emptyOK.size() &amp;&amp; emptyNO_num == emptyNO.size())&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将千辛万苦得到的两个集合（emptyOK + emptyNO）作为返回值返回</span></span><br><span class="line">        List&lt;Set&lt;Character&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        res.add(emptyOK);</span><br><span class="line">        res.add(emptyNO);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否是非终结符VN？</span></span><br><span class="line">    <span class="comment">// 我们认为，大写字母即为非终结符(S, A, B, C, D)</span></span><br><span class="line">    <span class="comment">// 跟严谨的写法是，遍历文法GS的所有生成式Producter，所有生成式左边的字母即为VN，其余为VT</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isVN</span><span class="params">(Character c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Character.isUpperCase(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为终结符VT？</span></span><br><span class="line">    <span class="comment">// 我们认为，小写字母即为终结符(a, b, c, d, e)</span></span><br><span class="line">    <span class="comment">// 注意两点：一，这不严谨；二，「ε」被Java认为是小写字母，但它不是终结符————如果忽略这个细节，后面你将会付出惨痛的代价</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isVT</span><span class="params">(Character c)</span></span>&#123;</span><br><span class="line">        String loli = <span class="string">&quot;()+*&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (Character.isLowerCase(c) || loli.indexOf(c) &gt;= <span class="number">0</span>) &amp;&amp; !c.equals(<span class="string">&#x27;ε&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一个字符串是否包含非终结符？</span></span><br><span class="line">    <span class="comment">// 技巧：取反————这个字符串不包含非终结符————这个字符串是纯终结符串</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasVN</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(isVN(c))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同理</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasVT</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(isVT(c))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将HashMap的value中字符(Character)的个数作为了该数据结构的标志————如果该计数值不变，则认为该数据结构没变</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">countCell</span><span class="params">(Map&lt;Character, Set&lt;Character&gt;&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Set&lt;Character&gt; value : map.values())&#123;</span><br><span class="line">            cnt += value.size();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-LL1类，用于判断是否为LL1文法"><a href="#3-3-LL1类，用于判断是否为LL1文法" class="headerlink" title="3.3 LL1类，用于判断是否为LL1文法"></a>3.3 LL1类，用于判断是否为LL1文法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LL1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否为LL(1)文法————根据First集，Follow集-&gt;Select集</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLL1</span><span class="params">(Set&lt;Producter&gt; gs)</span></span>&#123;</span><br><span class="line">        Map&lt;Producter, Set&lt;Character&gt;&gt; select = <span class="keyword">new</span> F_F_S().select(gs);</span><br><span class="line">        Set&lt;Character&gt; VN = GSBuilder.getVN(gs);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Character vn : VN)&#123;</span><br><span class="line">            Set&lt;Producter&gt; producterSet = producterWithVN(vn, gs);</span><br><span class="line">            Set&lt;Character&gt; tmp = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(Producter producter : producterSet)&#123;</span><br><span class="line">                cnt += select.get(producter).size();</span><br><span class="line">                tmp.addAll(select.get(producter));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt != tmp.size())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Set&lt;Producter&gt; <span class="title">producterWithVN</span><span class="params">(Character vn, Set&lt;Producter&gt; gs)</span></span>&#123;</span><br><span class="line">        Set&lt;Producter&gt; producterSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Producter producter : gs)&#123;</span><br><span class="line">            <span class="keyword">if</span>(producter.getLeft() == vn)&#123;</span><br><span class="line">                producterSet.add(producter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> producterSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-Try2LL1类，尝试转化为LL1文法"><a href="#3-4-Try2LL1类，尝试转化为LL1文法" class="headerlink" title="3.4 Try2LL1类，尝试转化为LL1文法"></a>3.4 Try2LL1类，尝试转化为LL1文法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Try2LL1主要提供了两个方法————「提取公因子extractCommonFactor」+「消除左递归removeRecursin」</span></span><br><span class="line"><span class="comment"> * 类如其名————一切都是为了&quot;尝试将一个非LL1文法转化为等价的LL1文法&quot;，即&quot;Try to LL1&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Try2LL1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *【提取公因子】直接在文法gs的基础上进行等价的修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extractCommonFactor</span><span class="params">(Set&lt;Producter&gt; gs)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 提取公因子之前，先消除隐式的情况</span></span><br><span class="line">        transGs(gs);</span><br><span class="line">        Map&lt;Character, List&lt;String&gt;&gt; gs2 = GSBuilder.gsHelper(gs);</span><br><span class="line">        Set&lt;Character&gt; VN = GSBuilder.getVN(gs);</span><br><span class="line">        <span class="comment">// 维护了一个给新的VN命名的候选数组</span></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] unUsedCase = getUnUsedCase(gs);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Character vn : VN)&#123;</span><br><span class="line">            <span class="comment">// 对于每个非终结符(产生式的左侧)，都尝试消除左递归</span></span><br><span class="line">            List&lt;String&gt; list = gs2.get(vn);</span><br><span class="line">            <span class="comment">// 不是所有的文法，都能在有限步骤内提取出所有的左公因子。换句话说，明明算法正确，但仍有可能死循环————因此设置一个阀值</span></span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (flag &amp;&amp; cnt &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                cnt--;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">// 循环实在是太深了(封装太少的恶果)，这里使用了一个flag+here标签实现跳出多层循环后，再次重新循环</span></span><br><span class="line">                here: <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line">                    String curI = list.get(i);</span><br><span class="line">                    <span class="keyword">while</span> (curI.length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; list.size(); j++)&#123;</span><br><span class="line">                            String curJ = list.get(j);</span><br><span class="line">                            <span class="keyword">if</span>(curJ.indexOf(curI) != <span class="number">0</span>)&#123;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                <span class="comment">// 出现公共前缀</span></span><br><span class="line">                                String s1 = list.get(i);</span><br><span class="line">                                String s2 = list.get(j);</span><br><span class="line">                                String commonFactor = curI;</span><br><span class="line">                                <span class="keyword">char</span> newVN = unUsedCase[k++];</span><br><span class="line">                                String s3 = commonFactor + newVN;</span><br><span class="line">                                list.remove(s1);</span><br><span class="line">                                list.remove(s2);</span><br><span class="line">                                list.add(s3);</span><br><span class="line">                                removeFromGs(gs, vn, s1);</span><br><span class="line">                                removeFromGs(gs, vn, s2);</span><br><span class="line">                                gs.add(<span class="keyword">new</span> Producter(vn + <span class="string">&quot;-&gt;&quot;</span> + s3));</span><br><span class="line">                                gs.add(<span class="keyword">new</span> Producter(newVN + <span class="string">&quot;-&gt;&quot;</span> + (s1.length() == commonFactor.length() ? <span class="string">&quot;ε&quot;</span> : s1.replaceFirst(commonFactor, <span class="string">&quot;&quot;</span>))));</span><br><span class="line">                                gs.add(<span class="keyword">new</span> Producter(newVN + <span class="string">&quot;-&gt;&quot;</span> + (s2.length() == commonFactor.length() ? <span class="string">&quot;ε&quot;</span> : s2.replaceFirst(commonFactor, <span class="string">&quot;&quot;</span>))));</span><br><span class="line">                                flag = <span class="keyword">true</span>;</span><br><span class="line">                                <span class="keyword">break</span> here;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        curI = curI.substring(<span class="number">0</span>, curI.length() - <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 提取公因子之后，删掉不可达的产生式</span></span><br><span class="line">        removeUnReachable(gs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *【消除左递归】直接在文法gs的基础上进行等价的修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeRecursin</span><span class="params">(Set&lt;Producter&gt; gs)</span></span>&#123;</span><br><span class="line">        Set&lt;Character&gt; VN = GSBuilder.getVN(gs);</span><br><span class="line">        Map&lt;Character, List&lt;String&gt;&gt; gs2 = GSBuilder.gsHelper(gs);</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] unUsedCase = getUnUsedCase(gs);</span><br><span class="line">        <span class="comment">// 消除隐式</span></span><br><span class="line">        transGs(gs);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Character vn : VN)&#123;</span><br><span class="line">            List&lt;String&gt; list = gs2.get(vn);</span><br><span class="line">            List&lt;String&gt; alpha = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            List&lt;String&gt; beta = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(String str : list)&#123;</span><br><span class="line">                <span class="keyword">if</span>(str.charAt(<span class="number">0</span>) == vn)&#123;</span><br><span class="line">                    alpha.add(str.substring(<span class="number">1</span>));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(str.equals(<span class="string">&quot;ε&quot;</span>))&#123;</span><br><span class="line">                        str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    beta.add(str);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(alpha.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                removeFromGs(gs, vn);</span><br><span class="line">                <span class="keyword">char</span> newVN = unUsedCase[k++];</span><br><span class="line">                <span class="keyword">for</span>(String s : beta)&#123;</span><br><span class="line">                    gs.add(<span class="keyword">new</span> Producter(vn + <span class="string">&quot;-&gt;&quot;</span> + s + newVN));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(String s : alpha)&#123;</span><br><span class="line">                    gs.add(<span class="keyword">new</span> Producter(newVN + <span class="string">&quot;-&gt;&quot;</span> + s + newVN));</span><br><span class="line">                &#125;</span><br><span class="line">                gs.add(<span class="keyword">new</span> Producter(newVN + <span class="string">&quot;-&gt;&quot;</span> + <span class="string">&quot;ε&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 同样，删掉不可到达的生成式</span></span><br><span class="line">        removeUnReachable(gs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 简单的功能性方法————比如目前已有的VN有SABC，这个方法会返回除了这几个之外的所有大写字母，作为候选</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] getUnUsedCase(Set&lt;Producter&gt; gs)&#123;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Set&lt;Character&gt; VN = GSBuilder.getVN(gs);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line">            set.add((<span class="keyword">char</span>)(<span class="string">&#x27;A&#x27;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">        set.removeAll(VN);</span><br><span class="line">        <span class="keyword">char</span>[] res = <span class="keyword">new</span> <span class="keyword">char</span>[set.size()];</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c : set)&#123;</span><br><span class="line">            res[k++] = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消除隐式</span></span><br><span class="line"><span class="comment">     * 在「提取公因子」「消除左递归」之前进行隐式的消除————如果产生式的右部以非终结符(ABC)开头，那么公因子有可能是隐式的；递归同理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transGs</span><span class="params">(Set&lt;Producter&gt; gs)</span></span>&#123;</span><br><span class="line">        Set&lt;Character&gt; VN = GSBuilder.getVN(gs);</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            Set&lt;Producter&gt; trash = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            Set&lt;Producter&gt; wait = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(Producter producter : gs)&#123;</span><br><span class="line">                Character c = producter.getRight().charAt(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 这里多讨论了一下：比如 A-&gt;Aa|b，这就属于左递归的范畴。</span></span><br><span class="line">                <span class="comment">// 如果执迷于消除全部产生式的右部第一个VN，会死循环的————这就是「左递归」的陷阱，也是之后的工作</span></span><br><span class="line">                <span class="keyword">if</span>(VN.contains(c) &amp;&amp; c != producter.getLeft())&#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    Map&lt;Character, List&lt;String&gt;&gt; gs2 = GSBuilder.gsHelper(gs);</span><br><span class="line">                    List&lt;String&gt; arr = gs2.get(c);</span><br><span class="line">                    trash.add(producter);</span><br><span class="line">                    <span class="keyword">for</span>(String s : arr)&#123;</span><br><span class="line">                        <span class="comment">// 你不能用一个递归的式子去进行首字母的替换</span></span><br><span class="line">                        <span class="keyword">if</span>(s.charAt(<span class="number">0</span>) == c)&#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        Character newLeft = producter.getLeft();</span><br><span class="line">                        String newRight = producter.getRight().replaceFirst(String.valueOf(c), s);</span><br><span class="line">                        wait.add(<span class="keyword">new</span> Producter(newLeft + <span class="string">&quot;-&gt;&quot;</span> + newRight));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            gs.removeAll(trash);</span><br><span class="line">            gs.addAll(wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除不可达</span></span><br><span class="line"><span class="comment">     * 在「提取公因子」「消除左递归」之后进行不可达生成式的删除————有些生成式可能会变得不可达，完全可以删掉</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeUnReachable</span><span class="params">(Set&lt;Producter&gt; gs)</span></span>&#123;</span><br><span class="line">        Set&lt;Character&gt; reachableVN = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Set&lt;Character&gt; unreachableVN = GSBuilder.getVN(gs);</span><br><span class="line">        <span class="keyword">for</span>(Producter producter : gs)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> vn : unreachableVN)&#123;</span><br><span class="line">                <span class="keyword">if</span>(producter.getRight().indexOf(vn) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    reachableVN.add(vn);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 排除&quot;可达到&quot;的非终结符VN，以及S（S作为起始符号，必然是&quot;可到达&quot;的）</span></span><br><span class="line">        unreachableVN.removeAll(reachableVN);</span><br><span class="line">        unreachableVN.remove(<span class="string">&#x27;S&#x27;</span>);</span><br><span class="line">        Set&lt;Producter&gt; trash = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Producter producter : gs)&#123;</span><br><span class="line">            <span class="keyword">if</span>(unreachableVN.contains(producter.getLeft()))&#123;</span><br><span class="line">                trash.add(producter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        gs.removeAll(trash);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装了一个简单的功能：从文法中删除某些产生式</span></span><br><span class="line">    <span class="comment">// 的是使上面的代码美观清晰</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeFromGs</span><span class="params">(Set&lt;Producter&gt; gs, Character left, String right)</span></span>&#123;</span><br><span class="line">        Set&lt;Producter&gt; trash = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Producter producter : gs)&#123;</span><br><span class="line">            <span class="keyword">if</span>(producter.getLeft() == left &amp;&amp; producter.getRight().equals(right))&#123;</span><br><span class="line">                trash.add(producter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        gs.removeAll(trash);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeFromGs</span><span class="params">(Set&lt;Producter&gt; gs, Character left)</span></span>&#123;</span><br><span class="line">        Set&lt;Producter&gt; trash = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Producter producter : gs)&#123;</span><br><span class="line">            <span class="keyword">if</span>(producter.getLeft() == left)&#123;</span><br><span class="line">                trash.add(producter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        gs.removeAll(trash);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装了一个简单的功能：向文法中添加某些产生式</span></span><br><span class="line">    <span class="comment">// 的是使上面的代码美观清晰</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addToGs</span><span class="params">(Set&lt;Producter&gt; gs, Character newVN, String s, String commonFactor)</span></span>&#123;</span><br><span class="line">        String newRight = s.replaceFirst(commonFactor, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(newRight.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            newRight = <span class="string">&quot;ε&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        gs.add(<span class="keyword">new</span> Producter(newVN + <span class="string">&quot;-&gt;&quot;</span> + newRight));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-PredictTable类，根据Select集得到预测表"><a href="#3-5-PredictTable类，根据Select集得到预测表" class="headerlink" title="3.5 PredictTable类，根据Select集得到预测表"></a>3.5 PredictTable类，根据Select集得到预测表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredictTable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员变量为一个Table，下面的方法都是对该表的操作</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Character, Map&lt;Character, Producter&gt;&gt; table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// makePredictTable建表</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Character, Map&lt;Character, Producter&gt;&gt; makePredictTable(Map&lt;Producter, Set&lt;Character&gt;&gt; select)&#123;</span><br><span class="line">        Map&lt;Character, Map&lt;Character, Producter&gt;&gt; table = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Producter producter : select.keySet())&#123;</span><br><span class="line">            Character vn = producter.getLeft();</span><br><span class="line">            Set&lt;Character&gt; set = select.get(producter);</span><br><span class="line">            Map&lt;Character, Producter&gt; map = table.containsKey(vn) ? table.get(vn) : <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(Character c : set)&#123;</span><br><span class="line">                map.put(c, producter);</span><br><span class="line">            &#125;</span><br><span class="line">            table.put(vn, map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> table;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// findTable查表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findTable</span><span class="params">(Map&lt;Character, Map&lt;Character, Producter&gt;&gt; table, Character vn, Character vt)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(table.get(vn) != <span class="keyword">null</span> &amp;&amp; table.get(vn).get(vt) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> table.get(vn).get(vt).getRight().equals(<span class="string">&quot;ε&quot;</span>) ? <span class="string">&quot;&quot;</span> : table.get(vn).get(vt).getRight();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ERROR&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-6-Analysis类，分析句子"><a href="#3-6-Analysis类，分析句子" class="headerlink" title="3.6 Analysis类，分析句子"></a>3.6 Analysis类，分析句子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Analysis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">analysis</span><span class="params">(Map&lt;Producter, Set&lt;Character&gt;&gt; select, String str)</span></span>&#123;</span><br><span class="line">        Map&lt;Character, Map&lt;Character, Producter&gt;&gt; table = <span class="keyword">new</span> PredictTable().makePredictTable(select);</span><br><span class="line"></span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">        stack.push(<span class="string">&#x27;S&#x27;</span>);</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            Character X = stack.pop();</span><br><span class="line">            Character Y = str.charAt(index);</span><br><span class="line">            <span class="keyword">if</span>(X == <span class="string">&#x27;#&#x27;</span> &amp;&amp; Y == <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;接受！！！自顶向下分析成功！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isVN(X))&#123;</span><br><span class="line">                String tmp = <span class="keyword">new</span> PredictTable().findTable(table, X, Y);</span><br><span class="line">                <span class="keyword">if</span>(tmp.equals(<span class="string">&quot;ERROR&quot;</span>))&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;推导失败！自顶向下分析失败！&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;【推导】&quot;</span> + X + <span class="string">&quot;-&gt;&quot;</span> + (tmp.equals(<span class="string">&quot;&quot;</span>) ? <span class="string">&quot;ε&quot;</span> : tmp));</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = tmp.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">                        stack.push(tmp.charAt(i));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(X == Y)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;【匹配】&quot;</span> + Y);</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;匹配失败！自顶向下分析失败！&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 老生常谈了，判断VN/VT</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isVN</span><span class="params">(Character c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Character.isUpperCase(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isVT</span><span class="params">(Character c)</span></span>&#123;</span><br><span class="line">        String loli = <span class="string">&quot;()+*&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (Character.isLowerCase(c) || loli.indexOf(c) &gt;= <span class="number">0</span>) &amp;&amp; !c.equals(<span class="string">&#x27;ε&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-7-GSBuilder工具类"><a href="#3-7-GSBuilder工具类" class="headerlink" title="3.7 GSBuilder工具类"></a>3.7 GSBuilder工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GSBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受输入，返回GS文法，即产生式的集合：Set&lt;Producter&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Producter&gt; <span class="title">build</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Set&lt;Producter&gt; gs = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (!(line = br.readLine().trim()).equals(<span class="string">&quot;end&quot;</span>))&#123;</span><br><span class="line">            gs.add(<span class="keyword">new</span> Producter(line));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将文法GS转换成Map&lt;非终结符, 对应规则的集合&gt;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Character, List&lt;String&gt;&gt; gsHelper(Set&lt;Producter&gt; gs)&#123;</span><br><span class="line">        Map&lt;Character, List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Producter producter : gs)&#123;</span><br><span class="line">            Character c = producter.getLeft();</span><br><span class="line">            String s = producter.getRight();</span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(c))&#123;</span><br><span class="line">                List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                map.put(c, list);</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(c).add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据文法GS，获取所有的非终结符集</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Character&gt; <span class="title">getVN</span><span class="params">(Set&lt;Producter&gt; gs)</span></span>&#123;</span><br><span class="line">        Set&lt;Character&gt; vn = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Producter producter : gs)&#123;</span><br><span class="line">            vn.add(producter.getLeft());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据文法GS，获取所有的终结符集</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Character&gt; <span class="title">getVT</span><span class="params">(Set&lt;Producter&gt; gs)</span></span>&#123;</span><br><span class="line">        Set&lt;Character&gt; vt = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        String loli = <span class="string">&quot;()+*&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(Producter producter : gs)&#123;</span><br><span class="line">            <span class="keyword">for</span>(Character c : producter.getRight().toCharArray())&#123;</span><br><span class="line">                <span class="keyword">if</span>(Character.isLowerCase(c) || loli.indexOf(c) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    vt.add(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这两个方法的返回值主要是为了给Map做key的，所以把&#x27;ε&#x27;算上了————其他地方可别把ε作为终结符了！！！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-8-Main测试类"><a href="#3-8-Main测试类" class="headerlink" title="3.8 Main测试类"></a>3.8 Main测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==========================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入文法GS（一行一行的输入生成式，end表示结束）：&quot;</span>);</span><br><span class="line">        Set&lt;Producter&gt; gs = GSBuilder.build();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=================直接尝试==================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;首符集First是：&quot;</span>);</span><br><span class="line">        Map&lt;String, Set&lt;Character&gt;&gt; first = <span class="keyword">new</span> F_F_S().first(gs);</span><br><span class="line">        <span class="keyword">for</span>(String str : first.keySet())&#123;</span><br><span class="line">            System.out.print(str);</span><br><span class="line">            System.out.print(<span class="string">&quot; : &quot;</span>);</span><br><span class="line">            System.out.println(first.get(str));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;随符集Follow是：&quot;</span>);</span><br><span class="line">        Map&lt;Character, Set&lt;Character&gt;&gt; follow = <span class="keyword">new</span> F_F_S().follow(gs);</span><br><span class="line">        <span class="keyword">for</span>(Character key : follow.keySet())&#123;</span><br><span class="line">            System.out.print(key);</span><br><span class="line">            System.out.print(<span class="string">&quot; : &quot;</span>);</span><br><span class="line">            System.out.println(follow.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Select集是：&quot;</span>);</span><br><span class="line">        Map&lt;Producter, Set&lt;Character&gt;&gt; select = <span class="keyword">new</span> F_F_S().select(gs);</span><br><span class="line">        <span class="keyword">for</span>(Producter producter : select.keySet())&#123;</span><br><span class="line">            System.out.print(producter);</span><br><span class="line">            System.out.print(<span class="string">&quot; : &quot;</span>);</span><br><span class="line">            System.out.println(select.get(producter));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;是否是LL(1)文法呢？：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> LL1().isLL1(gs));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=================尝试改造==================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;提取公因子...&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Try2LL1().extractCommonFactor(gs);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;消除左递归...&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Try2LL1().removeRecursin(gs);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;处理后，首符集First是：&quot;</span>);</span><br><span class="line">        first = <span class="keyword">new</span> F_F_S().first(gs);</span><br><span class="line">        <span class="keyword">for</span>(String str : first.keySet())&#123;</span><br><span class="line">            System.out.print(str);</span><br><span class="line">            System.out.print(<span class="string">&quot; : &quot;</span>);</span><br><span class="line">            System.out.println(first.get(str));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;处理后，随符集Follow是：&quot;</span>);</span><br><span class="line">        follow = <span class="keyword">new</span> F_F_S().follow(gs);</span><br><span class="line">        <span class="keyword">for</span>(Character key : follow.keySet())&#123;</span><br><span class="line">            System.out.print(key);</span><br><span class="line">            System.out.print(<span class="string">&quot; : &quot;</span>);</span><br><span class="line">            System.out.println(follow.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;处理后，Select集是：&quot;</span>);</span><br><span class="line">        select = <span class="keyword">new</span> F_F_S().select(gs);</span><br><span class="line">        <span class="keyword">for</span>(Producter producter : select.keySet())&#123;</span><br><span class="line">            System.out.print(producter);</span><br><span class="line">            System.out.print(<span class="string">&quot; : &quot;</span>);</span><br><span class="line">            System.out.println(select.get(producter));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;处理后，是否是LL(1)文法呢？：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> LL1().isLL1(gs));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;==========================================&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入要检查的串：&quot;</span>);</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            String str = br.readLine();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(str.equals(<span class="string">&quot;end&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;------------------------------------------&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> Analysis().analysis(<span class="keyword">new</span> F_F_S().select(gs), str + <span class="string">&quot;#&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">S-&gt;S+T</span></span><br><span class="line"><span class="comment">S-&gt;T</span></span><br><span class="line"><span class="comment">T-&gt;T*F</span></span><br><span class="line"><span class="comment">T-&gt;F</span></span><br><span class="line"><span class="comment">F-&gt;i</span></span><br><span class="line"><span class="comment">F-&gt;(S)</span></span><br><span class="line"><span class="comment">end</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&quot;i+i*i&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2 id="4、测试结果"><a href="#4、测试结果" class="headerlink" title="4、测试结果"></a>4、测试结果</h2><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">==========================================</span><br><span class="line">请输入文法GS（一行一行的输入生成式，<span class="keyword">end</span>表示结束）：</span><br><span class="line">S-&gt;S+T</span><br><span class="line">S-&gt;T</span><br><span class="line">T-&gt;T*F</span><br><span class="line">T-&gt;F</span><br><span class="line">F-&gt;i</span><br><span class="line">F-&gt;(S)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">=================直接尝试==================</span><br><span class="line">首符集First是：</span><br><span class="line">T*F : [(, <span class="type">i</span>]</span><br><span class="line">T : [<span class="type">T</span>, (, i]</span><br><span class="line">F : [<span class="type">F</span>, (, i]</span><br><span class="line">i : [<span class="type">i</span>]</span><br><span class="line">S+T : [(, <span class="type">i</span>]</span><br><span class="line">(S) : [(]</span><br><span class="line"><span class="comment">------------------------------------------</span></span><br><span class="line">随符集Follow是：</span><br><span class="line">S : [#, ), +]</span><br><span class="line">T : [#, ), *, +]</span><br><span class="line">F : [#, ), *, +]</span><br><span class="line"><span class="comment">------------------------------------------</span></span><br><span class="line"><span class="keyword">Select</span>集是：</span><br><span class="line">T-&gt;F : [<span class="type">F</span>, (, i]</span><br><span class="line">T-&gt;T*F : [(, <span class="type">i</span>]</span><br><span class="line">F-&gt;(S) : [(]</span><br><span class="line">S-&gt;T : [<span class="type">T</span>, (, i]</span><br><span class="line">S-&gt;S+T : [(, <span class="type">i</span>]</span><br><span class="line">F-&gt;i : [<span class="type">i</span>]</span><br><span class="line"><span class="comment">------------------------------------------</span></span><br><span class="line">是否是LL(<span class="number">1</span>)文法呢？：</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">=================尝试改造==================</span><br><span class="line">提取公因子...</span><br><span class="line"><span class="comment">------------------------------------------</span></span><br><span class="line">消除左递归...</span><br><span class="line"><span class="comment">------------------------------------------</span></span><br><span class="line">处理后，首符集First是：</span><br><span class="line">(S)A : [(]</span><br><span class="line">ε : [ε]</span><br><span class="line">*FB : [*]</span><br><span class="line">(S)B : [(]</span><br><span class="line">+TA : [+]</span><br><span class="line">iA : [<span class="type">i</span>]</span><br><span class="line">i : [<span class="type">i</span>]</span><br><span class="line">iB : [<span class="type">i</span>]</span><br><span class="line">(S) : [(]</span><br><span class="line"><span class="comment">------------------------------------------</span></span><br><span class="line">处理后，随符集Follow是：</span><br><span class="line">A : [#, )]</span><br><span class="line">B : [#, ), +]</span><br><span class="line">S : [#, )]</span><br><span class="line">T : [#, ), +]</span><br><span class="line">F : [#, ), *, +]</span><br><span class="line"><span class="comment">------------------------------------------</span></span><br><span class="line">处理后，<span class="keyword">Select</span>集是：</span><br><span class="line">A-&gt;ε : [#, )]</span><br><span class="line">F-&gt;(S) : [(]</span><br><span class="line">T-&gt;(S)B : [(]</span><br><span class="line">B-&gt;*FB : [*]</span><br><span class="line">S-&gt;(S)A : [(]</span><br><span class="line">B-&gt;ε : [#, ), +]</span><br><span class="line">A-&gt;+TA : [+]</span><br><span class="line">F-&gt;i : [<span class="type">i</span>]</span><br><span class="line">S-&gt;iA : [<span class="type">i</span>]</span><br><span class="line">T-&gt;iB : [<span class="type">i</span>]</span><br><span class="line"><span class="comment">------------------------------------------</span></span><br><span class="line">处理后，是否是LL(<span class="number">1</span>)文法呢？：</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">==========================================</span><br><span class="line">请输入要检查的串：</span><br><span class="line">i+i*i</span><br><span class="line"><span class="comment">------------------------------------------</span></span><br><span class="line">【推导】S-&gt;iA</span><br><span class="line">【匹配】i</span><br><span class="line">【推导】A-&gt;+TA</span><br><span class="line">【匹配】+</span><br><span class="line">【推导】T-&gt;iB</span><br><span class="line">【匹配】i</span><br><span class="line">【推导】B-&gt;*FB</span><br><span class="line">【匹配】*</span><br><span class="line">【推导】F-&gt;i</span><br><span class="line">【匹配】i</span><br><span class="line">【推导】B-&gt;ε</span><br><span class="line">【推导】A-&gt;ε</span><br><span class="line">接受！！！自顶向下分析成功！</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>自上而下的语法分析</tag>
      </tags>
  </entry>
  <entry>
    <title>finite_automaton</title>
    <url>/2021/03/30/finite-automaton/</url>
    <content><![CDATA[<h1 id="编译原理实验2——正则表达式-gt-NFA-gt-DFA-gt-MFA"><a href="#编译原理实验2——正则表达式-gt-NFA-gt-DFA-gt-MFA" class="headerlink" title="编译原理实验2——正则表达式-&gt;NFA-&gt;DFA-&gt;MFA"></a>编译原理实验2——正则表达式-&gt;NFA-&gt;DFA-&gt;MFA</h1><h2 id="1、词法分析理论基础：有穷自动机（FA）"><a href="#1、词法分析理论基础：有穷自动机（FA）" class="headerlink" title="1、词法分析理论基础：有穷自动机（FA）"></a>1、词法分析理论基础：有穷自动机（FA）</h2><h3 id="1-1-起源与定义"><a href="#1-1-起源与定义" class="headerlink" title="1.1 起源与定义"></a>1.1 起源与定义</h3><ul>
<li>有穷自动机(Finite Automata，FA)由两位神经物理学家MeCuloch和Pitts于1948年首先提出，是对一类处理系统建立的数学模型；</li>
<li>这类系统具有一系列<strong>离散</strong>的输入输出信息和<strong>有穷</strong>数目的内部状态（状态：概括了对过去输入信息处理的状况）；</li>
<li>系统只需要根据当前所处的状态和当前面临的输入信息就可以决定系统的后继行为。每当系统处理了当前的输入后，系统的内部状态也将发生改变。</li>
</ul>
<a id="more"></a>

<h3 id="1-2-FA分类"><a href="#1-2-FA分类" class="headerlink" title="1.2 FA分类"></a>1.2 FA分类</h3><ul>
<li>确定的FA（Deterministic finite automata, DFA）</li>
<li>非确定的FA（Nondeterministic finit automata, NFA）</li>
</ul>
<h3 id="1-3-确定的有穷自动机（DFA）"><a href="#1-3-确定的有穷自动机（DFA）" class="headerlink" title="1.3 确定的有穷自动机（DFA）"></a>1.3 确定的有穷自动机（DFA）</h3><p>DFA被定义为一个五元组：M = ( S , Σ , δ , S0 , F ) </p>
<ul>
<li>S：有穷状态集；</li>
<li>Σ：输入字母表，即输入符号集合。假设ε不是Σ中的元素；</li>
<li>δ：将S×Σ映射到S的转换函数。∀ s ∈ S , a ∈ Σ , δ ( s , a ) 表示从状态s出发，沿着标记为a的边所能到达的状态（即状态S对应于输入符号的后继状态）；</li>
<li>S0：开始状态（或初始状态），S0∈S；</li>
<li>F：接收状态（或终止状态）集合，F⊆S。</li>
</ul>
<h3 id="1-4-非确定的有穷自动机（NFA）"><a href="#1-4-非确定的有穷自动机（NFA）" class="headerlink" title="1.4 非确定的有穷自动机（NFA）"></a>1.4 非确定的有穷自动机（NFA）</h3><p>NFA被定义为一个五元组：M = ( S , Σ , δ , S0 , F ) </p>
<ul>
<li>S：有穷状态集；</li>
<li>Σ：输入字母表，即输入符号集合。假设ε不是Σ中的元素；</li>
<li>δ：将S×Σ映射到S的转换函数。∀ s ∈ S , a ∈ Σ , δ ( s , a ) 表示从状态s出发，沿着标记为a的边所能到达的状态（即状态S对应于输入符号的后继状态）；</li>
<li>S0：开始状态（或初始状态）<strong>集合</strong>，S0⊆S；</li>
<li>F：接收状态（或终止状态）集合，F⊆S。</li>
</ul>
<h3 id="1-5-DFA和NFA的等价性"><a href="#1-5-DFA和NFA的等价性" class="headerlink" title="1.5 DFA和NFA的等价性"></a>1.5 DFA和NFA的等价性</h3><ul>
<li>对任何非确定的有穷自动机N ，存在定义同一语言的确定的有穷自动机D；</li>
<li>对任何确定的有穷自动机D ，存在定义同一语言的非确定的有穷自动机N；</li>
</ul>
<h2 id="2、算法1：NFA确定化为DFA"><a href="#2、算法1：NFA确定化为DFA" class="headerlink" title="2、算法1：NFA确定化为DFA"></a>2、算法1：NFA确定化为DFA</h2><p>DFA确定化的核心算法： <strong>子集法</strong></p>
<p>通俗的说：首先明确，</p>
<ol>
<li>NFA中的多个状态，共同组成了DFA中的多个状态。</li>
<li>我们先将NFA的初态集的闭包入队，然后BFS</li>
<li>每次从queue中取出一个状态集，用字母表的每个字母对其进行一次转换后取闭包（ε-closure(move(State))），如果产生新状态则入队，继续BFS。</li>
</ol>
<p>其中，较为关键是基于一次转化函数的move、以及ε-closure闭包函数。代码中专门有注释说明。</p>
<h3 id="2-1-首先定义NFA和DFA的JavaBean类"><a href="#2-1-首先定义NFA和DFA的JavaBean类" class="headerlink" title="2.1 首先定义NFA和DFA的JavaBean类"></a>2.1 首先定义NFA和DFA的JavaBean类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NFA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; S;    	<span class="comment">// 状态集</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] cigama;     		<span class="comment">// 字母表</span></span><br><span class="line">    <span class="keyword">private</span> String[][] convert; 	<span class="comment">// 转换函数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; S0;   	<span class="comment">// 初态集</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; F;    	<span class="comment">// 终态集</span></span><br><span class="line">    <span class="comment">// setter和getter这里省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DFA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; S;     	<span class="comment">// 状态集</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] cigama;     	 	<span class="comment">// 字母表</span></span><br><span class="line">    <span class="keyword">private</span> String[][] convert;  	<span class="comment">// 转换函数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> S0;              	<span class="comment">// 唯一初态</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; F;     	<span class="comment">// 终态集</span></span><br><span class="line">	<span class="comment">// setter和getter这里省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-子集法核心逻辑实现"><a href="#2-2-子集法核心逻辑实现" class="headerlink" title="2.2 子集法核心逻辑实现"></a>2.2 子集法核心逻辑实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NTD</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 	 * definite:【子集法】将NFA确定化为DFA</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nfa 输入nfa</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>    返回dfa</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 伪代码逻辑：</span></span><br><span class="line"><span class="comment">     *  DFA状态集合S(注：S的每个成员又都是NFA的状态state的集合)</span></span><br><span class="line"><span class="comment">     *  Queue 临时队列queue;</span></span><br><span class="line"><span class="comment">     *  NFA的初态集S(S0)的闭包入队;</span></span><br><span class="line"><span class="comment">     *  while(队不空):</span></span><br><span class="line"><span class="comment">     *      取出当前状态集currStates;</span></span><br><span class="line"><span class="comment">     *      for 每个输入字母 in cigama:</span></span><br><span class="line"><span class="comment">     *             nextStates = ε-closure(move(currStates, letter));</span></span><br><span class="line"><span class="comment">     *             if(S 不包含 nextStates) :</span></span><br><span class="line"><span class="comment">     *                  则nextStates入队</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  最终的S即为确定化生成的DFA的状态集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DFA <span class="title">definite</span><span class="params">(NFA nfa)</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; States = nfa.getS0();</span><br><span class="line">        <span class="keyword">char</span>[] cigama = nfa.getCigama();</span><br><span class="line">        String[][] convert = nfa.getConvert();</span><br><span class="line">        List&lt;Integer&gt; F = nfa.getF();</span><br><span class="line"></span><br><span class="line">        DFA dfa = <span class="keyword">new</span> DFA();</span><br><span class="line">        List&lt;Integer&gt; S = <span class="keyword">new</span> ArrayList&lt;&gt;();             <span class="comment">// DFA状态集合(已重命名)</span></span><br><span class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;                                       <span class="comment">// 用于DFA状态集的重命名</span></span><br><span class="line">        List&lt;String[]&gt; listConvert = <span class="keyword">new</span> ArrayList&lt;&gt;();        <span class="comment">// 用于暂存转换函数</span></span><br><span class="line">        List&lt;Integer&gt; listF = <span class="keyword">new</span> ArrayList&lt;&gt;();         <span class="comment">// 用于暂存终态集</span></span><br><span class="line"></span><br><span class="line">        Set&lt;List&lt;Integer&gt;&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();               <span class="comment">// 状态集临时集合</span></span><br><span class="line">        Queue&lt;List&lt;Integer&gt;&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();        <span class="comment">// 状态集临时队列</span></span><br><span class="line">        Map&lt;List&lt;Integer&gt;, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();      <span class="comment">//「状态集」向「命名」的映射</span></span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; closure_S = closure(States, convert);     <span class="comment">//闭包运算，获取当前真正状态集</span></span><br><span class="line">        S.add(s);</span><br><span class="line">        map.put(closure_S, s++);</span><br><span class="line">        queue.add(closure_S);</span><br><span class="line">        System.out.println(<span class="string">&quot;====================process====================&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;                  <span class="comment">// BFS</span></span><br><span class="line">            List&lt;Integer&gt; currStates = queue.poll();</span><br><span class="line">            <span class="comment">//打印状态生成过程</span></span><br><span class="line">            System.out.print(<span class="string">&quot;原状态：&quot;</span> + currStates);</span><br><span class="line">            System.out.print(<span class="string">&quot;\t新状态：&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> letter : cigama)&#123;</span><br><span class="line">                List&lt;Integer&gt; nextStates = closure(move(currStates, letter, convert), convert);</span><br><span class="line">                <span class="keyword">if</span>(nextStates.isEmpty())&#123;</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;Ø&quot;);</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!containsS(set, nextStates))&#123;</span><br><span class="line">                    <span class="comment">// 如果产生了一个新状态，就进行接下来的诸多操作</span></span><br><span class="line">                    <span class="comment">// 给它一个新名字并维护s、确定它是不是终态(包含NFA的终态)、入集合、入队</span></span><br><span class="line">                    nextStates.sort(Comparator.comparing(Integer::intValue));</span><br><span class="line">                    map.put(nextStates, s);</span><br><span class="line">                    S.add(s);</span><br><span class="line">                    <span class="keyword">if</span>(!Collections.disjoint(nextStates, F))&#123;</span><br><span class="line">                        listF.add(s);</span><br><span class="line">                    &#125;</span><br><span class="line">                    set.add(nextStates);</span><br><span class="line">                    queue.add(nextStates);</span><br><span class="line">                    s++;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(nextStates+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                listConvert.add(<span class="keyword">new</span> String[]&#123;String.valueOf(map.get(currStates)), String.valueOf(letter), String.valueOf(map.get(nextStates))&#125;);</span><br><span class="line">                System.out.print(<span class="string">&quot;转换函数：&quot;</span>+map.get(currStates)+letter+map.get(nextStates)+<span class="string">&quot;;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 下面是构造出DFA对象，作为返回值</span></span><br><span class="line">        <span class="keyword">int</span> len = S.size();</span><br><span class="line">        String[][] newConvert = <span class="keyword">new</span> String[len][len];</span><br><span class="line">        <span class="keyword">for</span>(String[] tmp : newConvert)&#123;</span><br><span class="line">            Arrays.fill(tmp, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(String[] arr : listConvert)&#123;</span><br><span class="line">            newConvert[Integer.parseInt(arr[<span class="number">0</span>])][Integer.parseInt(arr[<span class="number">2</span>])] += arr[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        dfa.setS(S);</span><br><span class="line">        dfa.setCigama(cigama);</span><br><span class="line">        dfa.setConvert(newConvert);</span><br><span class="line">        dfa.setS0(<span class="number">0</span>);</span><br><span class="line">        dfa.setF(listF);</span><br><span class="line">        <span class="keyword">return</span> dfa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ε-closure闭包运算：某个状态集经过任意多个ε，得到当前的真正状态集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> State 当前状态集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前真正的状态集(closureS)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">closure</span><span class="params">(List&lt;Integer&gt; State, String[][] convert)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 经过任意多个ε，因此BFS ！ ！ ！</span></span><br><span class="line">        List&lt;Integer&gt; closureS  = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : State)&#123;</span><br><span class="line">            queue.add(i);</span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">int</span> currState = queue.poll();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> iNext = <span class="number">0</span>; iNext &lt; convert.length; iNext++)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">char</span> c : convert[currState][iNext].toCharArray())&#123;</span><br><span class="line">                        <span class="keyword">if</span>(c == <span class="string">&#x27;ε&#x27;</span> &amp;&amp; !closureS.contains(iNext))&#123;</span><br><span class="line">                            closureS.add(iNext);</span><br><span class="line">                            <span class="keyword">if</span>(currState != iNext)&#123;</span><br><span class="line">                                queue.add(iNext);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> closureS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * move方法：当前状态集通过某个字母可以转化到的下一状态集（一步转换，没有进行ε-闭包运算）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> State 当前的状态集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> nextStates 返回下一状态集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">move</span><span class="params">(List&lt;Integer&gt; State, <span class="keyword">char</span> letter, String[][] convert)</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; nextStates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : State)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> iNext = <span class="number">0</span>; iNext &lt; convert.length; iNext++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> c : convert[i][iNext].toCharArray())&#123;</span><br><span class="line">                    <span class="keyword">if</span>(c == letter &amp;&amp; !nextStates.contains(iNext)) &#123;</span><br><span class="line">                        nextStates.add(iNext);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextStates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断一个Set&lt;List&gt;是否包含某个List</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">containsS</span><span class="params">(Set&lt;List&lt;Integer&gt;&gt; set, List&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(List&lt;Integer&gt; l : set)&#123;</span><br><span class="line">            <span class="keyword">if</span>(listEquals(l, list))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断两个List集合是否相等（不考虑顺序）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">listEquals</span><span class="params">(List&lt;Integer&gt; list1, List&lt;Integer&gt; list2)</span></span>&#123;</span><br><span class="line">        list1.sort(Comparator.comparing(Integer::intValue));</span><br><span class="line">        list2.sort(Comparator.comparing(Integer::intValue));</span><br><span class="line">        <span class="keyword">return</span> list1.toString().equals(list2.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-定义ReadNFAUtil工具类获取NFA五元组的信息"><a href="#2-3-定义ReadNFAUtil工具类获取NFA五元组的信息" class="headerlink" title="2.3 定义ReadNFAUtil工具类获取NFA五元组的信息"></a>2.3 定义ReadNFAUtil工具类获取NFA五元组的信息</h3><h4 id="1-准备一个NFA作为测试案例"><a href="#1-准备一个NFA作为测试案例" class="headerlink" title="1. 准备一个NFA作为测试案例"></a>1. 准备一个NFA作为测试案例</h4><p><img src="/2021/03/30/finite-automaton/image-20210330155914801.png" alt="image-20210330155914801"></p>
<h4 id="2-将对应的五元组写入txt文件"><a href="#2-将对应的五元组写入txt文件" class="headerlink" title="2. 将对应的五元组写入txt文件"></a>2. 将对应的五元组写入txt文件</h4><p><code>注意：状态从0开始定义</code></p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">S=<span class="number">01234567</span></span><br><span class="line">cigama=ab</span><br><span class="line"><span class="built_in">convert</span>=<span class="number">0</span>ε<span class="number">1</span></span><br><span class="line"><span class="built_in">convert</span>=<span class="number">0</span>ε<span class="number">2</span></span><br><span class="line"><span class="built_in">convert</span>=1a1</span><br><span class="line"><span class="built_in">convert</span>=<span class="number">1</span>ε<span class="number">3</span></span><br><span class="line"><span class="built_in">convert</span>=<span class="number">2b2</span></span><br><span class="line"><span class="built_in">convert</span>=<span class="number">2</span>ε<span class="number">3</span></span><br><span class="line"><span class="built_in">convert</span>=<span class="number">3b4</span></span><br><span class="line"><span class="built_in">convert</span>=<span class="number">4</span>ε<span class="number">5</span></span><br><span class="line"><span class="built_in">convert</span>=<span class="number">5</span>ε<span class="number">7</span></span><br><span class="line"><span class="built_in">convert</span>=<span class="number">5b6</span></span><br><span class="line"><span class="built_in">convert</span>=6a5</span><br><span class="line">S0=<span class="number">0</span></span><br><span class="line">F=<span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>这里将其命名为NTD.txt</p>
<h4 id="3-定义ReadNFAUtil工具类，读入五元组信息"><a href="#3-定义ReadNFAUtil工具类，读入五元组信息" class="headerlink" title="3. 定义ReadNFAUtil工具类，读入五元组信息"></a>3. 定义ReadNFAUtil工具类，读入五元组信息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadNFAUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[][] convert;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NFA <span class="title">readFile</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//以字符方式读取文本文件</span></span><br><span class="line">        FileReader fis = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        NFA nfa = <span class="keyword">new</span> NFA();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileReader(filePath);</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(fis);</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                String declare = line.split(<span class="string">&quot;=&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">                String value = line.split(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">switch</span> (declare)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;S&quot;</span>:readS(nfa,value);<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;cigama&quot;</span>:readCigama(nfa,value);<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;convert&quot;</span>:readConvert(nfa,value);<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;S0&quot;</span>:readS0(nfa,value);<span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;F&quot;</span>:readF(nfa,value);<span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(br != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nfa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readF</span><span class="params">(NFA nfa, String value)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String[] strings = value.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : strings)&#123;</span><br><span class="line">            list.add(Integer.parseInt(s));</span><br><span class="line">        &#125;</span><br><span class="line">        nfa.setF(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readS0</span><span class="params">(NFA nfa, String value)</span> </span>&#123;</span><br><span class="line">        String[] arr = value.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String s : arr)&#123;</span><br><span class="line">            list.add(Integer.parseInt(s));</span><br><span class="line">        &#125;</span><br><span class="line">        nfa.setS0(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readConvert</span><span class="params">(NFA nfa, String value)</span> </span>&#123;</span><br><span class="line">        String[] arr = value.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        convert[Integer.parseInt(arr[<span class="number">0</span>])][Integer.parseInt(arr[<span class="number">2</span>])] += arr[<span class="number">1</span>];</span><br><span class="line">        nfa.setConvert(convert);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readCigama</span><span class="params">(NFA nfa, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] cigama = value.toCharArray();</span><br><span class="line">        nfa.setCigama(cigama);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readS</span><span class="params">(NFA nfa, String value)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> ch : value.toCharArray())&#123;</span><br><span class="line">            list.add(Integer.parseInt(String.valueOf(ch)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> n = list.size();</span><br><span class="line">        nfa.setS(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//init convert[][]</span></span><br><span class="line">        convert = <span class="keyword">new</span> String[n][n];</span><br><span class="line">        <span class="keyword">for</span>(String[] arr : convert)&#123;</span><br><span class="line">            Arrays.fill(arr, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            convert[i][i] = <span class="string">&quot;ε&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-定义DisplayUtils工具类，用于打印nfa、dfa对象"><a href="#4-定义DisplayUtils工具类，用于打印nfa、dfa对象" class="headerlink" title="4. 定义DisplayUtils工具类，用于打印nfa、dfa对象"></a>4. 定义DisplayUtils工具类，用于打印nfa、dfa对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">displayS</span><span class="params">(NFA nfa)</span></span>&#123;</span><br><span class="line">        System.out.println(nfa.getS());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">displayCigama</span><span class="params">(NFA nfa)</span></span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(nfa.getCigama()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">displayConvert</span><span class="params">(NFA nfa)</span></span>&#123;</span><br><span class="line">        String[][] convert = nfa.getConvert();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; convert.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; convert.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(convert[i][j].equals(<span class="string">&quot;&quot;</span>))  <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> c : convert[i][j].toCharArray())&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i == j &amp;&amp; c == <span class="string">&#x27;ε&#x27;</span>)  <span class="keyword">continue</span>;</span><br><span class="line">                    System.out.print(String.valueOf(i) + c + j + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">displayS0</span><span class="params">(NFA nfa)</span></span>&#123;</span><br><span class="line">        System.out.println(nfa.getS0());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">displayF</span><span class="params">(NFA nfa)</span></span>&#123;</span><br><span class="line">        System.out.println(nfa.getF());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">displayS</span><span class="params">(DFA dfa)</span></span>&#123;</span><br><span class="line">        System.out.println(dfa.getS());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">displayCigama</span><span class="params">(DFA dfa)</span></span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(dfa.getCigama()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">displayConvert</span><span class="params">(DFA dfa)</span></span>&#123;</span><br><span class="line">        String[][] convert = dfa.getConvert();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; convert.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; convert.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(convert[i][j].equals(<span class="string">&quot;&quot;</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">char</span> c : convert[i][j].toCharArray())&#123;</span><br><span class="line">                    <span class="keyword">if</span>(c != <span class="string">&#x27;ε&#x27;</span>)&#123;</span><br><span class="line">                        System.out.print(String.valueOf(i) + c + j + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">displayS0</span><span class="params">(DFA dfa)</span></span>&#123;</span><br><span class="line">        System.out.println(dfa.getS0());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">displayF</span><span class="params">(DFA dfa)</span></span>&#123;</span><br><span class="line">        System.out.println(dfa.getF());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-定义测试类NTDTest"><a href="#2-4-定义测试类NTDTest" class="headerlink" title="2.4 定义测试类NTDTest"></a>2.4 定义测试类NTDTest</h3><ol>
<li>定义一个NTDTest类进行测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NTDTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//读入测试文件</span></span><br><span class="line">        NFA nfa = ReadNFAUtil.readFile(<span class="string">&quot;src/编译原理/作业2/test/testFile/NTD.txt&quot;</span>);</span><br><span class="line">        DFA dfa = <span class="keyword">new</span> NTD().definite(nfa);</span><br><span class="line">        System.out.println(<span class="string">&quot;====================dfa====================&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;DFA状态集：&quot;</span>);            DisplayUtils.displayS(dfa);</span><br><span class="line">        System.out.print(<span class="string">&quot;DFA字母表：&quot;</span>);            DisplayUtils.displayCigama(dfa);</span><br><span class="line">        System.out.print(<span class="string">&quot;DFA状态转换函数：&quot;</span>);       DisplayUtils.displayConvert(dfa);</span><br><span class="line">        System.out.print(<span class="string">&quot;DFA唯一初态：&quot;</span>);          DisplayUtils.displayS0(dfa);</span><br><span class="line">        System.out.print(<span class="string">&quot;DFA终态集：&quot;</span>);            DisplayUtils.displayF(dfa);</span><br><span class="line">        System.out.println(<span class="string">&quot;====================end====================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>测试结果如下：</li>
</ol>
<p><img src="/2021/03/30/finite-automaton/image-20210330161020361.png" alt="image-20210330161020361"></p>
<ol start="3">
<li>process过程对照结果</li>
</ol>
<p><img src="/2021/03/30/finite-automaton/image-20210330161058735.png" alt="image-20210330161058735"></p>
<p><code>注：这里的分组重新标号为0123...，对应图中的ABCD..</code></p>
<ol start="4">
<li>生成的dfa对照结果</li>
</ol>
<p><img src="/2021/03/30/finite-automaton/image-20210330161213124.png" alt="image-20210330161213124"></p>
<ol start="5">
<li>结果正确，可测试多组案例，确认无误再往下进行</li>
</ol>
<h2 id="3、算法2：DFA最小化为MFA"><a href="#3、算法2：DFA最小化为MFA" class="headerlink" title="3、算法2：DFA最小化为MFA"></a>3、算法2：DFA最小化为MFA</h2><p><code>注：DFA的最小化也称为：确定的有穷状态机的化简。</code></p>
<h3 id="3-1-算法说明"><a href="#3-1-算法说明" class="headerlink" title="3.1 算法说明"></a>3.1 算法说明</h3><p><strong>DFA的最小化 = 消除无用状态 + 合并等价状态</strong></p>
<ol>
<li>消除无用状态这里是指删掉那些达到不了的状态。这不是我们的重点，DFS+HashSet不难实现。</li>
<li>其实关键在于<strong>合并等价状态</strong>。那么，怎样的两个状态是等价的呢？</li>
</ol>
<p>状态的等价需要满足两个条件：</p>
<ol>
<li>一致性条件：它们都是<strong>可接受状态</strong>或<strong>不可接受状态</strong>（即都是<strong>终态</strong>或<strong>非终态</strong>）</li>
<li>蔓延性条件：我们用<strong>所有的输入符号</strong>进行转化，它们都可以转化到<strong>等价的状态</strong>里</li>
</ol>
<p>DFA最小化核心算法：<strong>分割法</strong></p>
<p><strong>算法步骤如下：</strong>：</p>
<ol>
<li>先根据<strong>终态/非终态</strong>分为两组</li>
<li>然后对同一组中的状态，用所有输入符号去试着转化，如果转化不到一组，则再分</li>
<li>不断进行上述操作，直到<strong>每一组各自的状态集通过任何一个字母都不会转移到其他组</strong></li>
</ol>
<h3 id="3-2-定义Group的JavaBeen类，用于分组"><a href="#3-2-定义Group的JavaBeen类，用于分组" class="headerlink" title="3.2 定义Group的JavaBeen类，用于分组"></a>3.2 定义Group的JavaBeen类，用于分组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Group</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> groupID;</span><br><span class="line">    <span class="keyword">public</span> Set&lt;Integer&gt; stateSet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Group</span><span class="params">(<span class="keyword">int</span> groupID, Set&lt;Integer&gt; stateSet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.groupID = groupID;</span><br><span class="line">        <span class="keyword">this</span>.stateSet = stateSet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-分割法核心逻辑实现"><a href="#3-3-分割法核心逻辑实现" class="headerlink" title="3.3 分割法核心逻辑实现"></a>3.3 分割法核心逻辑实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *【DFA的最小化】</span></span><br><span class="line"><span class="comment"> * 核心思路：</span></span><br><span class="line"><span class="comment"> *  1. 定义一个Group类，作为「分组」。</span></span><br><span class="line"><span class="comment"> *     Group有两个属性：groupID作为唯一标识；StateSet为该分组包含的状态集</span></span><br><span class="line"><span class="comment"> *  2. separate()方法的作用是，根据某个字母(letter)对分组集合(groupSet)进行彻底分裂</span></span><br><span class="line"><span class="comment"> *  3. 对于字母表中的每个字母，进行separate分裂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 下面的论述有利于理解这个算法：</span></span><br><span class="line"><span class="comment"> *  1. HashMap做映射，是该算法的一个关键点。</span></span><br><span class="line"><span class="comment"> *     对于某个字母，一个分组(group)的所有状态(state)根据这个字母，用HashMap记录它们分别会被映射到哪个分组里，据此分裂。</span></span><br><span class="line"><span class="comment"> *     举个例子：&#123;group1,[0, 1]&#125;, &#123;group2,[2, 3]&#125;    (key是组，value是转化后指向该组的所有状态)</span></span><br><span class="line"><span class="comment"> *     0,1状态会转化到1组，2,3状态会转化到2组，据此，旧组分裂为了两个新组，然后删掉旧组，新组入队BFS</span></span><br><span class="line"><span class="comment"> *     如果这个哈希表的size==1，说明所有状态只能转化到一个组中，那么它们是等价的，不用删掉旧组，该组直接进入finalGroupSet最终分组</span></span><br><span class="line"><span class="comment"> *   2. groupID的作用是什么？为什么还要专门维护它？</span></span><br><span class="line"><span class="comment"> *      唯一标识。从1中看出，过程中不断进行着&quot;删掉旧组，生成新组&quot;的行为。维护这个ID主要是为了HashMap做映射</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinDFA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DFA <span class="title">minDFA</span><span class="params">(DFA dfa)</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; S = dfa.getS();</span><br><span class="line">        List&lt;Integer&gt; F = dfa.getF();</span><br><span class="line">        String[][] convert = dfa.getConvert();</span><br><span class="line">        <span class="keyword">char</span>[] cigama = dfa.getCigama();</span><br><span class="line"></span><br><span class="line">        S.removeAll(F);         <span class="comment">// 全部状态集K - 终态集Z = 非终态集</span></span><br><span class="line">        Group groupx = <span class="keyword">new</span> Group(cnt++, <span class="keyword">new</span> HashSet&lt;&gt;(S));</span><br><span class="line">        Group groupy = <span class="keyword">new</span> Group(cnt++, <span class="keyword">new</span> HashSet&lt;&gt;(F));</span><br><span class="line">        Set&lt;Group&gt; finalGroupSet = <span class="keyword">new</span> HashSet&lt;&gt;();             <span class="comment">// 最终分组</span></span><br><span class="line">        Set&lt;Group&gt; curGroupSet;               <span class="comment">// 此时的分组</span></span><br><span class="line">        finalGroupSet.add(groupx);</span><br><span class="line">        finalGroupSet.add(groupy);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> letter : cigama)&#123;                                 <span class="comment">// 对于每个字母</span></span><br><span class="line">            curGroupSet = finalGroupSet;                            <span class="comment">// 【最终分组】不断沦为【此时分组】</span></span><br><span class="line">            finalGroupSet = separate(curGroupSet, letter, convert);       <span class="comment">// 【此时分组】又分裂成新的【最终分组】</span></span><br><span class="line">        &#125;                                                           <span class="comment">// 所有字母都用了一次后，成为名副其实的【最终分组】</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印最终分组(一组中的状态等价)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====================final groups====================&quot;</span>);</span><br><span class="line">        <span class="comment">//重新编号</span></span><br><span class="line">        renumber(finalGroupSet);</span><br><span class="line">        <span class="comment">//创建mfa，调用set赋值</span></span><br><span class="line">        DFA mfa = <span class="keyword">new</span> DFA();</span><br><span class="line">        mfa.setS(getS(finalGroupSet.size()));</span><br><span class="line">        mfa.setCigama(dfa.getCigama());</span><br><span class="line">        mfa.setConvert(getConvert(finalGroupSet,dfa.getConvert()));</span><br><span class="line">        mfa.setS0(findGroupID(dfa.getS0(),finalGroupSet));</span><br><span class="line">        mfa.setF(findGroupIDs(dfa.getF(),finalGroupSet));</span><br><span class="line">        <span class="keyword">return</span> mfa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">renumber</span><span class="params">(Set&lt;Group&gt; finalGroupSet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = finalGroupSet.size();</span><br><span class="line">        <span class="comment">//按照 0 ~ n-1 编号</span></span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Group group : finalGroupSet)&#123;</span><br><span class="line">            group.groupID = number++;</span><br><span class="line">            System.out.println(group.groupID+<span class="string">&quot;:&quot;</span>+group.stateSet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">findGroupIDs</span><span class="params">(List&lt;Integer&gt; F, Set&lt;Group&gt; finalGroupSet)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Group group : finalGroupSet)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer f : F) &#123;</span><br><span class="line">                <span class="keyword">if</span>(group.stateSet.contains(f) &amp;&amp; !list.contains(group.groupID))&#123;</span><br><span class="line">                    list.add(group.groupID);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[][] getConvert(Set&lt;Group&gt; finalGroupSet, String[][] convert) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = finalGroupSet.size();</span><br><span class="line">        String[][] newConvert = <span class="keyword">new</span> String[n][n];</span><br><span class="line">        <span class="keyword">for</span>(String[] tmp : newConvert)&#123;</span><br><span class="line">            Arrays.fill(tmp, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; convert.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; convert.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!convert[i][j].equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                    String[] strs = convert[i][j].split(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                    <span class="keyword">int</span> ii = findGroupID(i,finalGroupSet);</span><br><span class="line">                    <span class="keyword">int</span> jj = findGroupID(j,finalGroupSet);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; strs.length; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(!newConvert[ii][jj].contains(strs[k]))&#123;</span><br><span class="line">                            newConvert[ii][jj] += strs[k];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newConvert;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findGroupID</span><span class="params">(<span class="keyword">int</span> i, Set&lt;Group&gt; finalGroupSet)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span>(Group group : finalGroupSet)&#123;</span><br><span class="line">           <span class="keyword">if</span>(group.stateSet.contains(i))&#123;</span><br><span class="line">               <span class="keyword">return</span> group.groupID;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;Search ERROR!&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">getS</span><span class="params">(<span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">       List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">           list.add(i);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Set&lt;Group&gt; <span class="title">separate</span><span class="params">(Set&lt;Group&gt; groupSet, <span class="keyword">char</span> letter, String[][] convert)</span></span>&#123;</span><br><span class="line">       Set&lt;Group&gt; finalGroupSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">       Queue&lt;Group&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;(groupSet);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">           Group oldGroup = queue.poll();</span><br><span class="line">           Map&lt;Group, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();  <span class="comment">//根据指向的组，对状态Integer进行分类</span></span><br><span class="line">           <span class="keyword">for</span>(Integer state : oldGroup.stateSet)&#123;</span><br><span class="line">               Group stateNextBelong = belong(state, letter, convert, groupSet);</span><br><span class="line">               <span class="keyword">if</span>(!map.containsKey(stateNextBelong))&#123;</span><br><span class="line">                   map.put(stateNextBelong, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">               &#125;</span><br><span class="line">               map.get(stateNextBelong).add(state);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (map.size() == <span class="number">1</span>)&#123;   <span class="comment">// 如果这些状态映射到了一个状态集(Group)中，则为最终分组</span></span><br><span class="line">               finalGroupSet.add(oldGroup);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;                  <span class="comment">// 如果这些状态映射到了多个状态集(Group)中，则删除原先分组，创建多个新分组，并将新分组入队</span></span><br><span class="line">               groupSet.remove(oldGroup);</span><br><span class="line">               <span class="keyword">for</span>(List&lt;Integer&gt; list : map.values())&#123;</span><br><span class="line">                   Group newGroup = <span class="keyword">new</span> Group(cnt++, <span class="keyword">new</span> HashSet&lt;&gt;(list));</span><br><span class="line">                   groupSet.add(newGroup);</span><br><span class="line">                   queue.add(newGroup);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> finalGroupSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * move方法: 返回唯一后继状态（-1表示没有后继状态）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">char</span> letter, String[][] f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> nextState = <span class="number">0</span>; nextState &lt; f.length; nextState++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">char</span> c : f[state][nextState].toCharArray())&#123;</span><br><span class="line">                <span class="keyword">if</span>(c == letter)&#123;</span><br><span class="line">                    <span class="keyword">return</span> nextState;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * beLong方法: 某状态(state)经过字母(letter)一次转化(move)后，所属于的当前分组(group)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Group <span class="title">belong</span><span class="params">(<span class="keyword">int</span> state, <span class="keyword">char</span> letter, String[][] f, Set&lt;Group&gt; groupSet)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> newState = move(state, letter, f);</span><br><span class="line">        <span class="keyword">for</span>(Group group : groupSet)&#123;</span><br><span class="line">            <span class="keyword">if</span>(group.stateSet.contains(newState))&#123;</span><br><span class="line">                <span class="keyword">return</span> group;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-定义ReadDFAUtil工具类获取DFA五元组的信息"><a href="#3-4-定义ReadDFAUtil工具类获取DFA五元组的信息" class="headerlink" title="3.4 定义ReadDFAUtil工具类获取DFA五元组的信息"></a>3.4 定义ReadDFAUtil工具类获取DFA五元组的信息</h3><h4 id="1-准备一个DFA作为测试案例"><a href="#1-准备一个DFA作为测试案例" class="headerlink" title="1. 准备一个DFA作为测试案例"></a>1. 准备一个DFA作为测试案例</h4><p><img src="/2021/03/30/finite-automaton/image-20210330204513283.png" alt="image-20210330204513283"></p>
<h4 id="2-将对应的五元组写入txt文件-1"><a href="#2-将对应的五元组写入txt文件-1" class="headerlink" title="2. 将对应的五元组写入txt文件"></a>2. 将对应的五元组写入txt文件</h4><p><code>注意：状态从0开始定义</code></p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">S=<span class="number">0123456</span></span><br><span class="line">cigama=ab</span><br><span class="line"><span class="built_in">convert</span>=<span class="number">0a1</span></span><br><span class="line"><span class="built_in">convert</span>=1a1</span><br><span class="line"><span class="built_in">convert</span>=<span class="number">1b3</span></span><br><span class="line"><span class="built_in">convert</span>=<span class="number">3b5</span></span><br><span class="line"><span class="built_in">convert</span>=5a6</span><br><span class="line"><span class="built_in">convert</span>=<span class="number">6b5</span></span><br><span class="line"><span class="built_in">convert</span>=<span class="number">0b2</span></span><br><span class="line"><span class="built_in">convert</span>=<span class="number">2b4</span></span><br><span class="line"><span class="built_in">convert</span>=<span class="number">4b4</span></span><br><span class="line"><span class="built_in">convert</span>=4a6</span><br><span class="line">S0=<span class="number">0</span></span><br><span class="line">F=<span class="number">2346</span></span><br></pre></td></tr></table></figure>
<p>这里将其命名为MinDFA.txt</p>
<h4 id="3-定义ReadDFAUtil工具类，读入五元组信息"><a href="#3-定义ReadDFAUtil工具类，读入五元组信息" class="headerlink" title="3. 定义ReadDFAUtil工具类，读入五元组信息"></a>3. 定义ReadDFAUtil工具类，读入五元组信息</h4><p><code>注：和ReadNFAUtil基本相同，只有读入S0有区别，此处代码略</code></p>
<h4 id="4-DisplayUtils工具类已在算法1中定义"><a href="#4-DisplayUtils工具类已在算法1中定义" class="headerlink" title="4. DisplayUtils工具类已在算法1中定义"></a>4. DisplayUtils工具类已在算法1中定义</h4><h3 id="3-5-定义测试类MinDFATest"><a href="#3-5-定义测试类MinDFATest" class="headerlink" title="3.5 定义测试类MinDFATest"></a>3.5 定义测试类MinDFATest</h3><ol>
<li>定义一个NTDTest类进行测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinDFATest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DFA dfa = ReadDFAUtil.readFile(<span class="string">&quot;src/编译原理/作业2/test/testFile/MinDFA.txt&quot;</span>);</span><br><span class="line">        print(<span class="string">&quot;dfa&quot;</span>,dfa);</span><br><span class="line">        DFA mfa = <span class="keyword">new</span> MinDFA().minDFA(dfa);</span><br><span class="line">        print(<span class="string">&quot;mfa&quot;</span>,mfa);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String tagName, DFA dfa)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>+tagName+<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;DFA状态集：&quot;</span>);            DisplayUtils.displayS(dfa);</span><br><span class="line">        System.out.print(<span class="string">&quot;DFA字母表：&quot;</span>);            DisplayUtils.displayCigama(dfa);</span><br><span class="line">        System.out.print(<span class="string">&quot;DFA状态转换函数：&quot;</span>);       DisplayUtils.displayConvert(dfa);</span><br><span class="line">        System.out.print(<span class="string">&quot;DFA唯一初态：&quot;</span>);          DisplayUtils.displayS0(dfa);</span><br><span class="line">        System.out.print(<span class="string">&quot;DFA终态集：&quot;</span>);            DisplayUtils.displayF(dfa);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>测试结果如下：</li>
</ol>
<p><img src="/2021/03/30/finite-automaton/image-20210330205255128.png" alt="image-20210330205255128"></p>
<p><code>注：这里的分组重新标号为0123...，而不是图中的ABCD..</code></p>
<ol start="3">
<li>生成的mfa对照结果</li>
</ol>
<p><img src="/2021/03/30/finite-automaton/image-20210330205400590.png" alt="image-20210330205400590"></p>
<ol start="4">
<li>结果正确，可测试多组案例，确认无误再往下进行</li>
</ol>
<h2 id="3、算法3：正则表达式转换为NFA"><a href="#3、算法3：正则表达式转换为NFA" class="headerlink" title="3、算法3：正则表达式转换为NFA"></a>3、算法3：正则表达式转换为NFA</h2><h3 id="3-1-首先定义Node和Edge的JavaBeen类"><a href="#3-1-首先定义Node和Edge的JavaBeen类" class="headerlink" title="3.1 首先定义Node和Edge的JavaBeen类"></a>3.1 首先定义Node和Edge的JavaBeen类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ID = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = ID++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ID = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Edge</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node begin;</span><br><span class="line">    <span class="keyword">private</span> Node end;</span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line">    <span class="keyword">private</span> Edge edge;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Edge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Edge</span><span class="params">(Node begin, Node end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.begin = begin;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Edge</span><span class="params">(Node begin, Node end, String label)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.begin = begin;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">        <span class="keyword">this</span>.label = label;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// setter和getter这里省略... </span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Edge [begin=&quot;</span>+begin+<span class="string">&quot;, end=&quot;</span>+end+<span class="string">&quot;, label=&quot;</span>+label+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-定义Graph类用于构造NFA"><a href="#3-2-定义Graph类用于构造NFA" class="headerlink" title="3.2 定义Graph类用于构造NFA"></a>3.2 定义Graph类用于构造NFA</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Edge&gt; edges;</span><br><span class="line">    <span class="keyword">private</span> Node start;</span><br><span class="line">    <span class="keyword">private</span> Node end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        edges = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Edge&gt; <span class="title">getEdges</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> edges;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStart</span><span class="params">(Node start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnd</span><span class="params">(Node end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node.reset();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据操作符和操作对象来进行连接、联合、闭包处理</span></span><br><span class="line"><span class="comment">     * 由参数来判断调用构建NFA的函数</span></span><br><span class="line"><span class="comment">     * 处理a*时会调用处理单字符闭包的函数，对应的也有处理NFA闭包的函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Star</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.getClass().getName().equals(Graph.class.getName())) &#123;</span><br><span class="line">            addStar((Graph) obj);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj.getClass().getName().equals(Character.class.getName())) &#123;</span><br><span class="line">            addStar((Character) obj);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;You have an error in your Regex syntax&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Union</span><span class="params">(Object obj1, Object obj2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj1.getClass().getName().equals(Character.class.getName())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj2.getClass().getName().equals(Graph.class.getName())) &#123;</span><br><span class="line">                addUnion((Character) obj1, (Graph) obj2);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (obj2.getClass().getName().equals(Character.class.getName())) &#123;</span><br><span class="line">                addUnion((Character) obj1, (Character) obj2);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj1.getClass().getName().equals(Graph.class.getName())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj2.getClass().getName().equals(Graph.class.getName())) &#123;</span><br><span class="line">                addUnion((Graph) obj1, (Graph) obj2);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (obj2.getClass().getName().equals(Character.class.getName())) &#123;</span><br><span class="line">                addUnion((Graph) obj1, (Character) obj2);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;You have an error in your Regex syntax&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Concat</span><span class="params">(Object obj1, Object obj2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj1.getClass().getName().equals(Character.class.getName())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj2.getClass().getName().equals(Graph.class.getName())) &#123;</span><br><span class="line">                addConcat((Character) obj1, (Graph) obj2);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (obj2.getClass().getName().equals(Character.class.getName())) &#123;</span><br><span class="line">                addConcat((Character) obj1, (Character) obj2);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj1.getClass().getName().equals(Graph.class.getName())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj2.getClass().getName().equals(Graph.class.getName())) &#123;</span><br><span class="line">                addConcat((Graph) obj1, (Graph) obj2);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (obj2.getClass().getName().equals(Character.class.getName())) &#123;</span><br><span class="line">                addConcat((Graph) obj1, (Character) obj2);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;You have an error in your Regex syntax&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理NFA闭包</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStar</span><span class="params">(Graph graph)</span> </span>&#123;</span><br><span class="line">        Node begNode = <span class="keyword">new</span> Node();</span><br><span class="line">        Node endNode = <span class="keyword">new</span> Node();</span><br><span class="line">        Edge edge1 = <span class="keyword">new</span> Edge(begNode, endNode, <span class="string">&quot;ε&quot;</span>);</span><br><span class="line">        Edge edge2 = <span class="keyword">new</span> Edge(begNode, graph.getStart(), <span class="string">&quot;ε&quot;</span>);</span><br><span class="line">        Edge edge3 = <span class="keyword">new</span> Edge(graph.getEnd(), endNode, <span class="string">&quot;ε&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 改动的地方</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Edge edge4 = <span class="keyword">new</span> Edge(graph.getEnd(), graph.getStart(), <span class="string">&quot;ε&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.edges.addAll(graph.getEdges());</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge1);</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge2);</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge3);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 改动的地方</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge4);</span><br><span class="line">        <span class="keyword">this</span>.start = begNode;</span><br><span class="line">        <span class="keyword">this</span>.end = endNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理单字符闭包</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStar</span><span class="params">(Character character)</span> </span>&#123;</span><br><span class="line">        Node nodeCenter = <span class="keyword">new</span> Node();</span><br><span class="line">        Node nodebeg = <span class="keyword">new</span> Node();</span><br><span class="line">        Node nodeend = <span class="keyword">new</span> Node();</span><br><span class="line">        Edge edgeLink = <span class="keyword">new</span> Edge(nodeCenter, nodeCenter, character.toString());</span><br><span class="line">        Edge edgeεBeg = <span class="keyword">new</span> Edge(nodebeg, nodeCenter, <span class="string">&quot;ε&quot;</span>);</span><br><span class="line">        Edge edgeεEnd = <span class="keyword">new</span> Edge(nodeCenter, nodeend, <span class="string">&quot;ε&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edgeLink);</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edgeεBeg);</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edgeεEnd);</span><br><span class="line">        <span class="keyword">this</span>.start = nodebeg;</span><br><span class="line">        <span class="keyword">this</span>.end = nodeend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUnion</span><span class="params">(Character character, Graph graph)</span> </span>&#123;</span><br><span class="line">        Node begNode = <span class="keyword">new</span> Node();</span><br><span class="line">        Node endNode = <span class="keyword">new</span> Node();</span><br><span class="line">        Edge edge1 = <span class="keyword">new</span> Edge(begNode, graph.getStart(), <span class="string">&quot;ε&quot;</span>);</span><br><span class="line">        Edge edge2 = <span class="keyword">new</span> Edge(graph.getEnd(), endNode, <span class="string">&quot;ε&quot;</span>);</span><br><span class="line">        Edge edge3 = <span class="keyword">new</span> Edge(begNode, endNode, character.toString());</span><br><span class="line">        <span class="keyword">this</span>.edges.addAll(graph.getEdges());</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge1);</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge2);</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge3);</span><br><span class="line">        <span class="keyword">this</span>.start = begNode;</span><br><span class="line">        <span class="keyword">this</span>.end = endNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUnion</span><span class="params">(Graph graph, Character character)</span> </span>&#123;</span><br><span class="line">        Node begNode = <span class="keyword">new</span> Node();</span><br><span class="line">        Node endNode = <span class="keyword">new</span> Node();</span><br><span class="line">        Edge edge1 = <span class="keyword">new</span> Edge(begNode, graph.getStart(), <span class="string">&quot;ε&quot;</span>);</span><br><span class="line">        Edge edge2 = <span class="keyword">new</span> Edge(graph.getEnd(), endNode, <span class="string">&quot;ε&quot;</span>);</span><br><span class="line">        Edge edge3 = <span class="keyword">new</span> Edge(begNode, endNode, character.toString());</span><br><span class="line">        <span class="keyword">this</span>.edges.addAll(graph.getEdges());</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge1);</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge2);</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge3);</span><br><span class="line">        <span class="keyword">this</span>.start = begNode;</span><br><span class="line">        <span class="keyword">this</span>.end = endNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUnion</span><span class="params">(Graph graph1, Graph graph2)</span> </span>&#123;</span><br><span class="line">        Node begNode = <span class="keyword">new</span> Node();</span><br><span class="line">        Node endNode = <span class="keyword">new</span> Node();</span><br><span class="line">        Edge edge1 = <span class="keyword">new</span> Edge(begNode, graph1.getStart(), <span class="string">&quot;ε&quot;</span>);</span><br><span class="line">        Edge edge2 = <span class="keyword">new</span> Edge(begNode, graph2.getStart(), <span class="string">&quot;ε&quot;</span>);</span><br><span class="line">        Edge edge3 = <span class="keyword">new</span> Edge(graph1.getEnd(), endNode, <span class="string">&quot;ε&quot;</span>);</span><br><span class="line">        Edge edge4 = <span class="keyword">new</span> Edge(graph2.getEnd(), endNode, <span class="string">&quot;ε&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.start = begNode;</span><br><span class="line">        <span class="keyword">this</span>.end = endNode;</span><br><span class="line">        <span class="keyword">this</span>.edges.addAll(graph1.getEdges());</span><br><span class="line">        <span class="keyword">this</span>.edges.addAll(graph2.getEdges());</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge1);</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge2);</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge3);</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUnion</span><span class="params">(Character characterOne, Character characterTwo)</span> </span>&#123;</span><br><span class="line">        Node nodebeg = <span class="keyword">new</span> Node();</span><br><span class="line">        Node nodeend = <span class="keyword">new</span> Node();</span><br><span class="line">        Edge edgeOne = <span class="keyword">new</span> Edge(nodebeg, nodeend, characterOne.toString());</span><br><span class="line">        Edge edgeTwo = <span class="keyword">new</span> Edge(nodebeg, nodeend, characterTwo.toString());</span><br><span class="line">        edges.add(edgeOne);</span><br><span class="line">        edges.add(edgeTwo);</span><br><span class="line">        start = nodebeg;</span><br><span class="line">        end = nodeend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addConcat</span><span class="params">(Character character, Graph graph)</span> </span>&#123;</span><br><span class="line">        Node begNode = <span class="keyword">new</span> Node();</span><br><span class="line">        Edge edge = <span class="keyword">new</span> Edge(begNode, graph.getStart(), character.toString());</span><br><span class="line">        <span class="keyword">this</span>.edges.addAll(graph.getEdges());</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge);</span><br><span class="line">        <span class="keyword">this</span>.start = begNode;</span><br><span class="line">        <span class="keyword">this</span>.end = graph.getEnd();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addConcat</span><span class="params">(Graph graph, Character character)</span> </span>&#123;</span><br><span class="line">        Node endNode = <span class="keyword">new</span> Node();</span><br><span class="line">        Edge edge = <span class="keyword">new</span> Edge(graph.getEnd(), endNode, character.toString());</span><br><span class="line">        <span class="keyword">this</span>.edges.addAll(graph.getEdges());</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge);</span><br><span class="line">        <span class="keyword">this</span>.start = graph.getStart();</span><br><span class="line">        <span class="keyword">this</span>.end = endNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addConcat</span><span class="params">(Graph graph1, Graph graph2)</span> </span>&#123;</span><br><span class="line">        Edge edge = <span class="keyword">new</span> Edge(graph1.getEnd(), graph2.getStart(), <span class="string">&quot;ε&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.start = graph1.getStart();</span><br><span class="line">        <span class="keyword">this</span>.end = graph2.getEnd();</span><br><span class="line">        <span class="keyword">this</span>.edges.addAll(graph1.getEdges());</span><br><span class="line">        <span class="keyword">this</span>.edges.addAll(graph2.getEdges());</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addConcat</span><span class="params">(Character characterOne, Character characterTwo)</span> </span>&#123;</span><br><span class="line">        Node begNode = <span class="keyword">new</span> Node();</span><br><span class="line">        Node midNode = <span class="keyword">new</span> Node();</span><br><span class="line">        Node endNode = <span class="keyword">new</span> Node();</span><br><span class="line">        Edge edge1 = <span class="keyword">new</span> Edge(begNode, midNode, characterOne.toString());</span><br><span class="line">        Edge edge2 = <span class="keyword">new</span> Edge(midNode, endNode, characterTwo.toString());</span><br><span class="line">        <span class="keyword">this</span>.start = begNode;</span><br><span class="line">        <span class="keyword">this</span>.end = endNode;</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge1);</span><br><span class="line">        <span class="keyword">this</span>.edges.add(edge2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder printString = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;Start=&quot;</span> + <span class="keyword">this</span>.start + <span class="string">&quot;  End=&quot;</span> + <span class="keyword">this</span>.end + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edges.size(); i++) &#123;</span><br><span class="line">            printString.append(edges.get(i)).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> printString.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-核心逻辑实现"><a href="#3-3-核心逻辑实现" class="headerlink" title="3.3 核心逻辑实现"></a>3.3 核心逻辑实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Regex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String regex;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Character&gt; operatorStack;</span><br><span class="line">    <span class="keyword">private</span> Stack operandStack;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] priority = &#123;</span><br><span class="line">            <span class="comment">// *&amp;|()#</span></span><br><span class="line">            &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>,-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>&#125;,</span><br><span class="line">            &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Regex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        regex = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        operatorStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        operandStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Regex</span><span class="params">(String _regex)</span> </span>&#123;</span><br><span class="line">        regex = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        operatorStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        operandStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        prepareString(_regex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 核心转换代码</span></span><br><span class="line"><span class="comment">     * stack 记录 NFA 片段</span></span><br><span class="line"><span class="comment">     * 依次读取表达式的每个字符 ch</span></span><br><span class="line"><span class="comment">     * 如果 ch 是运算符，从 stack 出栈所需数目的 NFA 片段，构建新的 NFA 片段后入栈 stack</span></span><br><span class="line"><span class="comment">     * 如果 ch 是普通字符，创建新的状态，并构建只包含此状态的 NFA 片段入栈 stack</span></span><br><span class="line"><span class="comment">     * 返回 stack 栈顶的 NFA 片段，即最终结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NFA <span class="title">transformNFA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (regex.length() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            operatorStack.push(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">char</span>[] _regex = (regex + <span class="string">&quot;#&quot;</span>).toCharArray();</span><br><span class="line">            <span class="keyword">while</span> (_regex[i] != <span class="string">&#x27;#&#x27;</span> || operatorStack.peek() != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!isOperator(_regex[i])) &#123;</span><br><span class="line">                    operandStack.push(_regex[i]);</span><br><span class="line">                    i++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> value = priorityOperator(operatorStack.peek(), _regex[i]);</span><br><span class="line">                    <span class="keyword">switch</span> (value) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                            Character character = operatorStack.pop();</span><br><span class="line">                            <span class="keyword">switch</span> (character) &#123;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                                    Object obj = operandStack.pop();</span><br><span class="line">                                    Graph graph1 = <span class="keyword">new</span> Graph();</span><br><span class="line">                                    graph1.Star(obj);</span><br><span class="line">                                    operandStack.push(graph1);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&#x27;&amp;&#x27;</span>:</span><br><span class="line">                                    Object obj2 = operandStack.pop();</span><br><span class="line">                                    Object obj1 = operandStack.pop();</span><br><span class="line">                                    Graph graph2 = <span class="keyword">new</span> Graph();</span><br><span class="line">                                    graph2.Concat(obj1, obj2);</span><br><span class="line">                                    operandStack.push(graph2);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&#x27;|&#x27;</span>:</span><br><span class="line">                                    Object obj4 = operandStack.pop();</span><br><span class="line">                                    Object obj3 = operandStack.pop();</span><br><span class="line">                                    Graph graph3 = <span class="keyword">new</span> Graph();</span><br><span class="line">                                    graph3.Union(obj3, obj4);</span><br><span class="line">                                    operandStack.push(graph3);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">default</span>:</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                            operatorStack.pop();</span><br><span class="line">                            i++;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">                            operatorStack.push(_regex[i]);</span><br><span class="line">                            i++;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Graph graph = (Graph) operandStack.pop();</span><br><span class="line">            System.out.println(<span class="string">&quot;====================process====================&quot;</span>);</span><br><span class="line">            System.out.println(graph);</span><br><span class="line">            NFA nfa = <span class="keyword">new</span> NFA();</span><br><span class="line">            nfa.setS(getS(graph.getEnd().getId()));</span><br><span class="line">            nfa.setCigama(getCigama(regex));</span><br><span class="line">            nfa.setConvert(getConvert(graph));</span><br><span class="line">            nfa.setS0(getS0(graph.getStart().getId()));</span><br><span class="line">            nfa.setF(getF(graph.getEnd().getId()));</span><br><span class="line">            <span class="keyword">return</span> nfa;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">getF</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(id);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[][] getConvert(Graph graph) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = graph.getEnd().getId() + <span class="number">1</span>;</span><br><span class="line">        String[][] convert = <span class="keyword">new</span> String[n][n];</span><br><span class="line">        <span class="keyword">for</span> (String[] tmp : convert) &#123;</span><br><span class="line">            Arrays.fill(tmp,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            convert[i][i] = <span class="string">&quot;ε&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph.getEdges().size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> beginId = graph.getEdges().get(i).getBegin().getId();</span><br><span class="line">            <span class="keyword">int</span> endId = graph.getEdges().get(i).getEnd().getId();</span><br><span class="line">            convert[beginId][endId] += graph.getEdges().get(i).getLabel();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> convert;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">getS0</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(id);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Integer&gt; <span class="title">getS</span><span class="params">(<span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] getCigama(String regex) &#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = regex.toCharArray();</span><br><span class="line">        List&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(chars[i]==<span class="string">&#x27;(&#x27;</span> || chars[i]==<span class="string">&#x27;)&#x27;</span> || chars[i]==<span class="string">&#x27;*&#x27;</span> || chars[i]==<span class="string">&#x27;|&#x27;</span> || chars[i]==<span class="string">&#x27;&amp;&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!list.contains(chars[i]))&#123;</span><br><span class="line">                list.add(chars[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] cigama = <span class="keyword">new</span> <span class="keyword">char</span>[list.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            cigama[i] = list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cigama;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Node.reset();</span><br><span class="line">        operandStack.clear();</span><br><span class="line">        operatorStack.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRegex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> regex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRegex</span><span class="params">(String _regex)</span> </span>&#123;</span><br><span class="line">        prepareString(_regex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isOperator</span><span class="params">(Character character)</span> </span>&#123;</span><br><span class="line">        String operatorString = <span class="string">&quot;*&amp;|()#&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (operatorString.contains(character.toString())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">priorityOperator</span><span class="params">(Character character1, Character character2)</span> </span>&#123;</span><br><span class="line">        String priorityString = <span class="string">&quot;*&amp;|()#&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.priority[priorityString.indexOf(character1.toString())][priorityString</span><br><span class="line">                .indexOf(character2.toString())];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在构建 NFA 之前，需要对正则表达式进行处理，以 (a|b)*abb 为例，在正则表达式里是没有连接符号的，这时就需要添加连接符</span></span><br><span class="line"><span class="comment">     * 对当前字符类型进行判断，并对前一个字符进行判断，最终得到添加连接符之后的字符串</span></span><br><span class="line"><span class="comment">     * 如 (a|b)*abb 添加完则为 (a|b)*&amp;a&amp;b&amp;b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareString</span><span class="params">(String _regex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] regexs = _regex.replaceAll(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).toCharArray();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; regexs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                sb.append(regexs[i]);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (regexs[i] == <span class="string">&#x27;|&#x27;</span> || regexs[i] == <span class="string">&#x27;*&#x27;</span> || regexs[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                    sb.append(regexs[i]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (regexs[i - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span> || regexs[i - <span class="number">1</span>] == <span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">                        sb.append(regexs[i]);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        sb.append(<span class="string">&quot;&amp;&quot;</span> + regexs[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        regex = sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-定义测试类Main"><a href="#3-4-定义测试类Main" class="headerlink" title="3.4 定义测试类Main"></a>3.4 定义测试类Main</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String regexExp = <span class="string">&quot;(ab|c)*abb&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;待转换的正则表达式：&quot;</span> + regexExp);</span><br><span class="line">        System.out.println(<span class="string">&quot;====================preprocess====================&quot;</span>);</span><br><span class="line">        Regex regex = <span class="keyword">new</span> Regex(regexExp);</span><br><span class="line">        System.out.println(<span class="string">&quot;预处理后的表达式：&quot;</span>+regex.getRegex());</span><br><span class="line">        NFA nfa = regex.transformNFA();</span><br><span class="line">        print(nfa);</span><br><span class="line">        regex.reset();</span><br><span class="line">        DFA dfa = <span class="keyword">new</span> NTD().definite(nfa);</span><br><span class="line">        print(<span class="string">&quot;dfa&quot;</span>, dfa);</span><br><span class="line">        DFA mfa = <span class="keyword">new</span> MinDFA().minDFA(dfa);</span><br><span class="line">        print(<span class="string">&quot;mfa&quot;</span>,mfa);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String tagName, DFA dfa)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>+tagName+<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;DFA状态集：&quot;</span>);            DisplayUtils.displayS(dfa);</span><br><span class="line">        System.out.print(<span class="string">&quot;DFA字母表：&quot;</span>);            DisplayUtils.displayCigama(dfa);</span><br><span class="line">        System.out.print(<span class="string">&quot;DFA状态转换函数：&quot;</span>);       DisplayUtils.displayConvert(dfa);</span><br><span class="line">        System.out.print(<span class="string">&quot;DFA唯一初态：&quot;</span>);          DisplayUtils.displayS0(dfa);</span><br><span class="line">        System.out.print(<span class="string">&quot;DFA终态集：&quot;</span>);            DisplayUtils.displayF(dfa);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(NFA nfa)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====================&quot;</span>+ <span class="string">&quot;nfa&quot;</span> +<span class="string">&quot;====================&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;NFA状态集：&quot;</span>);            DisplayUtils.displayS(nfa);</span><br><span class="line">        System.out.print(<span class="string">&quot;NFA字母表：&quot;</span>);            DisplayUtils.displayCigama(nfa);</span><br><span class="line">        System.out.print(<span class="string">&quot;NFA状态转换函数：&quot;</span>);       DisplayUtils.displayConvert(nfa);</span><br><span class="line">        System.out.print(<span class="string">&quot;NFA初态集：&quot;</span>);            DisplayUtils.displayS0(nfa);</span><br><span class="line">        System.out.print(<span class="string">&quot;NFA终态集：&quot;</span>);            DisplayUtils.displayF(nfa);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">待转换的正则表达式：(ab|c)*abb</span><br><span class="line">====================preprocess====================</span><br><span class="line">预处理后的表达式：(a&amp;b|c)*&amp;a&amp;b&amp;b</span><br><span class="line">====================process====================</span><br><span class="line">Start=<span class="number">5</span>  End=<span class="number">9</span></span><br><span class="line">Edge [begin=<span class="number">0</span>, end=<span class="number">1</span>, <span class="built_in">label</span>=a]</span><br><span class="line">Edge [begin=<span class="number">1</span>, end=<span class="number">2</span>, <span class="built_in">label</span>=b]</span><br><span class="line">Edge [begin=<span class="number">3</span>, end=<span class="number">0</span>, <span class="built_in">label</span>=ε]</span><br><span class="line">Edge [begin=<span class="number">2</span>, end=<span class="number">4</span>, <span class="built_in">label</span>=ε]</span><br><span class="line">Edge [begin=<span class="number">3</span>, end=<span class="number">4</span>, <span class="built_in">label</span>=c]</span><br><span class="line">Edge [begin=<span class="number">5</span>, end=<span class="number">6</span>, <span class="built_in">label</span>=ε]</span><br><span class="line">Edge [begin=<span class="number">5</span>, end=<span class="number">3</span>, <span class="built_in">label</span>=ε]</span><br><span class="line">Edge [begin=<span class="number">4</span>, end=<span class="number">6</span>, <span class="built_in">label</span>=ε]</span><br><span class="line">Edge [begin=<span class="number">4</span>, end=<span class="number">3</span>, <span class="built_in">label</span>=ε]</span><br><span class="line">Edge [begin=<span class="number">6</span>, end=<span class="number">7</span>, <span class="built_in">label</span>=a]</span><br><span class="line">Edge [begin=<span class="number">7</span>, end=<span class="number">8</span>, <span class="built_in">label</span>=b]</span><br><span class="line">Edge [begin=<span class="number">8</span>, end=<span class="number">9</span>, <span class="built_in">label</span>=b]</span><br><span class="line"></span><br><span class="line">====================nfa====================</span><br><span class="line">NFA状态集：[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">NFA字母表：[a, b, c]</span><br><span class="line">NFA状态转换函数：<span class="number">0a1</span>  <span class="number">1b2</span>  <span class="number">2</span>ε<span class="number">4</span>  <span class="number">3</span>ε<span class="number">0</span>  3c4  <span class="number">4</span>ε<span class="number">3</span>  <span class="number">4</span>ε<span class="number">6</span>  <span class="number">5</span>ε<span class="number">3</span>  <span class="number">5</span>ε<span class="number">6</span>  6a7  <span class="number">7b8</span>  <span class="number">8b9</span>  </span><br><span class="line">NFA初态集：[<span class="number">5</span>]</span><br><span class="line">NFA终态集：[<span class="number">9</span>]</span><br><span class="line">====================process====================</span><br><span class="line">原状态：[<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>]	新状态：[<span class="number">1</span>, <span class="number">7</span>]	转换函数：<span class="number">0a1</span>;	[<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>]	转换函数：<span class="number">0c2</span>;	</span><br><span class="line">原状态：[<span class="number">1</span>, <span class="number">7</span>]	新状态：[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]	转换函数：<span class="number">1b3</span>;	</span><br><span class="line">原状态：[<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>]	新状态：[<span class="number">1</span>, <span class="number">7</span>]	转换函数：2a1;	[<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>]	转换函数：2c2;	</span><br><span class="line">原状态：[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]	新状态：[<span class="number">1</span>, <span class="number">7</span>]	转换函数：3a1;	[<span class="number">9</span>]	转换函数：<span class="number">3b4</span>;	[<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>]	转换函数：3c2;	</span><br><span class="line">原状态：[<span class="number">9</span>]	新状态：</span><br><span class="line">====================dfa====================</span><br><span class="line">DFA状态集：[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">DFA字母表：[a, b, c]</span><br><span class="line">DFA状态转换函数：<span class="number">0a1</span>	<span class="number">0c2</span>	<span class="number">1b3</span>	2a1	2c2	3a1	3c2	<span class="number">3b4</span>	</span><br><span class="line">DFA唯一初态：<span class="number">0</span></span><br><span class="line">DFA终态集：[<span class="number">4</span>]</span><br><span class="line">====================final groups====================</span><br><span class="line"><span class="number">0</span>:[<span class="number">4</span>]</span><br><span class="line"><span class="number">1</span>:[<span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line"><span class="number">2</span>:[<span class="number">1</span>]</span><br><span class="line"><span class="number">3</span>:[<span class="number">3</span>]</span><br><span class="line">====================mfa====================</span><br><span class="line">DFA状态集：[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">DFA字母表：[a, b, c]</span><br><span class="line">DFA状态转换函数：1c1	1a2	<span class="number">2b3</span>	<span class="number">3b0</span>	3c1	3a2	</span><br><span class="line">DFA唯一初态：<span class="number">1</span></span><br><span class="line">DFA终态集：[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>可在草稿纸上做出对应MFA进行检验，尝试多组案例观察结果是否正确</p>
<p>以上则是编译原理实验：正则表达式-&gt;NFA-&gt;DFA-&gt;MFA 实现的全部内容啦！</p>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>有限自动机</tag>
      </tags>
  </entry>
  <entry>
    <title>javaweb进阶学习</title>
    <url>/2021/02/25/javaweb2/</url>
    <content><![CDATA[<h1 id="JavaWeb进阶学习"><a href="#JavaWeb进阶学习" class="headerlink" title="JavaWeb进阶学习"></a>JavaWeb进阶学习</h1><p>配合学习视频：<a href="https://www.bilibili.com/video/BV12J411M7Sj?p=1">狂神说Java—JavaWeb入门到实战</a></p>
<p>内容主要包括：</p>
<ul>
<li>web开发基本概念</li>
<li>Tomcat服务器的学习和使用</li>
<li>Maven项目的搭建</li>
<li>Servlet介绍</li>
<li>Cookie、Session</li>
<li>Jsp</li>
<li>MVC架构</li>
<li>过滤器Filter、监听器Listener</li>
<li>JDBC</li>
</ul>
<a id="more"></a>

<h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><h3 id="1-1、前言"><a href="#1-1、前言" class="headerlink" title="1.1、前言"></a>1.1、前言</h3><p>web开发：</p>
<ul>
<li>web：指网页</li>
<li>静态web<ul>
<li>html、css</li>
<li>提供给所有人看的数据始终不会发生变化！</li>
</ul>
</li>
<li>动态web<ul>
<li>几乎所有的网站都是</li>
<li>提供给所有人看的数据始终会发生变化，每个人在不同的时间、地点看到的信息各不相同！</li>
<li>技术栈：Servlet/Jsp、ASP、PHP</li>
</ul>
</li>
</ul>
<p>在Java中，动态web资源开发的技术统称为JavaWeb</p>
<h3 id="1-2、web应用程序"><a href="#1-2、web应用程序" class="headerlink" title="1.2、web应用程序"></a>1.2、web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序</p>
<ul>
<li>a.html、b.html…多个web资源，可以被外界访问，对外界提供服务；</li>
<li>能访问到的任何一个页面或者资源，都存在于世界上的某一个计算机；</li>
<li>URL：统一资源定位符</li>
<li>这个统一的web资源会被放在同一个文件夹下，web应用程序—&gt;Tomcat：服务器</li>
<li>一个web应用由多部份组成（静态web、动态web）<ul>
<li>html、css、js</li>
<li>jsp、servlet</li>
<li>Java程序</li>
<li>jar包</li>
<li>配置文件（Properties）</li>
</ul>
</li>
<li>web应用程序编写完毕后，若想提供给外界访问，需要一个服务器来统一管理</li>
</ul>
<h3 id="1-3、静态web"><a href="#1-3、静态web" class="headerlink" title="1.3、静态web"></a>1.3、静态web</h3><ul>
<li>*.htm、 *.html，这些都是网页的后缀，如果服务器上一直存在着这些东西，我们就可以直接进行读取</li>
</ul>
<p><img src="/2021/02/25/javaweb2/image-20210222143234818.png" alt="image-20210222143234818"></p>
<ul>
<li>静态web缺点<ul>
<li>Web页面无法更新，所有用户看到的是同一个页面<ul>
<li>轮播图、点击特效：伪动态</li>
<li>JavaScript（实际开发中，使用最多）</li>
<li>VBScript</li>
</ul>
</li>
<li>、它无法和数据库交互（数据无法持久化，用户无法交互）</li>
</ul>
</li>
</ul>
<h3 id="1-4、动态web"><a href="#1-4、动态web" class="headerlink" title="1.4、动态web"></a>1.4、动态web</h3><p>页面展示的效果会因人而异</p>
<p><img src="/2021/02/25/javaweb2/image-20210222144143176.png" alt="image-20210222144143176"></p>
<p>缺点：</p>
<ul>
<li>加入服务器的动态web资源出现了错误，我们需要重新编写<strong>后台程序</strong><ul>
<li>停机维护</li>
</ul>
</li>
</ul>
<p>优点：</p>
<ul>
<li>Web页面可以动态更新，所有用户看到的都不是同一个页面</li>
<li>可以与数据库进行交互（可以数据持久化）</li>
</ul>
<p><img src="/2021/02/25/javaweb2/image-20210222144553507.png" alt="image-20210222144553507"></p>
<h2 id="2、web服务器"><a href="#2、web服务器" class="headerlink" title="2、web服务器"></a>2、web服务器</h2><h3 id="2-1、技术讲解"><a href="#2-1、技术讲解" class="headerlink" title="2.1、技术讲解"></a>2.1、技术讲解</h3><ol>
<li>ASP</li>
</ol>
<ul>
<li>微软：国内最早流行的就是ASP</li>
<li>在HTML中嵌入了VB脚本，ASP+COM</li>
<li>在ASP开发中，基本一个页面都有几千行的业务代码，页面及其混乱</li>
<li>维护成本高</li>
<li>C#</li>
<li>IIS</li>
</ul>
<ol start="2">
<li>php</li>
</ol>
<ul>
<li>PHP开发速度很快，功能很强大，跨平台，代码简单</li>
<li>缺点：无法承载大访问量的情况（局限性）</li>
</ul>
<ol start="3">
<li><strong>JSP/Servlet</strong></li>
</ol>
<ul>
<li><p>sun公司主推的B/S架构</p>
</li>
<li><p>基于Java语言（所有的大公司，或者一些开源的组件，都是用Java语言写的）</p>
</li>
<li><p>可以承载三高（高并发、高可用、高性能）问题带来的影响</p>
</li>
<li><p>语法像ASP，易于ASP程序员转JSP，加强市场强度</p>
<p>……</p>
</li>
</ul>
<h3 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户的一些响应信息</p>
<ol>
<li>IIS </li>
</ol>
<p>微软的，ASP…，Windows自带的</p>
<ol start="2">
<li><strong>Tomcat</strong></li>
</ol>
<p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由<a href="https://baike.baidu.com/item/Apache/6265">Apache</a>、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现。因为Tomcat 技术先进、性能稳定，而且<strong>免费</strong>，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p>
<p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，是最佳选择</p>
<p>Tomcat 实际上运行JSP 页面和Servlet。目前Tomcat最新版本为9.0.41<strong>。</strong>    </p>
<p>……</p>
<p>ps. 工作3-5年后可尝试手写Tomcat服务器（了解底层原理）；</p>
<p>下载Tomcat：</p>
<ol>
<li>安装 or 解压</li>
<li>了解配置文件及目录结构</li>
<li>这个东西的作用</li>
</ol>
<h2 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h2><h3 id="3-1、安装Tomcat"><a href="#3-1、安装Tomcat" class="headerlink" title="3.1、安装Tomcat"></a>3.1、安装Tomcat</h3><p>Tomcat官网</p>
<p><img src="/2021/02/25/javaweb2/image-20210222151743336.png" alt="image-20210222151743336"></p>
<h3 id="3-2、Tomcat启动和关闭"><a href="#3-2、Tomcat启动和关闭" class="headerlink" title="3.2、Tomcat启动和关闭"></a>3.2、Tomcat启动和关闭</h3><p><img src="/2021/02/25/javaweb2/image-20210222152144770.png" alt="image-20210222152144770"></p>
<p>访问测试：<a href="http://localhost:8080/">http://localhost:8080/</a></p>
<p>可能遇到的问题：</p>
<ol>
<li>Java环境变量没有配置</li>
<li>闪退问题：需要配置兼容性</li>
<li>乱码问题：配置文件中设置</li>
</ol>
<p><img src="/2021/02/25/javaweb2/image-20210222152442488.png" alt="image-20210222152442488"></p>
<h3 id="3-3、配置"><a href="#3-3、配置" class="headerlink" title="3.3、配置"></a>3.3、配置</h3><p>可以配置启动的端口号</p>
<ul>
<li>Tomcat的端口号：8080</li>
<li>mysql：3306</li>
<li>http：80</li>
<li>https：443</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以配置主机名称</p>
<ul>
<li>默认的主机名为：localhost—&gt;127.0.0.1</li>
<li>默认网站应用存放的位置为：webapps</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>面试题</strong>：请你谈谈网站是如何进行访问的？</p>
<ol>
<li>输入一个域名，回车</li>
<li>检查本机的C:\Windows\System32\drivers\etc\hosts配置文件下有没有对应这个域名的映射<ol>
<li>有，返回对应的ip地址</li>
<li>没有，去DNS服务器进行域名解析，获取ip地址</li>
</ol>
</li>
</ol>
<h3 id="3-4、发布一个web网站"><a href="#3-4、发布一个web网站" class="headerlink" title="3.4、发布一个web网站"></a>3.4、发布一个web网站</h3><ul>
<li>将自己写的网站，放到服务器（Tomcat）中指定的web应用的文件夹（webapps）下，就可以访问了</li>
</ul>
<p>网站应该有的结构</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby">-webapps : Tomcat服务器的web目录</span></span><br><span class="line"><span class="ruby">	-ROOT</span></span><br><span class="line"><span class="ruby">	-webname : 网站的目录名</span></span><br><span class="line"><span class="ruby">		-WEB-INF </span></span><br><span class="line"><span class="ruby">			-classes : java程序</span></span><br><span class="line"><span class="ruby">			-lib : web应用所依赖的jar包</span></span><br><span class="line"><span class="ruby">			-web.xml : 网站的配置文件</span></span><br><span class="line"><span class="ruby">		-intdex.html 默认的首页</span></span><br><span class="line"><span class="ruby">		-static</span></span><br><span class="line"><span class="ruby">			-css</span></span><br><span class="line"><span class="ruby">			-style.css</span></span><br><span class="line"><span class="ruby">			-js</span></span><br><span class="line"><span class="ruby">			-img</span></span><br><span class="line"><span class="ruby">		-......</span></span><br></pre></td></tr></table></figure>
<h2 id="4、Http"><a href="#4、Http" class="headerlink" title="4、Http"></a>4、Http</h2><h3 id="4-1、什么是Http"><a href="#4-1、什么是Http" class="headerlink" title="4.1、什么是Http"></a>4.1、什么是Http</h3><p>超文本传输协议（Hypertext Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在<a href="https://baike.baidu.com/item/TCP/33012">TCP</a>之上。</p>
<ul>
<li>文字：html、字符串…</li>
<li>超文本：图片、音乐、视频、地图…</li>
<li>端口号：80</li>
</ul>
<p>Https：安全的</p>
<ul>
<li>端口号：443</li>
</ul>
<h3 id="4-2、两个时代"><a href="#4-2、两个时代" class="headerlink" title="4.2、两个时代"></a>4.2、两个时代</h3><ul>
<li><p>http1.0</p>
<ul>
<li>HTTP/1.0：客户端与web服务器连接后，只能获得一个web资源，断开连接</li>
</ul>
</li>
<li><p>http2.0</p>
<ul>
<li>HTTP/1.1：客户端与web服务器连接后，可以获得多个web资源。</li>
</ul>
</li>
</ul>
<h3 id="4-3、Http请求"><a href="#4-3、Http请求" class="headerlink" title="4.3、Http请求"></a>4.3、Http请求</h3><ul>
<li>客户端—发请求（Request）—服务器</li>
</ul>
<p>百度：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">请求 <span class="built_in">URL</span>: <span class="keyword">https</span>://www.baidu.com/	 请求地址</span><br><span class="line">请求方法: GET						<span class="built_in">get</span>方法/<span class="built_in">post</span>方法</span><br><span class="line">状态代码: <span class="number">200</span> OK					状态码</span><br><span class="line">远程地址: <span class="number">110.242</span><span class="number">.68</span><span class="number">.4</span>:<span class="number">443</span>			</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate, br</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span></span><br><span class="line"><span class="comment">Cache-Control: max-age=0</span></span><br><span class="line"><span class="comment">Connection: keep-alive</span></span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><ul>
<li>请求行中的请求方式：GET</li>
<li>请求方式：<strong>Get，Post</strong>，HEAD，DELETE，PUT，TRACT…<ul>
<li>get：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li>
<li>post：请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="消息头"><a href="#消息头" class="headerlink" title="消息头"></a>消息头</h4></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept				告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding		支持哪种编码格式 GBK、UTF-<span class="number">8</span>、GB2312、ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language		告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control		缓存控制</span><br><span class="line">Connection			告诉浏览器，请求完成是断开，还是保持连接</span><br><span class="line">Host				主机</span><br></pre></td></tr></table></figure>


<h3 id="4-4、Http响应"><a href="#4-4、Http响应" class="headerlink" title="4.4、Http响应"></a>4.4、Http响应</h3><ul>
<li>服务器—响应—客户端</li>
</ul>
<p>百度：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">Cache-<span class="attr">Control:</span> <span class="keyword">private</span>		缓存控制</span><br><span class="line"><span class="attr">Connection:</span> keep-alive		连接</span><br><span class="line">Content-<span class="attr">Encoding:</span> gzip		编码</span><br><span class="line">Content-<span class="attr">Type:</span> text/html		类型</span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4></li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Accept</span>				告诉浏览器，它所支持的数据类型</span><br><span class="line"><span class="attribute">Accept</span>-Encoding		支持哪种编码格式 GBK、UTF-<span class="number">8</span>、GB<span class="number">2312</span>、ISO<span class="number">8859</span>-<span class="number">1</span></span><br><span class="line"><span class="attribute">Accept</span>-Language		告诉浏览器，它的语言环境</span><br><span class="line"><span class="attribute">Cache</span>-Control		缓存控制</span><br><span class="line"><span class="attribute">Connection</span>			告诉浏览器，请求完成是断开，还是保持连接</span><br><span class="line"><span class="attribute">Host</span>				主机</span><br><span class="line"><span class="attribute">Refresh</span>				告诉客户端，多久刷新一次</span><br><span class="line"><span class="attribute">Location</span>			让网页重新定位</span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="响应请求码"><a href="#响应请求码" class="headerlink" title="响应请求码"></a>响应请求码</h4></li>
</ul>
<p>200：请求响应成功</p>
<p>3xx：请求重定向</p>
<ul>
<li>重定向：转向新的位置</li>
</ul>
<p>4xx：找不到资源（404）</p>
<ul>
<li>资源不存在</li>
</ul>
<p>5xx：服务器代码错误 500、网关错误502</p>
<p><strong>面试题</strong>：当浏览器输入地址并回车的一瞬间到页面显示出来，经历了什么？（思考）</p>
<h2 id="5、Maven"><a href="#5、Maven" class="headerlink" title="5、Maven"></a>5、Maven</h2><p><strong>为什么要学习Maven这个技术？</strong></p>
<ol>
<li>在Javaweb开发中，需要使用大量的jar包，手动导入效率低下</li>
<li>Maven——<u>自动导入jar包</u></li>
</ol>
<h3 id="5-1、Maven项目架构管理工具"><a href="#5-1、Maven项目架构管理工具" class="headerlink" title="5.1、Maven项目架构管理工具"></a>5.1、Maven项目架构管理工具</h3><p>Maven核心思想：<strong>约定大于配置</strong></p>
<h3 id="5-2、下载安装Maven"><a href="#5-2、下载安装Maven" class="headerlink" title="5.2、下载安装Maven"></a>5.2、下载安装Maven</h3><p>官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a></p>
<p><img src="/2021/02/25/javaweb2/image-20210222174202816.png" alt="image-20210222174202816"></p>
<p>下载完成后解压即可</p>
<p>友情建议：电脑所有环境都放在一个文件夹下，方便管理</p>
<h3 id="5-3、配置环境变量"><a href="#5-3、配置环境变量" class="headerlink" title="5.3、配置环境变量"></a>5.3、配置环境变量</h3><p>在系统环境变量中，配置如下配置</p>
<ul>
<li>M2_HOME    maven目录下的bin目录</li>
<li>MAVEN_HOME    maven的目录</li>
<li>在系统的path中配置   %MAVEN_HOME%\bin</li>
</ul>
<p>测试Maven是否安装成功，保证必须配置完毕：</p>
<p><img src="/2021/02/25/javaweb2/image-20210222174908648.png" alt="image-20210222174908648"></p>
<h3 id="5-4、阿里云镜像"><a href="#5-4、阿里云镜像" class="headerlink" title="5.4、阿里云镜像"></a>5.4、阿里云镜像</h3><ul>
<li>镜像：mirrors<ul>
<li>作用：加速我们的下载</li>
</ul>
</li>
<li>国内建议使用阿里云的镜像</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-5、本地仓库"><a href="#5-5、本地仓库" class="headerlink" title="5.5、本地仓库"></a>5.5、本地仓库</h3><p>建立一个本第仓库：localRepository</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>E:\Idea_jars\apache-maven-3.6.3\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-6、在IDEA中使用Maven"><a href="#5-6、在IDEA中使用Maven" class="headerlink" title="5.6、在IDEA中使用Maven"></a>5.6、在IDEA中使用Maven</h3><ol>
<li>启动IDEA</li>
<li>创建一个Maven项目</li>
</ol>
<p><img src="/2021/02/25/javaweb2/image-20210222180127599.png" alt="image-20210222180127599"></p>
<p><img src="/2021/02/25/javaweb2/image-20210222180514095.png" alt="image-20210222180514095"></p>
<p><img src="/2021/02/25/javaweb2/image-20210222181107728.png" alt="image-20210222181107728"></p>
<ol start="3">
<li>等待项目初始化完毕</li>
</ol>
<p><img src="/2021/02/25/javaweb2/image-20210222181408584.png" alt="image-20210222181408584"></p>
<ol start="4">
<li>观察maven仓库中多了什么东西</li>
<li>检查IDEA中的Maven设置</li>
</ol>
<p><strong>注意</strong>：IDEA中配置Maven经常会出现一个问题：自动创建完成后，它这个MAVEN_HOME会使用IDEA默认，如果发现需要手动改为本地</p>
<p><img src="/2021/02/25/javaweb2/image-20210222182145013.png" alt="image-20210222182145013"></p>
<p><img src="/2021/02/25/javaweb2/image-20210222182409985.png" alt="image-20210222182409985"></p>
<ol start="6">
<li>到这里，Maven在IDEA中的配置和使用就OK了</li>
</ol>
<h3 id="5-7、标记文件夹功能"><a href="#5-7、标记文件夹功能" class="headerlink" title="5.7、标记文件夹功能"></a>5.7、标记文件夹功能</h3><p>法一：</p>
<p><img src="/2021/02/25/javaweb2/image-20210222211754894.png" alt="image-20210222211754894"></p>
<p>法二：</p>
<p><img src="/2021/02/25/javaweb2/image-20210222212128571.png" alt="image-20210222212128571"></p>
<h3 id="5-8、在IDEA中配置Tomcat"><a href="#5-8、在IDEA中配置Tomcat" class="headerlink" title="5.8、在IDEA中配置Tomcat"></a>5.8、在IDEA中配置Tomcat</h3><p><img src="/2021/02/25/javaweb2/image-20210222212352975.png" alt="image-20210222212352975"></p>
<p><img src="/2021/02/25/javaweb2/image-20210222212531734.png" alt="image-20210222212531734"></p>
<p><img src="/2021/02/25/javaweb2/image-20210222213319824.png" alt="image-20210222213319824"></p>
<p>解决警告问题：</p>
<p><img src="/2021/02/25/javaweb2/image-20210222213455024.png" alt="image-20210222213455024"></p>
<p><img src="/2021/02/25/javaweb2/image-20210222213543756.png" alt="image-20210222213543756"></p>
<p><img src="/2021/02/25/javaweb2/image-20210222214237961.png" alt="image-20210222214237961"></p>
<p><img src="/2021/02/25/javaweb2/image-20210222214624913.png" alt="image-20210222214624913"></p>
<h3 id="5-9、pom文件"><a href="#5-9、pom文件" class="headerlink" title="5.9、pom文件"></a>5.9、pom文件</h3><p>pom.xml是Maven的核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Maven版本和头文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!--这里就是我们刚才配置的GAV--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zqy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb_learn<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!--Package项目的打包方式:</span></span><br><span class="line"><span class="comment">    jar：java应用</span></span><br><span class="line"><span class="comment">    war：javaweb应用--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的默认构建编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--编码版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!--项目依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--具体依赖的jar包配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!--项目构建用的东西，不需要可删掉--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>javaweb_learn<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="6、Servlet"><a href="#6、Servlet" class="headerlink" title="6、Servlet"></a>6、Servlet</h2><h3 id="6-1、Servlet简介"><a href="#6-1、Servlet简介" class="headerlink" title="6.1、Servlet简介"></a>6.1、Servlet简介</h3><ul>
<li>Servlet就是sun公司开发的一门动态web技术</li>
<li>sun公司在这些API中提供了一些接口叫：Servlet，如果想开发一个Servlet程序，只需要两步：<ul>
<li>编写一个类，实现Servlet接口</li>
<li>把开发好的Java类部署到web服务器中</li>
</ul>
</li>
</ul>
<p>把实现了Servlet接口的Java程序叫做：Servlet</p>
<h3 id="6-2、HelloServlet"><a href="#6-2、HelloServlet" class="headerlink" title="6.2、HelloServlet"></a>6.2、HelloServlet</h3><p>Servlet接口Sun公司有两个默认实现类：HttpServlet、GenericServlet</p>
<ol>
<li>编写一个Servlet程序<ol>
<li>编写一个普通类</li>
<li>实现Servlet接口，这里我们直接继承HttpServlet</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//响应类型</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取响应的输出流</span></span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;HttpServlet类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>编写Servlet的映射</p>
<p>为什么需要映射？我们写的是Java程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要在web服务器中注册我们的Servlet，还需要给他一个浏览器能够访问的路径</p>
</li>
<li><p>配置Tomcat</p>
<p>注意：配置项目发布的路径就可以了</p>
</li>
<li><p>启动测试，OK！</p>
</li>
</ol>
<h3 id="6-3、Servlet原理"><a href="#6-3、Servlet原理" class="headerlink" title="6.3、Servlet原理"></a>6.3、Servlet原理</h3><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求后，会：</p>
<p><img src="/2021/02/25/javaweb2/image-20210223001832555.png" alt="image-20210223001832555"></p>
<h3 id="6-4、Mapping问题"><a href="#6-4、Mapping问题" class="headerlink" title="6.4、Mapping问题"></a>6.4、Mapping问题</h3><ol>
<li>一个Servlet可以指定一个映射路径</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mappng</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>一个Servlet可以指定多个映射路径</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mappng</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mappng</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mappng</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>一个Servlet可以指定通用映射路径</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mappng</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>默认请求路径：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mappng</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>一个Servlet可以指定一些后缀或者前缀等等…</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以自定义后缀实现请求映射</span></span><br><span class="line"><span class="comment">  注意：*前面不能加映射路径--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li><p>优先级问题</p>
<p>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求</p>
</li>
</ol>
<h3 id="6-5、ServletContext"><a href="#6-5、ServletContext" class="headerlink" title="6.5、ServletContext"></a>6.5、ServletContext</h3><p>web容器启动时，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用。</p>
<ol>
<li>共享数据</li>
</ol>
<p><img src="/2021/02/25/javaweb2/image-20210223004807634.png" alt="image-20210223004807634"></p>
<ol start="2">
<li>获取初始化参数</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置一些web应用初始化参数--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">       String url = context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">       resp.getWriter().print(url);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>请求转发</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="comment">//      RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/hello&quot;);//转发的请求路径</span></span><br><span class="line"><span class="comment">//      requestDispatcher.forward(req,resp);//调用forward实现转发请求</span></span><br><span class="line">        context.getRequestDispatcher(<span class="string">&quot;/hello&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>读取资源文件</li>
</ol>
<p>Properties</p>
<ul>
<li><p>在Java目录下新建properties</p>
<ul>
<li><p>如果遇到Maven项src/main/java目录下配置文件无法被导出或者生效的问题和处理方案：</p>
<p>在pom.xml文件的&lt; build &gt;标签中添加以下内容，把java目录下的文件也打包编译</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在resources目录下新建properties</li>
</ul>
<p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath（类路径）</p>
<p>思路：需要一个文件流</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//下面用的是相对路径，第一个斜杠（/）表示当前web应用路径下</span></span><br><span class="line">        InputStream is = context.getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        String user = prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String pwd = prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        resp.getWriter().print(user+<span class="string">&quot;:&quot;</span>+pwd);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<h3 id="6-6、HttpServletResponse"><a href="#6-6、HttpServletResponse" class="headerlink" title="6.6、HttpServletResponse"></a>6.6、HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对每个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse对象；</p>
<ul>
<li>如果要获取客户端请求过来的参数：找HttpServletRequest</li>
<li>如果要给客户端响应一些信息：找HttpServletResponse</li>
</ul>
<h4 id="1、简单分类"><a href="#1、简单分类" class="headerlink" title="1、简单分类"></a>1、简单分类</h4><ol>
<li>负责向浏览器发送数据的方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function">PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>向浏览器发送响应头的方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLengthLong</span><span class="params">(<span class="keyword">long</span> var1)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>响应的状态码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> SC_CONTINUE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SWITCHING_PROTOCOLS = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">int</span> SC_OK = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CREATED = <span class="number">201</span>;</span><br><span class="line"><span class="keyword">int</span> SC_ACCEPTED = <span class="number">202</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class="number">203</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NO_CONTENT = <span class="number">204</span>;</span><br><span class="line"><span class="keyword">int</span> SC_RESET_CONTENT = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PARTIAL_CONTENT = <span class="number">206</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MULTIPLE_CHOICES = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_PERMANENTLY = <span class="number">301</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_TEMPORARILY = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FOUND = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SEE_OTHER = <span class="number">303</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_MODIFIED = <span class="number">304</span>;</span><br><span class="line"><span class="keyword">int</span> SC_USE_PROXY = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> SC_TEMPORARY_REDIRECT = <span class="number">307</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_REQUEST = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNAUTHORIZED = <span class="number">401</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PAYMENT_REQUIRED = <span class="number">402</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FORBIDDEN = <span class="number">403</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_FOUND = <span class="number">404</span>;</span><br><span class="line"><span class="keyword">int</span> SC_METHOD_NOT_ALLOWED = <span class="number">405</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_ACCEPTABLE = <span class="number">406</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class="number">407</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_TIMEOUT = <span class="number">408</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CONFLICT = <span class="number">409</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GONE = <span class="number">410</span>;</span><br><span class="line"><span class="keyword">int</span> SC_LENGTH_REQUIRED = <span class="number">411</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PRECONDITION_FAILED = <span class="number">412</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class="number">413</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_URI_TOO_LONG = <span class="number">414</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class="number">415</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="number">416</span>;</span><br><span class="line"><span class="keyword">int</span> SC_EXPECTATION_FAILED = <span class="number">417</span>;</span><br><span class="line"><span class="keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_IMPLEMENTED = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_GATEWAY = <span class="number">502</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SERVICE_UNAVAILABLE = <span class="number">503</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GATEWAY_TIMEOUT = <span class="number">504</span>;</span><br><span class="line"><span class="keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class="number">505</span>;</span><br></pre></td></tr></table></figure>
<h4 id="2、常见应用"><a href="#2、常见应用" class="headerlink" title="2、常见应用"></a>2、常见应用</h4><ol>
<li>向浏览器输出信息</li>
<li><strong>下载文件</strong><ul>
<li>获取下载文件路径</li>
<li>下载的文件名</li>
<li>设置浏览器支持下载</li>
<li>获取下载文件的输入流</li>
<li>创建缓冲区</li>
<li>获取OutputStream对象</li>
<li>将FileOutputStream流写入到缓冲区（buffer）</li>
<li>使用OutputStream将缓冲区中的数据输出到客户端！</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">//1、获取下载文件路径</span></span><br><span class="line">       String realPath = <span class="string">&quot;E:\\java课设参考文件\\javaweb_learn\\src\\main\\resources\\头像.jpg&quot;</span>;</span><br><span class="line">       System.out.println(<span class="string">&quot;下载文件的路径为：&quot;</span>+realPath);</span><br><span class="line">       <span class="comment">//2、下载的文件名</span></span><br><span class="line">       String fileName = realPath.substring(realPath.lastIndexOf(<span class="string">&quot;\\&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">       <span class="comment">//3、设置浏览器支持下载，中文文件名URLEncoder.encode编码，否则会乱码</span></span><br><span class="line">       resp.setHeader(<span class="string">&quot;Content-disposition&quot;</span>,<span class="string">&quot;attachment;filename&quot;</span>+ URLEncoder.encode(fileName,<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">       <span class="comment">//4、获取下载文件的输入流</span></span><br><span class="line">       FileInputStream in = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">       <span class="comment">//5、创建缓冲区</span></span><br><span class="line">       <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="comment">//6、获取OutputStream对象</span></span><br><span class="line">       ServletOutputStream outputStream = resp.getOutputStream();</span><br><span class="line">       <span class="comment">//7、将FileOutputStream流写入到缓冲区（buffer）</span></span><br><span class="line">       <span class="keyword">while</span> ((len = in.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//8、使用OutputStream将缓冲区中的数据输出到客户端！</span></span><br><span class="line">            outputStream.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">       &#125;</span><br><span class="line">       in.close();</span><br><span class="line">       outputStream.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h4 id="3、验证码功能"><a href="#3、验证码功能" class="headerlink" title="3、验证码功能"></a>3、验证码功能</h4><p>验证怎么来的？</p>
<ul>
<li>前端实现</li>
<li>后端实现，需要java的图片类，生成一个图片</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//如何让浏览器每3s刷新一次</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="comment">//在内存中创建一个图片</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(<span class="number">80</span>,<span class="number">20</span>,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">//得到图片</span></span><br><span class="line">        Graphics2D g = (Graphics2D)image.getGraphics(); <span class="comment">//笔</span></span><br><span class="line">        <span class="comment">//设置图片的背景颜色</span></span><br><span class="line">        g.setColor(Color.white);</span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//给图片写数据</span></span><br><span class="line">        g.setColor(Color.blue);</span><br><span class="line">        g.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">        g.drawString(randNum(),<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉浏览器，这个请求用图片的形式打开</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;image/jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//网站存在缓存，不让浏览器缓存</span></span><br><span class="line">        resp.setDateHeader(<span class="string">&quot;expires&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Pragma&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        <span class="comment">//把图片写给浏览器</span></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>, resp.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成7位随机数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">randNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            str.append(random.nextInt(<span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="4、实现重定向"><a href="#4、实现重定向" class="headerlink" title="4、实现重定向"></a>4、实现重定向</h4><p>一个web资源收到客户端请求后，它会通知客户端去访问另外一个web资源，这个过程叫重定向</p>
<p>常见场景：</p>
<ul>
<li>用户登入</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(String var1)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       resp.setHeader(&quot;Location&quot;,&quot;/zqy/header.jsp&quot;);</span></span><br><span class="line"><span class="comment">       resp.setStatus(302);		//HttpServletResponse.SC_MOVED_TEMPORARILY</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       resp.sendRedirect(<span class="string">&quot;/zqy/header.jsp&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>面试题：请你聊聊重定向和转发的区别？</p>
<p>相同点：都会实现页面跳转</p>
<p>不同点：请求转发的时候，url不会发生跳转 307；重定向的时候url地址栏会变化 302</p>
<h3 id="6-7、HttpServletRequest"><a href="#6-7、HttpServletRequest" class="headerlink" title="6.7、HttpServletRequest"></a>6.7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http访问服务器，Http请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，可以获得客户端的所有信息</p>
<p><img src="/2021/02/25/javaweb2/image-20210223213038083.png" alt="image-20210223213038083"></p>
<h4 id="1、获取参数、请求转发"><a href="#1、获取参数、请求转发" class="headerlink" title="1、获取参数、请求转发"></a>1、获取参数、请求转发</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">getParameter</span><span class="params">(String var1)</span></span>;</span><br><span class="line"><span class="function">Enumeration&lt;String&gt; <span class="title">getParameterNames</span><span class="params">()</span></span>;</span><br><span class="line">String[] getParameterValues(String var1);</span><br><span class="line">Map&lt;String, String[]&gt; getParameterMap();</span><br></pre></td></tr></table></figure>
<p>其中getParameter() 和 getParameterValues() 重点记忆</p>
<p>登录示例：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;登录界面&lt;/h2&gt;</span><br><span class="line">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;</span><br><span class="line">&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;%--这里表单表示的意思：以get方式提交表单，提交到我们的login请求--%&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">        用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">        密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">        爱好：</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbys&quot;</span> value=<span class="string">&quot;女孩&quot;</span>&gt;女孩</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbys&quot;</span> value=<span class="string">&quot;吉他&quot;</span>&gt;吉他</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbys&quot;</span> value=<span class="string">&quot;网球&quot;</span>&gt;网球</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbys&quot;</span> value=<span class="string">&quot;金币&quot;</span>&gt;金币</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> &gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String pwd = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    String[] hobbys = req.getParameterValues(<span class="string">&quot;hobbys&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(pwd);</span><br><span class="line">    System.out.println(Arrays.toString(hobbys));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//请求转发</span></span><br><span class="line">    System.out.println(req.getContextPath());</span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;./header.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7、Cookie、Session"><a href="#7、Cookie、Session" class="headerlink" title="7、Cookie、Session"></a>7、Cookie、Session</h2><h3 id="7-1、Session会话"><a href="#7-1、Session会话" class="headerlink" title="7.1、Session会话"></a>7.1、Session会话</h3><p><strong>会话</strong>：用户打开一个浏览器，点了很多超链接，访问多个web资源，关闭浏览器，这个过程称之为会话</p>
<p><strong>有状态会话</strong>：每个用户有自己特有的一个实例，在用户的生存期内，bean保持了用户的信息，即“有状态”；一旦用户灭亡（调用结束或实例结束），bean的生命期也告结束。即每个用户最初都会得到一个初始的bean。 </p>
<h3 id="7-2、保存会话的两种技术"><a href="#7-2、保存会话的两种技术" class="headerlink" title="7.2、保存会话的两种技术"></a>7.2、保存会话的两种技术</h3><p>Cookie与Session是Web程序中用来跟踪用户的整个会话常用的两个技术</p>
<ul>
<li><strong>Cookie通过在客户端记录信息确定用户身份</strong></li>
<li><strong>Session通过在服务器端记录信息确定用户身份</strong></li>
</ul>
<h3 id="7-3、Cookie"><a href="#7-3、Cookie" class="headerlink" title="7.3、Cookie"></a>7.3、Cookie</h3><p><img src="/2021/02/25/javaweb2/image-20210224013118157.png" alt="image-20210224013118157"></p>
<ol>
<li>从请求中拿到cookie信息</li>
<li>服务器相应给客户端cookie</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies();							<span class="comment">//从客户端获取Cookie</span></span><br><span class="line">cookie.getName()												<span class="comment">//获取cookie中的key</span></span><br><span class="line">cookie.getValue()												<span class="comment">//获取cookie中的value</span></span><br><span class="line"><span class="keyword">new</span> Cookie(<span class="string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis() + <span class="string">&quot;&quot;</span>);	<span class="comment">//新建一个cookie</span></span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);										<span class="comment">//设置cookie有效期为一天</span></span><br><span class="line">resp.addCookie(cookie);											<span class="comment">//服务器给客户端响应一个Cookie</span></span><br></pre></td></tr></table></figure>
<p>tips：Cookie一般保存在本地用户目录下的appdata</p>
<p>一个网站的Cookie是否存在上限？</p>
<ul>
<li><p>浏览器一般只允许存放300个Cookie</p>
</li>
<li><p>一个web站点最多存放20个cookie</p>
</li>
<li><p>Cookie大小有限制，最多4kb</p>
</li>
<li><p>一个Cookie只能保存一个信息</p>
</li>
</ul>
<p>删除Cookie：</p>
<ul>
<li>不设置有效期，关闭浏览器，自动失效</li>
<li>设置有效期为0</li>
</ul>
<p>中文乱码可以考虑的解决方式：编码解码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URLEncoder.encode(<span class="string">&quot;雷克萨&quot;</span>,<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">URLDecoder.decode(cookie.getValue(),<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="7-4、Session（重点）"><a href="#7-4、Session（重点）" class="headerlink" title="7.4、Session（重点）"></a>7.4、Session（重点）</h3><p><img src="/2021/02/25/javaweb2/image-20210224013459890.png" alt="image-20210224013459890"></p>
<p>什么是Session？</p>
<ul>
<li>服务器会给每一个用户（浏览器）创建一个Session对象</li>
<li>一个Session独占一个浏览器，只要浏览器没关，这个Session就存在</li>
<li>用户登录后，保存用户的信息</li>
</ul>
<p><img src="/2021/02/25/javaweb2/image-20210224010010090.png" alt="image-20210224010010090"></p>
<p>Session和Cookie的区别：</p>
<ul>
<li><p>Cookie是把用户的数据写给用户的浏览器，浏览器保存（可以保存多个）</p>
<p>Session是把用户的数据写到用户独占的Session中，服务器端保存（保存重要信息，减少服务器资源的浪费）</p>
</li>
<li><p>Session对象由服务器创建</p>
</li>
</ul>
<p>使用场景：</p>
<ul>
<li>保存一个登录用户的信息</li>
<li>购物车信息</li>
<li>在整个网站中经常会使用的数据，我们将它保存在Session中</li>
</ul>
<p>使用Session：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//解决中文乱码</span></span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    <span class="comment">//得到Session</span></span><br><span class="line">    HttpSession session = req.getSession();</span><br><span class="line">    <span class="comment">//存东西</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;雷克萨&quot;</span>);</span><br><span class="line">    <span class="comment">//获取session的ID</span></span><br><span class="line">    String id = session.getId();</span><br><span class="line">    <span class="comment">//判断是不是新创建的</span></span><br><span class="line">    <span class="keyword">if</span>(session.isNew())&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;session创建成功，ID为：&quot;</span>+id);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;session已经存在了，ID为：&quot;</span>+id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到Session</span></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line">Person person = (Person)session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(person.toString())</span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line">session.removeAttribute(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//手动注销Session</span></span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure>
<p>会话自动过期，web.xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--1分钟后Session自动失效--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="8、JSP"><a href="#8、JSP" class="headerlink" title="8、JSP"></a>8、JSP</h2><h3 id="8-1、什么是JSP"><a href="#8-1、什么是JSP" class="headerlink" title="8.1、什么是JSP"></a>8.1、什么是JSP</h3><p>Java Server Pages：Java服务器端页面，也和Servlet一样，用于动态Web技术</p>
<ul>
<li><p>最大的特点：写Jsp就像写Html</p>
</li>
<li><p>区别：</p>
<ul>
<li>Html只给用户提供静态的数据</li>
<li>Jsp页面可以嵌入Java代码，为用户提供动态数据    </li>
</ul>
</li>
</ul>
<h3 id="8-2、Jsp原理"><a href="#8-2、Jsp原理" class="headerlink" title="8.2、Jsp原理"></a>8.2、Jsp原理</h3><p>思路：Jsp到底是如何执行的？</p>
<ul>
<li><p>代码层面没有任何问题</p>
</li>
<li><p>服务器内部工作</p>
<p>Tomcat中有一个work目录，IDEA中使用Tomcat的会在IDEA的Tomcat中生成一个work目录</p>
</li>
</ul>
<p><img src="/2021/02/25/javaweb2/image-20210224014853250.png" alt="image-20210224014853250"></p>
<p>我电脑的地址：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C:\Users\<span class="number">86138</span>\.IntelliJIdea2019<span class="number">.3</span>\system\tomcat\Unnamed_javaweb_learn_4\work\Catalina\localhost\zqy\org\apache\jsp	 </span><br></pre></td></tr></table></figure>
<p>发现页面转成了Java程序</p>
<p><img src="/2021/02/25/javaweb2/image-20210224015139147.png" alt="image-20210224015139147"></p>
<p><strong>浏览器向服务器发起请求，不管访问什么资源，其实都是在访问Servlet！</strong></p>
<p>Jsp最终会被转为一个Java类，本质上就是一个Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspInit</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspDestroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//JspService</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(<span class="keyword">final</span> javax.servlet.http.HttpServletRequest request, <span class="keyword">final</span> javax.servlet.http.HttpServletResponse response)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>判断请求</p>
</li>
<li><p>内置一些对象</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;	<span class="comment">//页面上下文</span></span><br><span class="line">javax.servlet.http.HttpSession session = <span class="keyword">null</span>;		<span class="comment">//session</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletContext application;		<span class="comment">//applicationContext</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletConfig config;			<span class="comment">//config</span></span><br><span class="line">javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;				<span class="comment">//out输出对象</span></span><br><span class="line"><span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;					<span class="comment">//page：当前页</span></span><br><span class="line">HttpServletRequest request;							<span class="comment">//请求</span></span><br><span class="line">HttpServletResponse response;						<span class="comment">//响应</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>输出页面前增加的代码：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);	<span class="comment">//设置响应的页面类型</span></span><br><span class="line">pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,<span class="keyword">null</span>, <span class="keyword">true</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext.getServletContext();</span><br><span class="line">config = pageContext.getServletConfig();</span><br><span class="line">session = pageContext.getSession();</span><br><span class="line">out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>以上的这些对象我们可以在Jsp中直接使用</li>
</ol>
<p><img src="/2021/02/25/javaweb2/image-20210224021905837.png" alt="image-20210224021905837"></p>
<p>在Jsp页面中，只要是Java代码，就会原封不动的输出，如果是Html代码，就会转换为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">out.write(<span class="string">&quot;&lt;html&gt;\n&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>这样的格式，输出到前端！</p>
<h3 id="8-3、Jsp基础语法"><a href="#8-3、Jsp基础语法" class="headerlink" title="8.3、Jsp基础语法"></a>8.3、Jsp基础语法</h3><p>Jsp作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可），支持Java的所有语法</p>
<h4 id="Jsp表达式"><a href="#Jsp表达式" class="headerlink" title="Jsp表达式"></a>Jsp表达式</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;%-- JSP表达式，作用：将程序输出到客户端&lt;%= 变量或者表达式%&gt; --%&gt;</span><br><span class="line">&lt;%= new java.util.Date()%&gt;</span><br></pre></td></tr></table></figure>
<h4 id="Jsp脚本片段"><a href="#Jsp脚本片段" class="headerlink" title="Jsp脚本片段"></a>Jsp脚本片段</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;%--Jsp脚本片段：--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    int sum = 0;</span><br><span class="line">    for (int i = 0; i &lt;= 100; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    out.println(&quot;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Sum=&quot;+sum+&quot;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&quot;);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<h4 id="脚本片段的再实现"><a href="#脚本片段的再实现" class="headerlink" title="脚本片段的再实现"></a>脚本片段的再实现</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;h1&gt;Hello World &lt;%=i%&gt;&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<h4 id="Jsp声明"><a href="#Jsp声明" class="headerlink" title="Jsp声明"></a>Jsp声明</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!...%&gt;</span><br></pre></td></tr></table></figure>
<p>Jsp声明：会被编译到Jsp生成的Java类中！其他的就会被生成_jspService方法中！</p>
<p>综上，在Jsp中嵌入Java代码即可</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%%&gt;</span><br><span class="line">&lt;%=%&gt;</span><br><span class="line">&lt;%!%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--注释--%&gt;</span><br></pre></td></tr></table></figure>
<p>Jsp的注释不会在客户端显示，而Html的注释&lt;!—- &gt;当查看源代码时会显示出来</p>
<h3 id="8-4、Jsp指令"><a href="#8-4、Jsp指令" class="headerlink" title="8.4、Jsp指令"></a>8.4、Jsp指令</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page args ...%&gt;</span><br><span class="line">&lt;%@ include file=<span class="string">&quot;&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--include会将两个页面合二为一--%&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/header.jsp&quot;</span>%&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/footer.jsp&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--jsp标签，jsp:include:拼接页面，本质还是三个--%&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;common/header.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;common/footer.jsp&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<h3 id="8-5、九大内置对象"><a href="#8-5、九大内置对象" class="headerlink" title="8.5、九大内置对象"></a>8.5、九大内置对象</h3><ul>
<li>PageContext 存东西</li>
<li>Request 存东西</li>
<li>Response</li>
<li>Session 存东西</li>
<li>Application【ServletContext】 存东西</li>
<li>config【ServletConfig】</li>
<li>out</li>
<li>page 不用了解</li>
<li>exception</li>
</ul>
<p>demo：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;雷克萨1号&quot;</span>);  <span class="comment">//保存的数据只在一个页面中有效</span></span><br><span class="line">    request.setAttribute(<span class="string">&quot;name2&quot;</span>,<span class="string">&quot;雷克萨2号&quot;</span>);  <span class="comment">//保存的数据在一次请求中有效，请求转发会携带这个数据</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;name3&quot;</span>,<span class="string">&quot;雷克萨3号&quot;</span>);  <span class="comment">//保存的数据在一次会话中有效，从打开浏览器到关闭浏览器</span></span><br><span class="line">    application.setAttribute(<span class="string">&quot;name4&quot;</span>,<span class="string">&quot;雷克萨4号&quot;</span>);  <span class="comment">//保存的数据在服务器中有效，从打开服务器到关闭服务器</span></span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//从pageContext中取出每一个，并输出</span></span><br><span class="line">    <span class="comment">//从底层到高层（作用域）：page-&gt;request-&gt;session-&gt;application</span></span><br><span class="line">    String name1 = (String) pageContext.findAttribute(<span class="string">&quot;name1&quot;</span>);</span><br><span class="line">    String name2 = (String) pageContext.findAttribute(<span class="string">&quot;name2&quot;</span>);</span><br><span class="line">    String name3 = (String) pageContext.findAttribute(<span class="string">&quot;name3&quot;</span>);</span><br><span class="line">    String name4 = (String) pageContext.findAttribute(<span class="string">&quot;name4&quot;</span>);</span><br><span class="line">    String name5 = (String) pageContext.findAttribute(<span class="string">&quot;name5&quot;</span>); <span class="comment">//不存在</span></span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--使用EL表达式输出 $&#123;&#125;--%&gt;</span><br><span class="line">&lt;h1&gt;保存的值为：&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name1&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name2&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name3&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name4&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name5&#125;&lt;/h3&gt;			&lt;%--什么也不输出--%&gt;</span><br><span class="line">&lt;h3&gt;&lt;%= name5%&gt;&lt;/h3&gt;		&lt;%--会输出null--%&gt;</span><br></pre></td></tr></table></figure>
<p>request：客户端向服务端发送请求，产生的数据，用户看完就没用了，比如新闻</p>
<p>session：客户端向服务端发送请求，产生的数据，用户看完一会还有用，比如购物车</p>
<p>application：客户端向服务端发送请求，产生的数据，一个用户用完其他用户还可能用，比如聊天数据</p>
<h3 id="8-6、Jsp标签，Jstl标签，EL表达式"><a href="#8-6、Jsp标签，Jstl标签，EL表达式" class="headerlink" title="8.6、Jsp标签，Jstl标签，EL表达式"></a>8.6、Jsp标签，Jstl标签，EL表达式</h3><p>需要导包：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jstl表达式依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- standard标签库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>EL表达式：${ }</p>
<ul>
<li>获取数据</li>
<li>执行运算</li>
<li>获取web开发的常用对象</li>
<li><del>调用java方法</del></li>
</ul>
<p><strong>Jsp标签</strong>：</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">%--</span><span class="xml"><span class="tag">&lt;<span class="name">jsp:include</span>&gt;</span>--%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">jsp:forward</span> <span class="attr">page</span>=<span class="string">&quot;jsp1.jsp&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">jsp:param</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;雷克萨&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">jsp:param</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">jsp:forward</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>Jstl表达式</strong></p>
<p>Jstl标签库的使用就是为了弥补Html标签的不足，它自定义了许多标签，标签的功能和java一样</p>
<p><strong>核心标签</strong>（掌握部分）</p>
<p>引用核心标签库的语法如下：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/02/25/javaweb2/image-20210224192407623.png" alt="image-20210224192407623"></p>
<p>Jstl标签库使用步骤</p>
<ul>
<li>引入对应的taglib</li>
<li>使用其中的方法</li>
<li>在Tomcat也需要引入jstl包，否则会报错：Jstl解析错误</li>
</ul>
<p>c:if 测试</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&lt;h4&gt;<span class="keyword">if</span>测试&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">form</span> action=<span class="string">&quot;/index.jsp&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    &lt;%--EL表达式获取表单中的数据：<span class="variable">$&#123;param</span>.参数名&#125;&#125;--%&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登入&quot;</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">form</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:<span class="keyword">if</span> <span class="keyword">test</span>=<span class="string">&quot;$&#123;param.username == &#x27;admin&#x27;&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;isAdmin&quot;</span>&gt;</span><br><span class="line">    &lt;c:<span class="keyword">out</span> value=<span class="string">&quot;管理员欢迎您&quot;</span>/&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:<span class="keyword">out</span> value=<span class="string">&quot;$&#123;isAdmin&#125;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>c:choose测试</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;score&quot;</span> value=<span class="string">&quot;88&quot;</span>/&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=90&#125;&quot;</span>&gt;</span><br><span class="line">        你的成绩为优秀</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=80&#125;&quot;</span>&gt;</span><br><span class="line">        你的成绩为优秀</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure>
<p>c:forEach测试</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    ArrayList&lt;String&gt; people = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    people.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    people.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    people.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    people.add(<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">    people.add(<span class="string">&quot;田七&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;list&quot;</span>,people);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    <span class="keyword">var</span>：每一次遍历出来的变量</span><br><span class="line">    items：要遍历的对象</span><br><span class="line">    begin：开始下标</span><br><span class="line">    end：结束下标</span><br><span class="line">    step：步长</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;people&quot;</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span> begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;3&quot;</span> step=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;$&#123;people&#125;&quot;</span>/&gt;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>
<p><strong>格式化标签</strong></p>
<p>JSTL格式化标签用来格式化并输出文本、日期、时间、数字。引用格式化标签库的语法如下：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>
<p><strong>SQL标签</strong></p>
<p>JSTL SQL标签库提供了与关系型数据库（Oracle，MySQL，SQL Server等等）进行交互的标签。引用SQL标签库的语法如下：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;sql&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/sql&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>
<p><strong>XML 标签</strong></p>
<p>JSTL XML标签库提供了创建和操作XML文档的标签。引用XML标签库的语法如下：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;x&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/xml&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>
<p><strong>JSTL函数</strong></p>
<p>JSTL包含一系列标准函数，大部分是通用的字符串处理函数。引用JSTL函数库的语法如下：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fn&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/functions&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>
<h2 id="9、JavaBeen"><a href="#9、JavaBeen" class="headerlink" title="9、JavaBeen"></a>9、JavaBeen</h2><p>实体类</p>
<p>Javabeen有特定的写法：</p>
<ul>
<li>必须要有一个无参构造</li>
<li>属性必须私有化</li>
<li>必须有get/set方法</li>
</ul>
<p>一般用来和数据库的字段做映射 ORM（对象关系映射）</p>
<ul>
<li>表—&gt;类</li>
<li>字段—&gt;属性</li>
<li>行记录—&gt;对象</li>
</ul>
<p>比如people表：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>address</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>雷克萨</td>
<td>18</td>
<td>金星</td>
</tr>
<tr>
<td>2</td>
<td>巫妖王</td>
<td>100</td>
<td>木星</td>
</tr>
<tr>
<td>3</td>
<td>恶魔猎手</td>
<td>3</td>
<td>土星</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10、MVC架构"><a href="#10、MVC架构" class="headerlink" title="10、MVC架构"></a>10、MVC架构</h2><p>什么是MVC：Model View Controller 模型 、视图、控制器</p>
<h3 id="10-1、早期"><a href="#10-1、早期" class="headerlink" title="10.1、早期"></a>10.1、早期</h3><p><img src="/2021/02/25/javaweb2/image-20210225004208097.png" alt="image-20210225004208097"></p>
<p>用户可以直接访问控制层，控制层就可以直接操控数据库</p>
<p>servlet——&gt;CRUD——&gt;数据库</p>
<p>servlet代码中：要处理请求、响应，视图跳转、处理JDBC、处理业务代码、处理逻辑代码</p>
<p>弊端：程序十分臃肿，不利于维护</p>
<p>架构：没有什么是加一层解决不了的！</p>
<h3 id="10-2、MVC三层架构"><a href="#10-2、MVC三层架构" class="headerlink" title="10.2、MVC三层架构"></a>10.2、MVC三层架构</h3><p><img src="/2021/02/25/javaweb2/image-20210225010045881.png" alt="image-20210225010045881">Model</p>
<ul>
<li>业务处理：业务逻辑（Service）</li>
<li>数据持久层：CRUD（Dao）</li>
</ul>
<p>View</p>
<ul>
<li>展示数据</li>
<li>提供链接发起Servlet请求（a，form，img）</li>
</ul>
<p>Controller（Servlet）</p>
<ul>
<li>接收用户的请求（req：请求参数，Session信息……）</li>
<li>交给业务层处理对应的代码</li>
<li>控制视图跳转</li>
</ul>
<p>用户登录——&gt;接收用户请求——&gt;处理用户请求（获取用户登录的参数，username，password）——&gt;交给业务层处理业务（验证用户名和密码是否正确：事务）——&gt;Dao层查询——&gt;数据库</p>
<h2 id="11、Filter（重点）"><a href="#11、Filter（重点）" class="headerlink" title="11、Filter（重点）"></a>11、Filter（重点）</h2><p>Filter：过滤器，用来过滤网站的数据</p>
<ul>
<li>处理中文乱码</li>
<li>登录验证</li>
</ul>
<p><img src="/2021/02/25/javaweb2/image-20210225112115029.png" alt="image-20210225112115029"></p>
<p>Filter开发步骤：</p>
<ol>
<li>导包</li>
<li>编写过滤器<ol>
<li>导包不要错</li>
</ol>
</li>
</ol>
<p><img src="/2021/02/25/javaweb2/image-20210225112552606.png" alt="image-20210225112552606"></p>
<p>​        2. 实现Filter接口，重写对应方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//web服务器启动就会初始化，随时等待过滤对象出现</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;初始化&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 过滤中的所有代码，在过滤特定请求时都会执行</span></span><br><span class="line"><span class="comment">2. 必须要让过滤器继续执行：chain.doFilter(request,response);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    servletResponse.setContentType(<span class="string">&quot;text/html;charse=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;过滤器执行前&quot;</span>);</span><br><span class="line">    filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    System.out.println(<span class="string">&quot;过滤器执行后&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//服务器关闭的时候，过滤自动销毁</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;销毁&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        3. 在web.xml中配置Filter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--只要是/servlet的任何请求，都会经过这个过滤器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="12、监听器"><a href="#12、监听器" class="headerlink" title="12、监听器"></a>12、监听器</h2><p>实现一个监听器的接口（有N种）</p>
<ol>
<li><p>编写一个监听器的接口</p>
<p>实现监听器的接口</p>
</li>
</ol>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Session监听，一旦创建Session就会触发一次这个事件</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public <span class="keyword">void</span> sessionCreated(HttpSessionEvent se) &#123;</span><br><span class="line">    ServletContext ctx = se.getSession().getServletContext();</span><br><span class="line">    Integer <span class="built_in">num</span> = (Integer) ctx.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">num</span> == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="built_in">num</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">num</span> += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,<span class="built_in">num</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁Session监听，一旦销毁Session就会触发一次这个事件</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public <span class="keyword">void</span> sessionDestroyed(HttpSessionEvent se) &#123;</span><br><span class="line">    ServletContext ctx = se.getSession().getServletContext();</span><br><span class="line">    Integer <span class="built_in">num</span> = (Integer) ctx.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">num</span> == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="built_in">num</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">num</span> -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,<span class="built_in">num</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Session销毁：</span></span><br><span class="line"><span class="comment">手动销毁 getSession().invalidate();</span></span><br><span class="line"><span class="comment">自动销毁：</span></span><br><span class="line"><span class="comment">    &lt;session-config&gt;</span></span><br><span class="line"><span class="comment">        &lt;!--1分钟后Session自动失效--&gt;</span></span><br><span class="line"><span class="comment">        &lt;session-timeout&gt;1&lt;/session-timeout&gt;</span></span><br><span class="line"><span class="comment">    &lt;/session-config&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>web.xml中注册监听器</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>listener.OnlineCountListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>看情况使用</li>
</ol>
<h2 id="13、过滤器、监听器常见应用"><a href="#13、过滤器、监听器常见应用" class="headerlink" title="13、过滤器、监听器常见应用"></a>13、过滤器、监听器常见应用</h2><p>监听器：GUI编程中经常使用</p>
<p>demo：用户登录后才能进入主页，用户注销后不能。</p>
<ol>
<li>用户登入以后，向Session中放入用户的数据</li>
<li>进入主页的时候，要判断用户是否已经登入，要求在过滤器中实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpServletRequest request = (HttpServletRequest)  req;</span><br><span class="line">HttpServletResponse response = (HttpServletResponse)  resp;</span><br><span class="line"><span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;USER_SESSION&quot;</span>) == <span class="keyword">null</span>)&#123;</span><br><span class="line">    response.sendRedirect(<span class="string">&quot;/error.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">chain.doFilter(req,resp);</span><br></pre></td></tr></table></figure>
<h2 id="14、JDBC"><a href="#14、JDBC" class="headerlink" title="14、JDBC"></a>14、JDBC</h2><p>什么是JDBC：java连接数据库（java database connectivity）</p>
<p><img src="/2021/02/25/javaweb2/image-20210225181205142.png" alt="image-20210225181205142"></p>
<p>需要jar包的支持：</p>
<ul>
<li>java.sql</li>
<li>Javax.sql</li>
<li>mysql-connector-java连接驱动（必须要导入）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql驱动依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>JDBC六大步骤：</p>
<ol>
<li>加载驱动</li>
<li>获取连接</li>
<li>获得执行命令</li>
<li>执行</li>
<li>结果处理</li>
<li>释放资源(关闭资源)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLASSDRIVER=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME=<span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD=<span class="string">&quot;qingyang1234&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//1、加载驱动</span></span><br><span class="line">    Class.forName(CLASSDRIVER);</span><br><span class="line">    <span class="comment">//2、获取连接</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(URL,USERNAME,PASSWORD);</span><br><span class="line">    <span class="comment">//3、获得执行命令，预编译使用prepareStatement</span></span><br><span class="line">    Statement stat = conn.createStatement();</span><br><span class="line">    <span class="comment">//4、执行</span></span><br><span class="line">    String sql = <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">    <span class="comment">//5、结果处理</span></span><br><span class="line">    <span class="comment">//增删改使用executeUpdate(),返回影响的行数</span></span><br><span class="line">    ResultSet rs = stat.executeQuery(sql);</span><br><span class="line">    <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">        System.out.println(rs.getString(<span class="string">&quot;ename&quot;</span>)+<span class="string">&quot;\t&quot;</span>+rs.getString(<span class="string">&quot;sal&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6、关闭连接</span></span><br><span class="line">    rs.close();</span><br><span class="line">    stat.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事务</p>
<p>一句话：要么都成功，要么都失败</p>
<p>ACID原则，保证数据的安全</p>
<ol>
<li>开启事务</li>
<li>事务提交 commit()</li>
<li>事务回滚 rollback()</li>
<li>关闭事务</li>
</ol>
<p><strong>Junit单元测试</strong></p>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>简单使用</p>
<p>@Test注解只有在方法上有效，只要加了注解，就可以直接运行</p>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>javaweb基本概念</tag>
        <tag>Tomcat服务器</tag>
        <tag>Maven搭建</tag>
        <tag>Cookie、Session</tag>
        <tag>Jsp讲解</tag>
        <tag>MVC架构</tag>
        <tag>过滤器、监听器</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>smbms</title>
    <url>/2021/04/01/smbms/</url>
    <content><![CDATA[<h1 id="超市订单管理系统SMBMS"><a href="#超市订单管理系统SMBMS" class="headerlink" title="超市订单管理系统SMBMS"></a>超市订单管理系统SMBMS</h1><p>javaweb实战项目学习笔记，参考视频：<a href="https://www.bilibili.com/video/BV12J411M7Sj?p=1">狂神说Java</a></p>
<h2 id="1、基本架构"><a href="#1、基本架构" class="headerlink" title="1、基本架构"></a>1、基本架构</h2><p><img src="/2021/04/01/smbms/image-20210226000203056-1617245792889.png" alt="image-20210226000203056"></p>
<a id="more"></a>

<h2 id="2、数据库"><a href="#2、数据库" class="headerlink" title="2、数据库"></a>2、数据库</h2><p>数据库代码如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `smbms`;</span><br><span class="line"></span><br><span class="line">USE `smbms`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `smbms_address`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `smbms_address` (</span><br><span class="line">  `id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `contact` <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系人姓名&#x27;</span>,</span><br><span class="line">  `addressDesc` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;收货地址明细&#x27;</span>,</span><br><span class="line">  `postCode` <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮编&#x27;</span>,</span><br><span class="line">  `tel` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系人电话&#x27;</span>,</span><br><span class="line">  `createdBy` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建者&#x27;</span>,</span><br><span class="line">  `creationDate` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `modifyBy` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改者&#x27;</span>,</span><br><span class="line">  `modifyDate` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `userId` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">7</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_unicode_ci;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `smbms_address`(`id`,`contact`,`addressDesc`,`postCode`,`tel`,`createdBy`,`creationDate`,`modifyBy`,`modifyDate`,`userId`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;王丽&#x27;</span>,<span class="string">&#x27;北京市东城区东交民巷44号&#x27;</span>,<span class="string">&#x27;100010&#x27;</span>,<span class="string">&#x27;13678789999&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-13 00:00:00&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">1</span>),(<span class="number">2</span>,<span class="string">&#x27;张红丽&#x27;</span>,<span class="string">&#x27;北京市海淀区丹棱街3号&#x27;</span>,<span class="string">&#x27;100000&#x27;</span>,<span class="string">&#x27;18567672312&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-13 00:00:00&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">1</span>),(<span class="number">3</span>,<span class="string">&#x27;任志强&#x27;</span>,<span class="string">&#x27;北京市东城区美术馆后街23号&#x27;</span>,<span class="string">&#x27;100021&#x27;</span>,<span class="string">&#x27;13387906742&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-13 00:00:00&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">1</span>),(<span class="number">4</span>,<span class="string">&#x27;曹颖&#x27;</span>,<span class="string">&#x27;北京市朝阳区朝阳门南大街14号&#x27;</span>,<span class="string">&#x27;100053&#x27;</span>,<span class="string">&#x27;13568902323&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-13 00:00:00&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">2</span>),(<span class="number">5</span>,<span class="string">&#x27;李慧&#x27;</span>,<span class="string">&#x27;北京市西城区三里河路南三巷3号&#x27;</span>,<span class="string">&#x27;100032&#x27;</span>,<span class="string">&#x27;18032356666&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-13 00:00:00&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">3</span>),(<span class="number">6</span>,<span class="string">&#x27;王国强&#x27;</span>,<span class="string">&#x27;北京市顺义区高丽营镇金马工业区18号&#x27;</span>,<span class="string">&#x27;100061&#x27;</span>,<span class="string">&#x27;13787882222&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-13 00:00:00&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `smbms_bill`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `smbms_bill` (</span><br><span class="line">  `id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `billCode` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;账单编码&#x27;</span>,</span><br><span class="line">  `productName` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">  `productDesc` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品描述&#x27;</span>,</span><br><span class="line">  `productUnit` <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品单位&#x27;</span>,</span><br><span class="line">  `productCount` <span class="type">DECIMAL</span>(<span class="number">20</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品数量&#x27;</span>,</span><br><span class="line">  `totalPrice` <span class="type">DECIMAL</span>(<span class="number">20</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品总额&#x27;</span>,</span><br><span class="line">  `isPayment` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否支付（1：未支付 2：已支付）&#x27;</span>,</span><br><span class="line">  `createdBy` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建者（userId）&#x27;</span>,</span><br><span class="line">  `creationDate` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `modifyBy` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新者（userId）&#x27;</span>,</span><br><span class="line">  `modifyDate` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  `providerId` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;供应商ID&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">19</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_unicode_ci;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `smbms_bill`(`id`,`billCode`,`productName`,`productDesc`,`productUnit`,`productCount`,`totalPrice`,`isPayment`,`createdBy`,`creationDate`,`modifyBy`,`modifyDate`,`providerId`) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;BILL2016_002&#x27;</span>,<span class="string">&#x27;香皂、肥皂、药皂&#x27;</span>,<span class="string">&#x27;日用品-皂类&#x27;</span>,<span class="string">&#x27;块&#x27;</span>,<span class="string">&#x27;1000.00&#x27;</span>,<span class="string">&#x27;10000.00&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2016-03-23 04:20:40&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">13</span>),(<span class="number">3</span>,<span class="string">&#x27;BILL2016_003&#x27;</span>,<span class="string">&#x27;大豆油&#x27;</span>,<span class="string">&#x27;食品-食用油&#x27;</span>,<span class="string">&#x27;斤&#x27;</span>,<span class="string">&#x27;300.00&#x27;</span>,<span class="string">&#x27;5890.00&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2014-12-14 13:02:03&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">6</span>),(<span class="number">4</span>,<span class="string">&#x27;BILL2016_004&#x27;</span>,<span class="string">&#x27;橄榄油&#x27;</span>,<span class="string">&#x27;食品-进口食用油&#x27;</span>,<span class="string">&#x27;斤&#x27;</span>,<span class="string">&#x27;200.00&#x27;</span>,<span class="string">&#x27;9800.00&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2013-10-10 03:12:13&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">7</span>),(<span class="number">5</span>,<span class="string">&#x27;BILL2016_005&#x27;</span>,<span class="string">&#x27;洗洁精&#x27;</span>,<span class="string">&#x27;日用品-厨房清洁&#x27;</span>,<span class="string">&#x27;瓶&#x27;</span>,<span class="string">&#x27;500.00&#x27;</span>,<span class="string">&#x27;7000.00&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2014-12-14 13:02:03&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">9</span>),(<span class="number">6</span>,<span class="string">&#x27;BILL2016_006&#x27;</span>,<span class="string">&#x27;美国大杏仁&#x27;</span>,<span class="string">&#x27;食品-坚果&#x27;</span>,<span class="string">&#x27;袋&#x27;</span>,<span class="string">&#x27;300.00&#x27;</span>,<span class="string">&#x27;5000.00&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-14 06:08:09&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">4</span>),(<span class="number">7</span>,<span class="string">&#x27;BILL2016_007&#x27;</span>,<span class="string">&#x27;沐浴液、精油&#x27;</span>,<span class="string">&#x27;日用品-沐浴类&#x27;</span>,<span class="string">&#x27;瓶&#x27;</span>,<span class="string">&#x27;500.00&#x27;</span>,<span class="string">&#x27;23000.00&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;2016-07-22 10:10:22&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">14</span>),(<span class="number">8</span>,<span class="string">&#x27;BILL2016_008&#x27;</span>,<span class="string">&#x27;不锈钢盘碗&#x27;</span>,<span class="string">&#x27;日用品-厨房用具&#x27;</span>,<span class="string">&#x27;个&#x27;</span>,<span class="string">&#x27;600.00&#x27;</span>,<span class="string">&#x27;6000.00&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-14 05:12:13&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">14</span>),(<span class="number">9</span>,<span class="string">&#x27;BILL2016_009&#x27;</span>,<span class="string">&#x27;塑料杯&#x27;</span>,<span class="string">&#x27;日用品-杯子&#x27;</span>,<span class="string">&#x27;个&#x27;</span>,<span class="string">&#x27;350.00&#x27;</span>,<span class="string">&#x27;1750.00&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2016-02-04 11:40:20&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">14</span>),(<span class="number">10</span>,<span class="string">&#x27;BILL2016_010&#x27;</span>,<span class="string">&#x27;豆瓣酱&#x27;</span>,<span class="string">&#x27;食品-调料&#x27;</span>,<span class="string">&#x27;瓶&#x27;</span>,<span class="string">&#x27;200.00&#x27;</span>,<span class="string">&#x27;2000.00&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2013-10-29 05:07:03&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">8</span>),(<span class="number">11</span>,<span class="string">&#x27;BILL2016_011&#x27;</span>,<span class="string">&#x27;海之蓝&#x27;</span>,<span class="string">&#x27;饮料-国酒&#x27;</span>,<span class="string">&#x27;瓶&#x27;</span>,<span class="string">&#x27;50.00&#x27;</span>,<span class="string">&#x27;10000.00&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-14 16:16:00&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">1</span>),(<span class="number">12</span>,<span class="string">&#x27;BILL2016_012&#x27;</span>,<span class="string">&#x27;芝华士&#x27;</span>,<span class="string">&#x27;饮料-洋酒&#x27;</span>,<span class="string">&#x27;瓶&#x27;</span>,<span class="string">&#x27;20.00&#x27;</span>,<span class="string">&#x27;6000.00&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;2016-09-09 17:00:00&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">1</span>),(<span class="number">13</span>,<span class="string">&#x27;BILL2016_013&#x27;</span>,<span class="string">&#x27;长城红葡萄酒&#x27;</span>,<span class="string">&#x27;饮料-红酒&#x27;</span>,<span class="string">&#x27;瓶&#x27;</span>,<span class="string">&#x27;60.00&#x27;</span>,<span class="string">&#x27;800.00&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2016-11-14 15:23:00&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">1</span>),(<span class="number">14</span>,<span class="string">&#x27;BILL2016_014&#x27;</span>,<span class="string">&#x27;泰国香米&#x27;</span>,<span class="string">&#x27;食品-大米&#x27;</span>,<span class="string">&#x27;斤&#x27;</span>,<span class="string">&#x27;400.00&#x27;</span>,<span class="string">&#x27;5000.00&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2016-10-09 15:20:00&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">3</span>),(<span class="number">15</span>,<span class="string">&#x27;BILL2016_015&#x27;</span>,<span class="string">&#x27;东北大米&#x27;</span>,<span class="string">&#x27;食品-大米&#x27;</span>,<span class="string">&#x27;斤&#x27;</span>,<span class="string">&#x27;600.00&#x27;</span>,<span class="string">&#x27;4000.00&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2016-11-14 14:00:00&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">3</span>),(<span class="number">16</span>,<span class="string">&#x27;BILL2016_016&#x27;</span>,<span class="string">&#x27;可口可乐&#x27;</span>,<span class="string">&#x27;饮料&#x27;</span>,<span class="string">&#x27;瓶&#x27;</span>,<span class="string">&#x27;2000.00&#x27;</span>,<span class="string">&#x27;6000.00&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2012-03-27 13:03:01&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">2</span>),(<span class="number">17</span>,<span class="string">&#x27;BILL2016_017&#x27;</span>,<span class="string">&#x27;脉动&#x27;</span>,<span class="string">&#x27;饮料&#x27;</span>,<span class="string">&#x27;瓶&#x27;</span>,<span class="string">&#x27;1500.00&#x27;</span>,<span class="string">&#x27;4500.00&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2016-05-10 12:00:00&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">2</span>),(<span class="number">18</span>,<span class="string">&#x27;BILL2016_018&#x27;</span>,<span class="string">&#x27;哇哈哈&#x27;</span>,<span class="string">&#x27;饮料&#x27;</span>,<span class="string">&#x27;瓶&#x27;</span>,<span class="string">&#x27;2000.00&#x27;</span>,<span class="string">&#x27;4000.00&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2015-11-24 15:12:03&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `smbms_provider`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `smbms_provider` (</span><br><span class="line">  `id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `proCode` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;供应商编码&#x27;</span>,</span><br><span class="line">  `proName` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;供应商名称&#x27;</span>,</span><br><span class="line">  `proDesc` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;供应商详细描述&#x27;</span>,</span><br><span class="line">  `proContact` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;供应商联系人&#x27;</span>,</span><br><span class="line">  `proPhone` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;联系电话&#x27;</span>,</span><br><span class="line">  `proAddress` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">  `proFax` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;传真&#x27;</span>,</span><br><span class="line">  `createdBy` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建者（userId）&#x27;</span>,</span><br><span class="line">  `creationDate` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `modifyDate` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  `modifyBy` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新者（userId）&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">16</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_unicode_ci;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `smbms_provider`(`id`,`proCode`,`proName`,`proDesc`,`proContact`,`proPhone`,`proAddress`,`proFax`,`createdBy`,`creationDate`,`modifyDate`,`modifyBy`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;BJ_GYS001&#x27;</span>,<span class="string">&#x27;北京三木堂商贸有限公司&#x27;</span>,<span class="string">&#x27;长期合作伙伴，主营产品:茅台、五粮液、郎酒、酒鬼酒、泸州老窖、赖茅酒、法国红酒等&#x27;</span>,<span class="string">&#x27;张国强&#x27;</span>,<span class="string">&#x27;13566667777&#x27;</span>,<span class="string">&#x27;北京市丰台区育芳园北路&#x27;</span>,<span class="string">&#x27;010-58858787&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2013-03-21 16:52:07&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">2</span>,<span class="string">&#x27;HB_GYS001&#x27;</span>,<span class="string">&#x27;石家庄帅益食品贸易有限公司&#x27;</span>,<span class="string">&#x27;长期合作伙伴，主营产品:饮料、水饮料、植物蛋白饮料、休闲食品、果汁饮料、功能饮料等&#x27;</span>,<span class="string">&#x27;王军&#x27;</span>,<span class="string">&#x27;13309094212&#x27;</span>,<span class="string">&#x27;河北省石家庄新华区&#x27;</span>,<span class="string">&#x27;0311-67738876&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-13 04:20:40&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">3</span>,<span class="string">&#x27;GZ_GYS001&#x27;</span>,<span class="string">&#x27;深圳市泰香米业有限公司&#x27;</span>,<span class="string">&#x27;初次合作伙伴，主营产品：良记金轮米,龙轮香米等&#x27;</span>,<span class="string">&#x27;郑程瀚&#x27;</span>,<span class="string">&#x27;13402013312&#x27;</span>,<span class="string">&#x27;广东省深圳市福田区深南大道6006华丰大厦&#x27;</span>,<span class="string">&#x27;0755-67776212&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2014-03-21 16:56:07&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">4</span>,<span class="string">&#x27;GZ_GYS002&#x27;</span>,<span class="string">&#x27;深圳市喜来客商贸有限公司&#x27;</span>,<span class="string">&#x27;长期合作伙伴，主营产品：坚果炒货.果脯蜜饯.天然花茶.营养豆豆.特色美食.进口食品.海味零食.肉脯肉&#x27;</span>,<span class="string">&#x27;林妮&#x27;</span>,<span class="string">&#x27;18599897645&#x27;</span>,<span class="string">&#x27;广东省深圳市福龙工业区B2栋3楼西&#x27;</span>,<span class="string">&#x27;0755-67772341&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2013-03-22 16:52:07&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">5</span>,<span class="string">&#x27;JS_GYS001&#x27;</span>,<span class="string">&#x27;兴化佳美调味品厂&#x27;</span>,<span class="string">&#x27;长期合作伙伴，主营产品：天然香辛料、鸡精、复合调味料&#x27;</span>,<span class="string">&#x27;徐国洋&#x27;</span>,<span class="string">&#x27;13754444221&#x27;</span>,<span class="string">&#x27;江苏省兴化市林湖工业区&#x27;</span>,<span class="string">&#x27;0523-21299098&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2015-11-22 16:52:07&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">6</span>,<span class="string">&#x27;BJ_GYS002&#x27;</span>,<span class="string">&#x27;北京纳福尔食用油有限公司&#x27;</span>,<span class="string">&#x27;长期合作伙伴，主营产品：山茶油、大豆油、花生油、橄榄油等&#x27;</span>,<span class="string">&#x27;马莺&#x27;</span>,<span class="string">&#x27;13422235678&#x27;</span>,<span class="string">&#x27;北京市朝阳区珠江帝景1号楼&#x27;</span>,<span class="string">&#x27;010-588634233&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2012-03-21 17:52:07&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">7</span>,<span class="string">&#x27;BJ_GYS003&#x27;</span>,<span class="string">&#x27;北京国粮食用油有限公司&#x27;</span>,<span class="string">&#x27;初次合作伙伴，主营产品：花生油、大豆油、小磨油等&#x27;</span>,<span class="string">&#x27;王驰&#x27;</span>,<span class="string">&#x27;13344441135&#x27;</span>,<span class="string">&#x27;北京大兴青云店开发区&#x27;</span>,<span class="string">&#x27;010-588134111&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-13 00:00:00&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">8</span>,<span class="string">&#x27;ZJ_GYS001&#x27;</span>,<span class="string">&#x27;慈溪市广和绿色食品厂&#x27;</span>,<span class="string">&#x27;长期合作伙伴，主营产品：豆瓣酱、黄豆酱、甜面酱，辣椒，大蒜等农产品&#x27;</span>,<span class="string">&#x27;薛圣丹&#x27;</span>,<span class="string">&#x27;18099953223&#x27;</span>,<span class="string">&#x27;浙江省宁波市慈溪周巷小安村&#x27;</span>,<span class="string">&#x27;0574-34449090&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2013-11-21 06:02:07&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">9</span>,<span class="string">&#x27;GX_GYS001&#x27;</span>,<span class="string">&#x27;优百商贸有限公司&#x27;</span>,<span class="string">&#x27;长期合作伙伴，主营产品：日化产品&#x27;</span>,<span class="string">&#x27;李立国&#x27;</span>,<span class="string">&#x27;13323566543&#x27;</span>,<span class="string">&#x27;广西南宁市秀厢大道42-1号&#x27;</span>,<span class="string">&#x27;0771-98861134&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2013-03-21 19:52:07&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">10</span>,<span class="string">&#x27;JS_GYS002&#x27;</span>,<span class="string">&#x27;南京火头军信息技术有限公司&#x27;</span>,<span class="string">&#x27;长期合作伙伴，主营产品：不锈钢厨具等&#x27;</span>,<span class="string">&#x27;陈女士&#x27;</span>,<span class="string">&#x27;13098992113&#x27;</span>,<span class="string">&#x27;江苏省南京市浦口区浦口大道1号新城总部大厦A座903室&#x27;</span>,<span class="string">&#x27;025-86223345&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2013-03-25 16:52:07&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">11</span>,<span class="string">&#x27;GZ_GYS003&#x27;</span>,<span class="string">&#x27;广州市白云区美星五金制品厂&#x27;</span>,<span class="string">&#x27;长期合作伙伴，主营产品：海绵床垫、坐垫、靠垫、海绵枕头、头枕等&#x27;</span>,<span class="string">&#x27;梁天&#x27;</span>,<span class="string">&#x27;13562276775&#x27;</span>,<span class="string">&#x27;广州市白云区钟落潭镇福龙路20号&#x27;</span>,<span class="string">&#x27;020-85542231&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2016-12-21 06:12:17&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">12</span>,<span class="string">&#x27;BJ_GYS004&#x27;</span>,<span class="string">&#x27;北京隆盛日化科技&#x27;</span>,<span class="string">&#x27;长期合作伙伴，主营产品：日化环保清洗剂，家居洗涤专卖、洗涤用品网、墙体除霉剂、墙面霉菌清除剂等&#x27;</span>,<span class="string">&#x27;孙欣&#x27;</span>,<span class="string">&#x27;13689865678&#x27;</span>,<span class="string">&#x27;北京市大兴区旧宫&#x27;</span>,<span class="string">&#x27;010-35576786&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2014-11-21 12:51:11&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">13</span>,<span class="string">&#x27;SD_GYS001&#x27;</span>,<span class="string">&#x27;山东豪克华光联合发展有限公司&#x27;</span>,<span class="string">&#x27;长期合作伙伴，主营产品：洗衣皂、洗衣粉、洗衣液、洗洁精、消杀类、香皂等&#x27;</span>,<span class="string">&#x27;吴洪转&#x27;</span>,<span class="string">&#x27;13245468787&#x27;</span>,<span class="string">&#x27;山东济阳济北工业区仁和街21号&#x27;</span>,<span class="string">&#x27;0531-53362445&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2015-01-28 10:52:07&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">14</span>,<span class="string">&#x27;JS_GYS003&#x27;</span>,<span class="string">&#x27;无锡喜源坤商行&#x27;</span>,<span class="string">&#x27;长期合作伙伴，主营产品：日化品批销&#x27;</span>,<span class="string">&#x27;周一清&#x27;</span>,<span class="string">&#x27;18567674532&#x27;</span>,<span class="string">&#x27;江苏无锡盛岸西路&#x27;</span>,<span class="string">&#x27;0510-32274422&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-23 11:11:11&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">15</span>,<span class="string">&#x27;ZJ_GYS002&#x27;</span>,<span class="string">&#x27;乐摆日用品厂&#x27;</span>,<span class="string">&#x27;长期合作伙伴，主营产品：各种中、高档塑料杯，塑料乐扣水杯（密封杯）、保鲜杯（保鲜盒）、广告杯、礼品杯&#x27;</span>,<span class="string">&#x27;王世杰&#x27;</span>,<span class="string">&#x27;13212331567&#x27;</span>,<span class="string">&#x27;浙江省金华市义乌市义东路&#x27;</span>,<span class="string">&#x27;0579-34452321&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2016-08-22 10:01:30&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `smbms_role`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `smbms_role` (</span><br><span class="line">  `id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `roleCode` <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色编码&#x27;</span>,</span><br><span class="line">  `roleName` <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色名称&#x27;</span>,</span><br><span class="line">  `createdBy` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建者&#x27;</span>,</span><br><span class="line">  `creationDate` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `modifyBy` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改者&#x27;</span>,</span><br><span class="line">  `modifyDate` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_unicode_ci;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `smbms_role`(`id`,`roleCode`,`roleName`,`createdBy`,`creationDate`,`modifyBy`,`modifyDate`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;SMBMS_ADMIN&#x27;</span>,<span class="string">&#x27;系统管理员&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-13 00:00:00&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">2</span>,<span class="string">&#x27;SMBMS_MANAGER&#x27;</span>,<span class="string">&#x27;经理&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-13 00:00:00&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">3</span>,<span class="string">&#x27;SMBMS_EMPLOYEE&#x27;</span>,<span class="string">&#x27;普通员工&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-13 00:00:00&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `smbms_user`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `smbms_user` (</span><br><span class="line">  `id` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `userCode` <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户编码&#x27;</span>,</span><br><span class="line">  `userName` <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名称&#x27;</span>,</span><br><span class="line">  `userPassword` <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户密码&#x27;</span>,</span><br><span class="line">  `gender` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别（1:女、 2:男）&#x27;</span>,</span><br><span class="line">  `birthday` <span class="type">DATE</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">  `phone` <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机&#x27;</span>,</span><br><span class="line">  `address` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">  `userRole` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户角色（取自角色表-角色id）&#x27;</span>,</span><br><span class="line">  `createdBy` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建者（userId）&#x27;</span>,</span><br><span class="line">  `creationDate` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `modifyBy` <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新者（userId）&#x27;</span>,</span><br><span class="line">  `modifyDate` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">16</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_unicode_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `smbms_user`(`id`,`userCode`,`userName`,`userPassword`,`gender`,`birthday`,`phone`,`address`,`userRole`,`createdBy`,`creationDate`,`modifyBy`,`modifyDate`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;系统管理员&#x27;</span>,<span class="string">&#x27;1234567&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1983-10-10&#x27;</span>,<span class="string">&#x27;13688889999&#x27;</span>,<span class="string">&#x27;北京市海淀区成府路207号&#x27;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;2013-03-21 16:52:07&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">2</span>,<span class="string">&#x27;liming&#x27;</span>,<span class="string">&#x27;李明&#x27;</span>,<span class="string">&#x27;0000000&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;1983-12-10&#x27;</span>,<span class="string">&#x27;13688884457&#x27;</span>,<span class="string">&#x27;北京市东城区前门东大街9号&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2014-12-31 19:52:09&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">5</span>,<span class="string">&#x27;hanlubiao&#x27;</span>,<span class="string">&#x27;韩路彪&#x27;</span>,<span class="string">&#x27;0000000&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;1984-06-05&#x27;</span>,<span class="string">&#x27;18567542321&#x27;</span>,<span class="string">&#x27;北京市朝阳区北辰中心12号&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2014-12-31 19:52:09&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">6</span>,<span class="string">&#x27;zhanghua&#x27;</span>,<span class="string">&#x27;张华&#x27;</span>,<span class="string">&#x27;0000000&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1983-06-15&#x27;</span>,<span class="string">&#x27;13544561111&#x27;</span>,<span class="string">&#x27;北京市海淀区学院路61号&#x27;</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">&#x27;2013-02-11 10:51:17&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">7</span>,<span class="string">&#x27;wangyang&#x27;</span>,<span class="string">&#x27;王洋&#x27;</span>,<span class="string">&#x27;0000000&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;1982-12-31&#x27;</span>,<span class="string">&#x27;13444561124&#x27;</span>,<span class="string">&#x27;北京市海淀区西二旗辉煌国际16层&#x27;</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">&#x27;2014-06-11 19:09:07&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">8</span>,<span class="string">&#x27;zhaoyan&#x27;</span>,<span class="string">&#x27;赵燕&#x27;</span>,<span class="string">&#x27;0000000&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1986-03-07&#x27;</span>,<span class="string">&#x27;18098764545&#x27;</span>,<span class="string">&#x27;北京市海淀区回龙观小区10号楼&#x27;</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-21 13:54:07&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">10</span>,<span class="string">&#x27;sunlei&#x27;</span>,<span class="string">&#x27;孙磊&#x27;</span>,<span class="string">&#x27;0000000&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;1981-01-04&#x27;</span>,<span class="string">&#x27;13387676765&#x27;</span>,<span class="string">&#x27;北京市朝阳区管庄新月小区12楼&#x27;</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">&#x27;2015-05-06 10:52:07&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">11</span>,<span class="string">&#x27;sunxing&#x27;</span>,<span class="string">&#x27;孙兴&#x27;</span>,<span class="string">&#x27;0000000&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;1978-03-12&#x27;</span>,<span class="string">&#x27;13367890900&#x27;</span>,<span class="string">&#x27;北京市朝阳区建国门南大街10号&#x27;</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">&#x27;2016-11-09 16:51:17&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">12</span>,<span class="string">&#x27;zhangchen&#x27;</span>,<span class="string">&#x27;张晨&#x27;</span>,<span class="string">&#x27;0000000&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1986-03-28&#x27;</span>,<span class="string">&#x27;18098765434&#x27;</span>,<span class="string">&#x27;朝阳区管庄路口北柏林爱乐三期13号楼&#x27;</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">&#x27;2016-08-09 05:52:37&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;2016-04-14 14:15:36&#x27;</span>),(<span class="number">13</span>,<span class="string">&#x27;dengchao&#x27;</span>,<span class="string">&#x27;邓超&#x27;</span>,<span class="string">&#x27;0000000&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;1981-11-04&#x27;</span>,<span class="string">&#x27;13689674534&#x27;</span>,<span class="string">&#x27;北京市海淀区北航家属院10号楼&#x27;</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">&#x27;2016-07-11 08:02:47&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">14</span>,<span class="string">&#x27;yangguo&#x27;</span>,<span class="string">&#x27;杨过&#x27;</span>,<span class="string">&#x27;0000000&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;1980-01-01&#x27;</span>,<span class="string">&#x27;13388886623&#x27;</span>,<span class="string">&#x27;北京市朝阳区北苑家园茉莉园20号楼&#x27;</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">&#x27;2015-02-01 03:52:07&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>),(<span class="number">15</span>,<span class="string">&#x27;zhaomin&#x27;</span>,<span class="string">&#x27;赵敏&#x27;</span>,<span class="string">&#x27;0000000&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1987-12-04&#x27;</span>,<span class="string">&#x27;18099897657&#x27;</span>,<span class="string">&#x27;北京市昌平区天通苑3区12号楼&#x27;</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;2015-09-12 12:02:12&#x27;</span>,<span class="keyword">NULL</span>,<span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure>
<h2 id="3、项目搭建准备工作"><a href="#3、项目搭建准备工作" class="headerlink" title="3、项目搭建准备工作"></a>3、项目搭建准备工作</h2><p><strong>（1）搭建一个maven web项目</strong></p>
<p><strong>（2）配置Tomcat并测试运行</strong></p>
<p><strong>（3）导入项目中遇到的jar包</strong>：jsp、Servlet、mysql驱动、jstl、standard、junit…</p>
<p><strong>（4）创建包项目结构</strong></p>
<p><img src="/2021/04/01/smbms/image-20210226123311135-1617245792890.png" alt="image-20210226123311135"></p>
<p><strong>（5）编写实体类</strong>：ORM映射：表-类映射</p>
<p><strong>（6）编写基础公共类</strong></p>
<p>tips：项目建议从底层往上写</p>
<ol>
<li>数据库配置文件</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/smbms?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">333</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>编写数据库的公共类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.静态代码块，类加载时完成初始化</span></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="comment">//通过类加载器读取对应的资源</span></span><br><span class="line">    InputStream is = BaseDao.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        prop.load(is);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    driver = prop.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">    url = prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    username = prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    password = prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取数据库的连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编写查询公共类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title">execute</span><span class="params">(Connection conn,String sql,Object[] params,ResultSet rs,PreparedStatement ps)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ps = conn.prepareStatement(sql);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">        ps.setObject(i+<span class="number">1</span>,params[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    rs = ps.executeQuery();</span><br><span class="line">    <span class="keyword">return</span> rs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编写增删改公共方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">execute</span><span class="params">(Connection conn,String sql,Object[] params,PreparedStatement ps)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ps = conn.prepareStatement(sql);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">        ps.setObject(i+<span class="number">1</span>,params[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> updateRows = ps.executeUpdate();</span><br><span class="line">    <span class="keyword">return</span> updateRows;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">closeResource</span><span class="params">(Connection conn,PreparedStatement ps,ResultSet rs)</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">            <span class="comment">//GC回收</span></span><br><span class="line">            rs = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ps != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps.close();</span><br><span class="line">            <span class="comment">//GC回收</span></span><br><span class="line">            ps = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">            <span class="comment">//GC回收</span></span><br><span class="line">            conn = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>编写字符编码过滤器</li>
</ol>
<p>在filter中建立CharacterEncodingFilter类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>xml中注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--字符编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.zqy.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>（7）导入静态资源</strong>（私我索要）</p>
<h2 id="4、登录功能实现"><a href="#4、登录功能实现" class="headerlink" title="4、登录功能实现"></a>4、登录功能实现</h2><p><img src="/2021/04/01/smbms/image-20210226140150911-1617245792890.png" alt="image-20210226140150911"></p>
<ol>
<li>编写前端</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;系统登录 - 超市订单管理系统&lt;/title&gt;</span><br><span class="line">    &lt;link type=<span class="string">&quot;text/css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;$&#123;pageContext.request.contextPath &#125;/css/style.css&quot;</span> /&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;login_bg&quot;</span>&gt;</span><br><span class="line">&lt;section <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;loginBox&quot;</span>&gt;</span><br><span class="line">    &lt;header <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;loginHeader&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;超市订单管理系统&lt;/h1&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;section <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;loginCont&quot;</span>&gt;</span><br><span class="line">        &lt;form <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;loginForm&quot;</span> action=<span class="string">&quot;$&#123;pageContext.request.contextPath &#125;/login.do&quot;</span>  name=<span class="string">&quot;actionForm&quot;</span> id=<span class="string">&quot;actionForm&quot;</span>  method=<span class="string">&quot;post&quot;</span> &gt;</span><br><span class="line">            &lt;div class=&quot;info&quot;&gt;$&#123;error&#125;&lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;inputbox&quot;</span>&gt;</span><br><span class="line">                &lt;label&gt;用户名：&lt;/label&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;input-text&quot;</span> id=<span class="string">&quot;userCode&quot;</span> name=<span class="string">&quot;userCode&quot;</span> placeholder=<span class="string">&quot;请输入用户名&quot;</span> required/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;inputbox&quot;</span>&gt;</span><br><span class="line">                &lt;label&gt;密码：&lt;/label&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;password&quot;</span> id=<span class="string">&quot;userPassword&quot;</span> name=<span class="string">&quot;userPassword&quot;</span> placeholder=<span class="string">&quot;请输入密码&quot;</span> required/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;subBtn&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">                &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>/&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;reset&quot;</span> value=<span class="string">&quot;重置&quot;</span>/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>设置首页</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置欢迎界面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>编写dao层用户登录的接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//得到登录的用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getLoginUser</span><span class="params">(Connection conn,String UserCode,String userPassword)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>编写dao接口的实现类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getLoginUser</span><span class="params">(Connection conn, String UserCode,String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String sql = <span class="string">&quot;select * from smbms_user where userCode = ? and userPassword = ?&quot;</span>;</span><br><span class="line">            Object[] params = &#123;UserCode,password&#125;;</span><br><span class="line">            rs = BaseDao.execute(conn,pstm,rs,sql,params);</span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                user = <span class="keyword">new</span> User();</span><br><span class="line">                user.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                user.setUserCode(rs.getString(<span class="string">&quot;userCode&quot;</span>));</span><br><span class="line">                user.setUserName(rs.getString(<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">                user.setUserPassword(rs.getString(<span class="string">&quot;userPassword&quot;</span>));</span><br><span class="line">                user.setGender(rs.getInt(<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">                user.setBirthday(rs.getDate(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">                user.setPhone(rs.getString(<span class="string">&quot;phone&quot;</span>));</span><br><span class="line">                user.setAddress(rs.getString(<span class="string">&quot;address&quot;</span>));</span><br><span class="line">                user.setUserRole(rs.getInt(<span class="string">&quot;userRole&quot;</span>));</span><br><span class="line">                user.setCreatedBy(rs.getInt(<span class="string">&quot;createdBy&quot;</span>));</span><br><span class="line">                user.setCreationDate(rs.getTimestamp(<span class="string">&quot;creationDate&quot;</span>));</span><br><span class="line">                user.setModifyBy(rs.getInt(<span class="string">&quot;modifyBy&quot;</span>));</span><br><span class="line">                user.setModifyDate(rs.getTimestamp(<span class="string">&quot;modifyDate&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            BaseDao.closeResource(<span class="keyword">null</span>,pstm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>业务层接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用户登录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String userCode,String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>业务层实现类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="comment">//业务层都会调用dao层，所以我们要引入dao</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String userCode, String password)</span> </span>&#123;</span><br><span class="line">        Connection connection = BaseDao.getConn();</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//通过业务层调用对应的具体的数据库操作</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            user = userDao.getLoginUser(connection,userCode,password);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>编写Servlet</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//Servlet：控制层、调用业务层代码</span></span><br><span class="line">        <span class="comment">//获取用户名和密码</span></span><br><span class="line">        String userCode = req.getParameter(<span class="string">&quot;userCode&quot;</span>);</span><br><span class="line">        String pwd = req.getParameter(<span class="string">&quot;userPassword&quot;</span>);</span><br><span class="line">        <span class="comment">//和数据库中的密码进行对比，调用业务层</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        User user = userService.login(userCode, pwd);</span><br><span class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//将用户的信息放入Session中</span></span><br><span class="line">            req.getSession().setAttribute(Constants.USER_SESSION,user);</span><br><span class="line">            <span class="comment">//跳转到主页</span></span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;jsp/frame.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            req.setAttribute(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;用户名或密码不正确&quot;</span>);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>注册Servlet</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zqy.servlet.user.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="9">
<li>测试访问，确保以上功能成功</li>
</ol>
<h2 id="5、登录功能优化"><a href="#5、登录功能优化" class="headerlink" title="5、登录功能优化"></a>5、登录功能优化</h2><ol>
<li>注销功能：思路：移除Session，返回登录页面</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginOutServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zqy.servlet.user.LoginOutServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginOutServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/jsp/logout.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>登录拦截器优化</li>
</ol>
<p>编写一个过滤器并注册：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse resp = (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="comment">//过滤器，从Session中获取用户</span></span><br><span class="line">        User user = (User) req.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/smbms/error.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用户登录过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SysFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.zqy.filter.SysFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SysFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/jsp/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>测试：登录、注销、权限，都要正确</li>
</ol>
<h2 id="6、密码修改功能实现"><a href="#6、密码修改功能实现" class="headerlink" title="6、密码修改功能实现"></a>6、密码修改功能实现</h2><ol>
<li>导入前端素材</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href=&quot;../jsp/pwdmodify.jsp&quot;&gt;密码修改&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>UserDao接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改密码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updatePwd</span><span class="params">(Connection connection,String UserCode,String userPassword)</span> <span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>UserDao接口实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updatePwd</span><span class="params">(Connection connection, String UserCode, String userPassword)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> rowNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update smbms_user set userPassword = ? where userName&quot;</span>;</span><br><span class="line">        Object[] params = &#123;userPassword,UserCode&#125;;</span><br><span class="line">        rowNum = BaseDao.execute(connection, pstm, sql, params);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rowNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>UserService层</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据用户ID修改密码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePwd</span><span class="params">(<span class="keyword">int</span> id,String userPassword)</span></span>;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>UserService实现类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePwd</span><span class="params">(<span class="keyword">int</span> id, String userPassword)</span> </span>&#123;</span><br><span class="line">    Connection connection = BaseDao.getConn();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> rowNum = userDao.updatePwd(connection,id,userPassword);</span><br><span class="line">        <span class="keyword">if</span>(rowNum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>Servlet考虑实现复用，提取出方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>( method != <span class="keyword">null</span> &amp;&amp; method.equals(<span class="string">&quot;savepwd&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">this</span>.updatePwd(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePwd</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        <span class="comment">//从session里面拿ID</span></span><br><span class="line">        Object object = req.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line">        String newPwd = req.getParameter(<span class="string">&quot;newpassword&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(object != <span class="keyword">null</span> &amp;&amp; !StringUtils.isNullOrEmpty(newPwd))&#123;</span><br><span class="line">            UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">            <span class="keyword">boolean</span> flag = userService.updatePwd(((User) object).getId(), newPwd);</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                req.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;修改密码成功，请重新登录&quot;</span>);</span><br><span class="line">                <span class="comment">//密码修改成功，移除当前Session</span></span><br><span class="line">                req.getSession().removeAttribute(Constants.USER_SESSION);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                req.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;修改密码失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            req.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;新密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;pwdmodify.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>注册Servlet</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UserServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zqy.servlet.user.UserServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UserServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/jsp/user.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="8">
<li>测试</li>
</ol>
<h2 id="7、密码修改功能优化Ajax"><a href="#7、密码修改功能优化Ajax" class="headerlink" title="7、密码修改功能优化Ajax"></a>7、密码修改功能优化Ajax</h2><ol>
<li>阿里巴巴的fastjson</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.75<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>后台代码修改</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>( method != <span class="keyword">null</span> &amp;&amp; method.equals(<span class="string">&quot;savepwd&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">this</span>.updatePwd(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method!=<span class="keyword">null</span> &amp;&amp; method.equals(<span class="string">&quot;pwdmodify&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">this</span>.pwdModify(req, resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改密码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePwd</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        <span class="comment">//从session里面拿ID</span></span><br><span class="line">        Object object = req.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line">        String newPwd = req.getParameter(<span class="string">&quot;newpassword&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(object != <span class="keyword">null</span> &amp;&amp; !StringUtils.isNullOrEmpty(newPwd))&#123;</span><br><span class="line">            UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">            <span class="keyword">boolean</span> flag = userService.updatePwd(((User) object).getId(), newPwd);</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                req.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;修改密码成功，请重新登录&quot;</span>);</span><br><span class="line">                <span class="comment">//密码修改成功，移除当前Session</span></span><br><span class="line">                req.getSession().removeAttribute(Constants.USER_SESSION);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                req.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;修改密码失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            req.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;新密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;pwdmodify.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//验证旧密码，从Session中获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pwdModify</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        Object object = req.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line">        String oldPwd = req.getParameter(<span class="string">&quot;oldpassword&quot;</span>);</span><br><span class="line">        <span class="comment">//万能的Map : 结果集</span></span><br><span class="line">        HashMap&lt;String,String&gt; resultMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(object==<span class="keyword">null</span>)&#123;   <span class="comment">//Session失效、过期的处理</span></span><br><span class="line">            resultMap.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;sessionerror&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(StringUtils.isNullOrEmpty(oldPwd))&#123;    <span class="comment">//输入的密码为空</span></span><br><span class="line">            resultMap.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            String userPwd = ((User)object).getUserPassword();</span><br><span class="line">            <span class="keyword">if</span>(oldPwd.equals(userPwd))&#123;</span><br><span class="line">                resultMap.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                resultMap.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;false&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PrintWriter writer = resp.getWriter();</span><br><span class="line">            <span class="comment">//JSONArray阿里巴巴的JSON工具类，转换格式</span></span><br><span class="line">            writer.write(JSONArray.toJSONString(resultMap));</span><br><span class="line">            writer.flush();</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>测试</li>
</ol>
<h2 id="8、用户管理实现"><a href="#8、用户管理实现" class="headerlink" title="8、用户管理实现"></a>8、用户管理实现</h2><h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><ol>
<li>功能框架：</li>
</ol>
<p><img src="/2021/04/01/smbms/image-20210227001428035-1617245792890.png" alt="image-20210227001428035"></p>
<ol start="2">
<li>导入分页的工具类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageSupport</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当前页码，来自用户输入</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentPageNo;</span><br><span class="line">    <span class="comment">//总数量(表)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalCount;</span><br><span class="line">    <span class="comment">//页面容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//总页数-totalCount/pageSize(+1)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalPageCount = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentPageNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentPageNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentPageNo</span><span class="params">(<span class="keyword">int</span> currentPageNo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(currentPageNo &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.currentPageNo = currentPageNo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalCount</span><span class="params">(<span class="keyword">int</span> totalCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(totalCount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.totalCount = totalCount;</span><br><span class="line">            <span class="keyword">this</span>.setTotalPageCountByRs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.totalCount = totalCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTotalPageCountByRs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.totalCount % <span class="keyword">this</span>.pageSize == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.totalPageCount = <span class="keyword">this</span>.totalCount / <span class="keyword">this</span>.pageSize;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.totalCount % <span class="keyword">this</span>.pageSize &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.totalPageCount = <span class="keyword">this</span>.totalCount / <span class="keyword">this</span>.pageSize + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.totalPageCount = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pageSize &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPageCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalPageCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPageCount</span><span class="params">(<span class="keyword">int</span> totalPageCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.totalPageCount = totalPageCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>用户列表前端页面导入</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">   pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;/jsp/common/head.jsp&quot;</span>%&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;right&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;location&quot;</span>&gt;</span><br><span class="line">                &lt;strong&gt;你现在所在的位置是:&lt;/strong&gt;</span><br><span class="line">                &lt;span&gt;用户管理页面&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;search&quot;</span>&gt;</span><br><span class="line">                  &lt;form method=<span class="string">&quot;get&quot;</span> action=<span class="string">&quot;$&#123;pageContext.request.contextPath &#125;/jsp/user.do&quot;</span>&gt;</span><br><span class="line">               &lt;input name=<span class="string">&quot;method&quot;</span> value=<span class="string">&quot;query&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;input-text&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br><span class="line">                &lt;span&gt;用户名：&lt;/span&gt;</span><br><span class="line">                &lt;input name=<span class="string">&quot;queryname&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;input-text&quot;</span>    type=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;$&#123;queryUserName &#125;&quot;</span>&gt;</span><br><span class="line">                </span><br><span class="line">                &lt;span&gt;用户角色：&lt;/span&gt;</span><br><span class="line">                &lt;select name=<span class="string">&quot;queryUserRole&quot;</span>&gt;</span><br><span class="line">                  &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;roleList != null &#125;&quot;</span>&gt;</span><br><span class="line">                     &lt;option value=&quot;0&quot;&gt;--请选择--&lt;/option&gt;</span><br><span class="line">                     &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;role&quot;</span> items=<span class="string">&quot;$&#123;roleList&#125;&quot;</span>&gt;</span><br><span class="line">                            &lt;option &lt;c:if test=&quot;$&#123;role.id == queryUserRole &#125;&quot;&gt;selected=&quot;selected&quot;&lt;/c:if&gt;</span><br><span class="line">                            value=&quot;$&#123;role.id&#125;&quot;&gt;$&#123;role.roleName&#125;&lt;/option&gt;</span><br><span class="line">                     &lt;/c:forEach&gt;</span><br><span class="line">                  &lt;/c:if&gt;</span><br><span class="line">                 &lt;/select&gt;</span><br><span class="line">                </span><br><span class="line">                &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;pageIndex&quot;</span> value=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">                &lt;input    value=<span class="string">&quot;查 询&quot;</span> type=<span class="string">&quot;submit&quot;</span> id=<span class="string">&quot;searchbutton&quot;</span>&gt;</span><br><span class="line">                &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/jsp/useradd.jsp&quot; &gt;添加用户&lt;/a&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;!--用户--&gt;</span><br><span class="line">            &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;providerTable&quot;</span> cellpadding=<span class="string">&quot;0&quot;</span> cellspacing=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">                &lt;tr <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;firstTr&quot;</span>&gt;</span><br><span class="line">                    &lt;th width=&quot;10%&quot;&gt;用户编码&lt;/th&gt;</span><br><span class="line">                    &lt;th width=&quot;20%&quot;&gt;用户名称&lt;/th&gt;</span><br><span class="line">                    &lt;th width=&quot;10%&quot;&gt;性别&lt;/th&gt;</span><br><span class="line">                    &lt;th width=&quot;10%&quot;&gt;年龄&lt;/th&gt;</span><br><span class="line">                    &lt;th width=&quot;10%&quot;&gt;电话&lt;/th&gt;</span><br><span class="line">                    &lt;th width=&quot;10%&quot;&gt;用户角色&lt;/th&gt;</span><br><span class="line">                    &lt;th width=&quot;30%&quot;&gt;操作&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                   &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span> items=<span class="string">&quot;$&#123;userList &#125;&quot;</span> varStatus=<span class="string">&quot;status&quot;</span>&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                  &lt;td&gt;</span><br><span class="line">                  &lt;span&gt;$&#123;user.userCode &#125;&lt;/span&gt;</span><br><span class="line">                  &lt;/td&gt;</span><br><span class="line">                  &lt;td&gt;</span><br><span class="line">                  &lt;span&gt;$&#123;user.userName &#125;&lt;/span&gt;</span><br><span class="line">                  &lt;/td&gt;</span><br><span class="line">                  &lt;td&gt;</span><br><span class="line">                     &lt;span&gt;</span><br><span class="line">                        &lt;c:if test=&quot;$&#123;user.gender==1&#125;&quot;&gt;男&lt;/c:if&gt;</span><br><span class="line">                        &lt;c:if test=&quot;$&#123;user.gender==2&#125;&quot;&gt;女&lt;/c:if&gt;</span><br><span class="line">                     &lt;/span&gt;</span><br><span class="line">                  &lt;/td&gt;</span><br><span class="line">                  &lt;td&gt;</span><br><span class="line">                  &lt;span&gt;$&#123;user.age&#125;&lt;/span&gt;</span><br><span class="line">                  &lt;/td&gt;</span><br><span class="line">                  &lt;td&gt;</span><br><span class="line">                  &lt;span&gt;$&#123;user.phone&#125;&lt;/span&gt;</span><br><span class="line">                  &lt;/td&gt;</span><br><span class="line">                  &lt;td&gt;</span><br><span class="line">                     &lt;span&gt;$&#123;user.userRoleName&#125;&lt;/span&gt;</span><br><span class="line">                  &lt;/td&gt;</span><br><span class="line">                  &lt;td&gt;</span><br><span class="line">                  &lt;span&gt;&lt;a class=&quot;viewUser&quot; href=&quot;javascript:;&quot; userid=$&#123;user.id &#125; username=$&#123;user.userName &#125;&gt;&lt;img src=&quot;$&#123;pageContext.request.contextPath &#125;/images/read.png&quot; alt=&quot;查看&quot; title=&quot;查看&quot;/&gt;&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">                  &lt;span&gt;&lt;a class=&quot;modifyUser&quot; href=&quot;javascript:;&quot; userid=$&#123;user.id &#125; username=$&#123;user.userName &#125;&gt;&lt;img src=&quot;$&#123;pageContext.request.contextPath &#125;/images/xiugai.png&quot; alt=&quot;修改&quot; title=&quot;修改&quot;/&gt;&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">                  &lt;span&gt;&lt;a class=&quot;deleteUser&quot; href=&quot;javascript:;&quot; userid=$&#123;user.id &#125; username=$&#123;user.userName &#125;&gt;&lt;img src=&quot;$&#123;pageContext.request.contextPath &#125;/images/schu.png&quot; alt=&quot;删除&quot; title=&quot;删除&quot;/&gt;&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">                  &lt;/td&gt;</span><br><span class="line">               &lt;/tr&gt;</span><br><span class="line">            &lt;/c:forEach&gt;</span><br><span class="line">         &lt;/table&gt;</span><br><span class="line">         &lt;input type=<span class="string">&quot;hidden&quot;</span> id=<span class="string">&quot;totalPageCount&quot;</span> value=<span class="string">&quot;$&#123;totalPageCount&#125;&quot;</span>/&gt;</span><br><span class="line">         &lt;c:<span class="keyword">import</span> url=<span class="string">&quot;rollpage.jsp&quot;</span>&gt;</span><br><span class="line">              &lt;c:param name=<span class="string">&quot;totalCount&quot;</span> value=<span class="string">&quot;$&#123;totalCount&#125;&quot;</span>/&gt;</span><br><span class="line">              &lt;c:param name=<span class="string">&quot;currentPageNo&quot;</span> value=<span class="string">&quot;$&#123;currentPageNo&#125;&quot;</span>/&gt;</span><br><span class="line">              &lt;c:param name=<span class="string">&quot;totalPageCount&quot;</span> value=<span class="string">&quot;$&#123;totalPageCount&#125;&quot;</span>/&gt;</span><br><span class="line">           &lt;/c:import&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--点击删除按钮后弹出的页面--&gt;</span><br><span class="line">&lt;div class=&quot;zhezhao&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;remove&quot;</span> id=<span class="string">&quot;removeUse&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;removerChid&quot;</span>&gt;</span><br><span class="line">        &lt;h2&gt;提示&lt;/h2&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;removeMain&quot;</span>&gt;</span><br><span class="line">            &lt;p&gt;你确定要删除该用户吗？&lt;/p&gt;</span><br><span class="line">            &lt;a href=&quot;#&quot; id=&quot;yes&quot;&gt;确定&lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;#&quot; id=&quot;no&quot;&gt;取消&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;/jsp/common/foot.jsp&quot;</span> %&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;pageContext.request.contextPath &#125;/js/userlist.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2、获取用户数量"><a href="#2、获取用户数量" class="headerlink" title="2、获取用户数量"></a>2、获取用户数量</h3><ol>
<li>UserDao</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询用户总数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserTotal</span><span class="params">(Connection connection,String username,<span class="keyword">int</span> userRole)</span> <span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>UserDaoImpl</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据用户名或者角色，查询用户总数</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserTotal</span><span class="params">(Connection connection,String username,<span class="keyword">int</span> userRole)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">        StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sql.append(<span class="string">&quot;select count(1) as count from smbms_user u,smbms_role r where u.userRole = r.id&quot;</span>);</span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//存放参数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isNullOrEmpty(username))&#123;</span><br><span class="line">            sql.append(<span class="string">&quot; and u.userName like ?&quot;</span>);</span><br><span class="line">            list.add(<span class="string">&quot;%&quot;</span>+username+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(userRole &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            sql.append(<span class="string">&quot; and u.userRole = ?&quot;</span>);</span><br><span class="line">            list.add(userRole);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将list转成数组</span></span><br><span class="line">        Object[] params = list.toArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl-&gt;getUserTotal:&quot;</span>+sql.toString());<span class="comment">//输出完整的sql语句</span></span><br><span class="line">        rs = BaseDao.execute(connection, pstm, rs, sql.toString(), params);</span><br><span class="line">        <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">            count = rs.getInt(<span class="string">&quot;count&quot;</span>);<span class="comment">//从结果集中获取最终的数量</span></span><br><span class="line">        &#125;</span><br><span class="line">        BaseDao.closeResource(connection,pstm,rs);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>UserService</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取用户数量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserTotal</span><span class="params">(String username,<span class="keyword">int</span> userRole)</span></span>;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>UserServiceImpl</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询记录总数</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserTotal</span><span class="params">(String username, <span class="keyword">int</span> userRole)</span> </span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        conn = BaseDao.getConn();</span><br><span class="line">        count = userDao.getUserTotal(conn, username, userRole);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        BaseDao.closeResource(conn,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、获取用户列表"><a href="#3、获取用户列表" class="headerlink" title="3、获取用户列表"></a>3、获取用户列表</h3><ol>
<li>UserDao</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过条件查询userlist</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(Connection connection,String username,<span class="keyword">int</span> userRole,<span class="keyword">int</span> currentPageNo,<span class="keyword">int</span> pageSize)</span> <span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>UserDaoImpl</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(Connection connection, String username, <span class="keyword">int</span> userRole, <span class="keyword">int</span> currentPageNo, <span class="keyword">int</span> pageSize)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">        StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sql.append(<span class="string">&quot;select u.*,r.roleName as userRoleName from smbms_user u,smbms_role r where u.userRole = r.id&quot;</span>);</span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//存放参数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isNullOrEmpty(username))&#123;</span><br><span class="line">            sql.append(<span class="string">&quot; and u.userName like ?&quot;</span>);</span><br><span class="line">            list.add(<span class="string">&quot;%&quot;</span>+username+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(userRole &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            sql.append(<span class="string">&quot; and u.userRole = ?&quot;</span>);</span><br><span class="line">            list.add(userRole);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在数据库中，分页使用limit startIndex, pageSize</span></span><br><span class="line">        sql.append(<span class="string">&quot; order by creationDate DESC limit ?,?&quot;</span>);</span><br><span class="line">        currentPageNo = (currentPageNo - <span class="number">1</span>)*pageSize;</span><br><span class="line">        list.add(currentPageNo);</span><br><span class="line">        list.add(pageSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将list转成数组</span></span><br><span class="line">        Object[] params = list.toArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;sql----&gt;&quot;</span>+sql.toString());<span class="comment">//输出完整的sql语句</span></span><br><span class="line">        rs = BaseDao.execute(connection, pstm, rs, sql.toString(), params);</span><br><span class="line">        <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            user.setUserCode(rs.getString(<span class="string">&quot;userCode&quot;</span>));</span><br><span class="line">            user.setUserName(rs.getString(<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">            user.setGender(rs.getInt(<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">            user.setBirthday(rs.getDate(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">            user.setPhone(rs.getString(<span class="string">&quot;phone&quot;</span>));</span><br><span class="line">            user.setUserRole(rs.getInt(<span class="string">&quot;userRole&quot;</span>));</span><br><span class="line">            user.setUserRoleName(rs.getString(<span class="string">&quot;userRoleName&quot;</span>));</span><br><span class="line">            userList.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        BaseDao.closeResource(connection,pstm,rs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>UserService</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/根据条件查询用户列表</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserlist</span><span class="params">(String queryUserName,<span class="keyword">int</span> queryUserRole,<span class="keyword">int</span> currentPageNo,<span class="keyword">int</span> pageSize)</span></span>;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>UserServiceImpl</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserlist</span><span class="params">(String queryUserName, <span class="keyword">int</span> queryUserRole, <span class="keyword">int</span> currentPageNo, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        conn = BaseDao.getConn();</span><br><span class="line">        userList = userDao.getUserList(conn, queryUserName, queryUserRole,currentPageNo,pageSize);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        BaseDao.closeResource(conn,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>测试</li>
</ol>
<h3 id="4、获取角色列表"><a href="#4、获取角色列表" class="headerlink" title="4、获取角色列表"></a>4、获取角色列表</h3><p>为了职责统一，将角色的操作单独放在一个包中，与pojo中的类对应</p>
<ol>
<li>RoleDao</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取角色列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException</span>;	</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>RoleDaoImpl</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取角色列表</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;Role&gt; roleList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from smbms_role&quot;</span>;</span><br><span class="line">        Object[] params = &#123;&#125;;</span><br><span class="line">        rs = BaseDao.execute(connection, pstm, rs, sql, params);</span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            Role role = <span class="keyword">new</span> Role();</span><br><span class="line">            role.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            role.setRoleName(rs.getString(<span class="string">&quot;roleName&quot;</span>));</span><br><span class="line">            role.setRoleCode(rs.getString(<span class="string">&quot;roleCode&quot;</span>));</span><br><span class="line">            roleList.add(role);</span><br><span class="line">        &#125;</span><br><span class="line">        BaseDao.closeResource(<span class="keyword">null</span>, pstm, rs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> roleList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>RoleService</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取角色列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>RoleServiceImpl</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleServiceImpl</span> <span class="keyword">implements</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//引入Dao</span></span><br><span class="line">    <span class="keyword">private</span> RoleDao roleDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoleServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        roleDao = <span class="keyword">new</span> RoleDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;Role&gt; roleList = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = BaseDao.getConn();</span><br><span class="line">            roleList = roleDao.getRoleList(connection);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> roleList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5、用户显示的Servlet"><a href="#5、用户显示的Servlet" class="headerlink" title="5、用户显示的Servlet"></a>5、用户显示的Servlet</h3><ol>
<li>获取用户前端的数据（查询）</li>
<li>判断请求是否需要执行，根据参数的值判断</li>
<li>为了实现分页，需要计算出当前页面和总页面、页面大小…</li>
<li>用户列表展示</li>
<li>返回前端</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询用户列表，从前端获取数据</span></span><br><span class="line">    String queryUserName = req.getParameter(<span class="string">&quot;queryname&quot;</span>);</span><br><span class="line">    String temp = req.getParameter(<span class="string">&quot;queryUserRole&quot;</span>);</span><br><span class="line">    String pageIndex = req.getParameter(<span class="string">&quot;pageIndex&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> queryUserRole = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//获取用户列表</span></span><br><span class="line">    UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设定每页记录数量、当前页号</span></span><br><span class="line">    <span class="keyword">int</span> pageSize = <span class="number">5</span>;   <span class="comment">//可以考虑放入配置文件里</span></span><br><span class="line">    <span class="keyword">int</span> currentPageNo = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (queryUserName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        queryUserName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (temp != <span class="keyword">null</span> &amp;&amp; !temp.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        queryUserRole = Integer.parseInt(temp); <span class="comment">//给查询赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pageIndex != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            currentPageNo = Integer.parseInt(pageIndex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取用户总数</span></span><br><span class="line">    <span class="keyword">int</span> totalCount = userService.getUserTotal(queryUserName, queryUserRole);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//总页数支持</span></span><br><span class="line">    PageSupport pageSupport = <span class="keyword">new</span> PageSupport();</span><br><span class="line">    pageSupport.setCurrentPageNo(currentPageNo);</span><br><span class="line">    pageSupport.setPageSize(pageSize);</span><br><span class="line">    pageSupport.setTotalCount(totalCount);</span><br><span class="line">    <span class="keyword">int</span> totalPageCount = pageSupport.getTotalPageCount();</span><br><span class="line">    <span class="comment">//控制首尾页</span></span><br><span class="line">    <span class="keyword">if</span> (currentPageNo &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        currentPageNo = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentPageNo &gt; totalPageCount) &#123;</span><br><span class="line">        currentPageNo = totalPageCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取用户列表展示</span></span><br><span class="line">    userList = userService.getUserlist(queryUserName,queryUserRole,currentPageNo,pageSize);</span><br><span class="line">    req.setAttribute(<span class="string">&quot;userList&quot;</span>,userList);</span><br><span class="line"></span><br><span class="line">    RoleService roleService = <span class="keyword">new</span> RoleServiceImpl();</span><br><span class="line">    List&lt;Role&gt; roleList = roleService.getRoleList();</span><br><span class="line">    req.setAttribute(<span class="string">&quot;roleList&quot;</span>,roleList);</span><br><span class="line">    req.setAttribute(<span class="string">&quot;totalCount&quot;</span>,totalCount);</span><br><span class="line">    req.setAttribute(<span class="string">&quot;currentPageNo&quot;</span>,currentPageNo);</span><br><span class="line">    req.setAttribute(<span class="string">&quot;totalPageCount&quot;</span>,totalPageCount);</span><br><span class="line">    req.setAttribute(<span class="string">&quot;queryUserName&quot;</span>,queryUserName);</span><br><span class="line">    req.setAttribute(<span class="string">&quot;queryUserRole&quot;</span>,queryUserRole);</span><br><span class="line">    <span class="comment">//返回前端</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;userlist.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServletException | IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9、订单管理"><a href="#9、订单管理" class="headerlink" title="9、订单管理"></a>9、订单管理</h2><p>和用户管理实现过程几乎完全相同，此处略</p>
<h2 id="10、供应商管理"><a href="#10、供应商管理" class="headerlink" title="10、供应商管理"></a>10、供应商管理</h2><p>和用户管理实现过程几乎完全相同，此处略</p>
<h2 id="11、界面展示"><a href="#11、界面展示" class="headerlink" title="11、界面展示"></a>11、界面展示</h2><ul>
<li>登录界面</li>
</ul>
<p><img src="/2021/04/01/smbms/image-20210401102828051-1617245792891.png" alt="image-20210401102828051"></p>
<ul>
<li>主界面</li>
</ul>
<p><img src="/2021/04/01/smbms/image-20210401103014542-1617245792891.png" alt="image-20210401103014542"></p>
<ul>
<li>用户管理界面</li>
</ul>
<p><img src="/2021/04/01/smbms/image-20210401103057665-1617245792891.png" alt="image-20210401103057665"></p>
<ul>
<li>密码修改界面</li>
</ul>
<p><img src="/2021/04/01/smbms/image-20210401103152850.png" alt="image-20210401103152850"></p>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>MVC 三层架构</tag>
        <tag>Maven web项目</tag>
      </tags>
  </entry>
  <entry>
    <title>COVID-19_QA_System</title>
    <url>/2021/03/19/COVID-19-QA-System/</url>
    <content><![CDATA[<h1 id="JavaWeb-新冠肺炎知识与防护自动问答系统"><a href="#JavaWeb-新冠肺炎知识与防护自动问答系统" class="headerlink" title="JavaWeb 新冠肺炎知识与防护自动问答系统"></a>JavaWeb 新冠肺炎知识与防护自动问答系统</h1><h2 id="1、课设说明"><a href="#1、课设说明" class="headerlink" title="1、课设说明"></a>1、课设说明</h2><h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h3><p>​    新冠肺炎给全国人民带来巨大的威胁与灾难。为了更加有效的战胜它，首先需要尽可能了解它的特性与相关的防护知识。本选题的目的是：使用Java语言与技术，设计并实现一个基于因特网平台的“关于新冠肺炎知识与防护自动问答系统”。</p>
<a id="more"></a>

<h3 id="2-系统主要功能"><a href="#2-系统主要功能" class="headerlink" title="2. 系统主要功能"></a>2. 系统主要功能</h3><p>1）知识库扩充或增加更新功能。系统能人工或自动从互联网上爬取（或抽取或获取）与“新冠肺炎”相关的知识并整理成系统内部的某种格式（支持全文检索的方式）,存储入库。</p>
<p>2）人机问答子系统。提供丰富的（各种友好的界面–如可能的话如：语音界面?卡通拟人化界面？）人机界面，用于进行人机问答。</p>
<p>3）系统分为客户机部分、服务器部分、数据库部分。客户机部分可以是：网页形式、微信小程序形式、微信公众号形式、app形式、PC机上运行的正常程序的形式。服务器部分：用于与客户机进行网络通信与信息传输部分、互联网新冠相关知识爬取子系统部分、知识整理、索引、入库部分。数据库部分：支持全文问答的数据库组织与管理。</p>
<p>4）也可以做一个单独的PC机程序（上述三部分集成在一个程序中），单独安装并运行。</p>
<h2 id="2、系统实现"><a href="#2、系统实现" class="headerlink" title="2、系统实现"></a>2、系统实现</h2><p>该问答系统采用Maven技术，MVC三层架构，主要分为：</p>
<ul>
<li><p>用户模块：主要处理用户的注册、登录、以及密码修改等请求</p>
</li>
<li><p>问答模块：负责定时爬取肺炎新冠知识、搜索问题的最佳解答、以及数据库内容的部分显示</p>
</li>
</ul>
<p>系统功能框架图如下：</p>
<p><img src="/2021/03/19/COVID-19-QA-System/image-20210319154445900.png" alt="image-20210319154445900"></p>
<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><h4 id="1）导入所需的maven依赖"><a href="#1）导入所需的maven依赖" class="headerlink" title="1）导入所需的maven依赖"></a>1）导入所需的maven依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- Servlet依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- Jsp依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- jstl表达式依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- standard标签库 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- mysql连接数据库 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!-- http核心类 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpcore<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--httpclient依赖，爬取数据--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!--jsoup依赖，解析Html--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--结合操作工具包--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--bean实体注解工具包--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--汉语言包，主要用于分词--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hankcs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hanlp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>portable-1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2）编写连接数据库的配置文件，命名为db-properties"><a href="#2）编写连接数据库的配置文件，命名为db-properties" class="headerlink" title="2）编写连接数据库的配置文件，命名为db.properties"></a>2）编写连接数据库的配置文件，命名为db.properties</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/crawler?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">333</span></span><br></pre></td></tr></table></figure>
<h4 id="3）编写操作数据库的公共类BaseDao"><a href="#3）编写操作数据库的公共类BaseDao" class="headerlink" title="3）编写操作数据库的公共类BaseDao"></a>3）编写操作数据库的公共类BaseDao</h4><p>在类加载时读取db.properties配置文件，完成初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作数据库的公共类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.静态代码块，类加载时完成初始化</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//通过类加载器读取对应的资源</span></span><br><span class="line">        InputStream is = BaseDao.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            prop.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        driver = prop.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">        url = prop.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        username = prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        password = prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取数据库的连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//编写查询公共类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title">execute</span><span class="params">(Connection conn, PreparedStatement ps, ResultSet rs, String sql, Object[] params)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ps = conn.prepareStatement(sql);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">            ps.setObject(i+<span class="number">1</span>,params[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        rs = ps.executeQuery();</span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//编写增删改公共方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">execute</span><span class="params">(Connection conn,PreparedStatement ps,String sql,Object[] params)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ps = conn.prepareStatement(sql);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">            ps.setObject(i+<span class="number">1</span>,params[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> updateRows = ps.executeUpdate();</span><br><span class="line">        <span class="keyword">return</span> updateRows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">closeResource</span><span class="params">(Connection conn,PreparedStatement ps,ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">                rs = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ps != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ps.close();</span><br><span class="line">                ps = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">                conn = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4）表设计"><a href="#4）表设计" class="headerlink" title="4）表设计"></a>4）表设计</h4><ol>
<li>用户表（user）设计</li>
</ol>
<table>
<thead>
<tr>
<th><strong>字段名</strong></th>
<th><strong>类型</strong></th>
<th><strong>长度</strong></th>
<th><strong>约束</strong></th>
<th><strong>自增</strong></th>
<th><strong>备注</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>id</strong></td>
<td><strong>int</strong></td>
<td><strong>0</strong></td>
<td><strong>Pk</strong></td>
<td><strong>√</strong></td>
<td><strong>主键</strong></td>
</tr>
<tr>
<td><strong>userName</strong></td>
<td><strong>varchar</strong></td>
<td><strong>255</strong></td>
<td><strong>Unique</strong></td>
<td></td>
<td><strong>用户名</strong></td>
</tr>
<tr>
<td><strong>userPassword</strong></td>
<td><strong>varchar</strong></td>
<td><strong>255</strong></td>
<td><strong>Not null</strong></td>
<td></td>
<td><strong>密码</strong></td>
</tr>
</tbody></table>
<ol start="2">
<li>新冠问答表(covid)设计</li>
</ol>
<table>
<thead>
<tr>
<th><strong>字段名</strong></th>
<th><strong>类型</strong></th>
<th><strong>长度</strong></th>
<th><strong>约束</strong></th>
<th><strong>自增</strong></th>
<th><strong>备注</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>id</strong></td>
<td><strong>Int</strong></td>
<td><strong>0</strong></td>
<td><strong>Pk</strong></td>
<td><strong>√</strong></td>
<td><strong>主键</strong></td>
</tr>
<tr>
<td><strong>question</strong></td>
<td><strong>Varchar</strong></td>
<td><strong>255</strong></td>
<td><strong>Unique</strong></td>
<td></td>
<td><strong>问题</strong></td>
</tr>
<tr>
<td><strong>answer</strong></td>
<td><strong>Text</strong></td>
<td><strong>0</strong></td>
<td><strong>Not null</strong></td>
<td></td>
<td><strong>答案</strong></td>
</tr>
<tr>
<td><strong>createDate</strong></td>
<td><strong>datetime</strong></td>
<td><strong>0</strong></td>
<td></td>
<td></td>
<td><strong>更新日期</strong></td>
</tr>
</tbody></table>
<h4 id="5-主类User、QA的编写"><a href="#5-主类User、QA的编写" class="headerlink" title="5) 主类User、QA的编写"></a>5) 主类User、QA的编写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> String userName; <span class="comment">//用户名称</span></span><br><span class="line">    <span class="keyword">private</span> String userPassword; <span class="comment">//用户密码</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userPassword;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserPassword</span><span class="params">(String userPassword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userPassword = userPassword;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String question;</span><br><span class="line">    <span class="keyword">private</span> String answer;</span><br><span class="line">    <span class="keyword">private</span> Date creationDate; <span class="comment">//创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getQuestion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> question;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuestion</span><span class="params">(String question)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.question = question;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAnswer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnswer</span><span class="params">(String answer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.answer = answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreationDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> creationDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreationDate</span><span class="params">(Date creationDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.creationDate = creationDate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6）编写CharacterEncodingFilter（字符编码过滤器）类"><a href="#6）编写CharacterEncodingFilter（字符编码过滤器）类" class="headerlink" title="6）编写CharacterEncodingFilter（字符编码过滤器）类"></a>6）编写CharacterEncodingFilter（字符编码过滤器）类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>web.xml中对应配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--字符编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.zqy.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-用户模块"><a href="#2-用户模块" class="headerlink" title="2. 用户模块"></a>2. 用户模块</h3><p>业务流程图如下：</p>
<p><img src="/2021/03/19/COVID-19-QA-System/image-20210319162050909.png" alt="image-20210319162050909"></p>
<p>采用自底向上实现的方式编写代码</p>
<h4 id="1）UserDao接口的编写"><a href="#1）UserDao接口的编写" class="headerlink" title="1）UserDao接口的编写"></a>1）UserDao接口的编写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.dao.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zqy.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注册用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">register</span><span class="params">(Connection conn, String userName, String userPassword)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">    <span class="comment">//用户登录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(Connection conn, String userName, String userPassword)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">    <span class="comment">//密码修改</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePwd</span><span class="params">(Connection conn, <span class="keyword">int</span> id, String userPassword)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2）接口实现类UserDaoImpl的编写"><a href="#2）接口实现类UserDaoImpl的编写" class="headerlink" title="2）接口实现类UserDaoImpl的编写"></a>2）接口实现类UserDaoImpl的编写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.dao.user.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zqy.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.zqy.dao.user.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.zqy.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">register</span><span class="params">(Connection conn, String userName, String userPassword)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String sql = <span class="string">&quot;insert into user(userName,userPassword) VALUES (?,?)&quot;</span>;</span><br><span class="line">            Object[] params = &#123;userName,userPassword&#125;;</span><br><span class="line">            <span class="keyword">int</span> rows = BaseDao.execute(conn,pstm,sql,params);</span><br><span class="line">            <span class="keyword">if</span>(rows == <span class="number">1</span>)&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            BaseDao.closeResource(<span class="keyword">null</span>,pstm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(Connection conn, String userName, String userPassword)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String sql = <span class="string">&quot;select * from user where userName = ? and userPassword = ?&quot;</span>;</span><br><span class="line">            Object[] params = &#123;userName,userPassword&#125;;</span><br><span class="line">            rs = BaseDao.execute(conn,pstm,rs,sql,params);</span><br><span class="line">            <span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">                user = <span class="keyword">new</span> User();</span><br><span class="line">                user.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                user.setUserName(rs.getString(<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">                user.setUserPassword(rs.getString(<span class="string">&quot;userPassword&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            BaseDao.closeResource(<span class="keyword">null</span>,pstm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePwd</span><span class="params">(Connection conn, <span class="keyword">int</span> id, String userPassword)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String sql = <span class="string">&quot;update user set userPassword=? where id=?&quot;</span>;</span><br><span class="line">            Object[] params = &#123;userPassword,id&#125;;</span><br><span class="line">            <span class="keyword">int</span> rows = BaseDao.execute(conn,pstm,sql,params);</span><br><span class="line">            <span class="keyword">if</span>(rows == <span class="number">1</span>)&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            BaseDao.closeResource(<span class="keyword">null</span>,pstm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3）UserService业务层接口的编写"><a href="#3）UserService业务层接口的编写" class="headerlink" title="3）UserService业务层接口的编写"></a>3）UserService业务层接口的编写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.service.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zqy.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用户登录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String userName, String userPassword)</span></span>;</span><br><span class="line">    <span class="comment">//用户注册</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">register</span><span class="params">(String userName, String userPassword)</span></span>;</span><br><span class="line">    <span class="comment">//密码更新</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePwd</span><span class="params">(<span class="keyword">int</span> id, String userPassword)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4）接口实现类UserServiceImpl的编写"><a href="#4）接口实现类UserServiceImpl的编写" class="headerlink" title="4）接口实现类UserServiceImpl的编写"></a>4）接口实现类UserServiceImpl的编写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.service.user.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zqy.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.zqy.dao.user.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.zqy.dao.user.impl.UserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.zqy.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.zqy.service.user.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//业务层都会调用dao层，所以我们要引入dao</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String userName, String userPassword)</span> </span>&#123;</span><br><span class="line">        Connection connection = BaseDao.getConn();</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//通过业务层调用对应的具体的数据库操作</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            user = userDao.login(connection,userName,userPassword);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">register</span><span class="params">(String userName, String userPassword)</span> </span>&#123;</span><br><span class="line">        Connection connection = BaseDao.getConn();</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//通过业务层调用对应的具体的数据库操作</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            flag = userDao.register(connection,userName,userPassword);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePwd</span><span class="params">(<span class="keyword">int</span> id, String userPassword)</span> </span>&#123;</span><br><span class="line">        Connection connection = BaseDao.getConn();</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//通过业务层调用对应的具体的数据库操作</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            flag = userDao.updatePwd(connection,id,userPassword);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5）用户模块Servlet层的编写"><a href="#5）用户模块Servlet层的编写" class="headerlink" title="5）用户模块Servlet层的编写"></a>5）用户模块Servlet层的编写</h4><h5 id="1-LoginServlet的编写，负责处理用户的注册、登录"><a href="#1-LoginServlet的编写，负责处理用户的注册、登录" class="headerlink" title="1. LoginServlet的编写，负责处理用户的注册、登录"></a>1. LoginServlet的编写，负责处理用户的注册、登录</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.servlet.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zqy.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.zqy.service.user.UserService;</span><br><span class="line"><span class="keyword">import</span> com.zqy.service.user.impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.zqy.util.Constants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//Servlet：控制层、调用业务层代码</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取请求功能</span></span><br><span class="line">        String op = req.getParameter(<span class="string">&quot;operation&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取前台表单中的信息</span></span><br><span class="line">        String userName = req.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        String userPassword = req.getParameter(<span class="string">&quot;userPassword&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;register&quot;</span>.equals(op))&#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setUserName(userName);</span><br><span class="line">            user.setUserPassword(userPassword);</span><br><span class="line">            <span class="keyword">boolean</span> flag = userService.register(userName,userPassword);</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="comment">//注册成功</span></span><br><span class="line">                req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;&lt;font color=&#x27;green&#x27;&gt;注册成功,请输入用户名密码登陆&lt;/font&gt;&quot;</span>);</span><br><span class="line">                <span class="comment">//跳转</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//注册失败</span></span><br><span class="line">                req.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;注册失败,请检查!&quot;</span>);</span><br><span class="line">                <span class="comment">//跳转</span></span><br><span class="line">            &#125;</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;loginAndRegister.jsp&quot;</span>).forward(req, resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//登陆功能</span></span><br><span class="line">            User user = userService.login(userName, userPassword);</span><br><span class="line">            <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//登陆成功，将当前用户保存到session中</span></span><br><span class="line">                req.getSession().setAttribute(Constants.USER_SESSION,user);</span><br><span class="line">                req.getRequestDispatcher(<span class="string">&quot;main.jsp&quot;</span>).forward(req, resp);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//用户不存在</span></span><br><span class="line">                req.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">                req.getRequestDispatcher(<span class="string">&quot;loginAndRegister.jsp&quot;</span>).forward(req, resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-UpdatePwdServlet的编写，负责处理用户修改密码"><a href="#2-UpdatePwdServlet的编写，负责处理用户修改密码" class="headerlink" title="2. UpdatePwdServlet的编写，负责处理用户修改密码"></a>2. UpdatePwdServlet的编写，负责处理用户修改密码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.servlet.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zqy.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.zqy.service.user.UserService;</span><br><span class="line"><span class="keyword">import</span> com.zqy.service.user.impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.zqy.util.Constants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdatePwdServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">      <span class="comment">//Servlet：控制层、调用业务层代码</span></span><br><span class="line">      UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取前端输入的原始密码</span></span><br><span class="line">      String oldpass = request.getParameter(<span class="string">&quot;oldpass&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//密码匹配</span></span><br><span class="line">      User user = (User)request.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line">      <span class="keyword">if</span>(oldpass.equals(user.getUserPassword()))&#123;</span><br><span class="line">         <span class="comment">//原始密码正确</span></span><br><span class="line">         <span class="comment">//获取前端的新密码</span></span><br><span class="line">         String newpass = request.getParameter(<span class="string">&quot;newpass&quot;</span>);</span><br><span class="line">         <span class="keyword">boolean</span> flag = userService.updatePwd(user.getId(),newpass);</span><br><span class="line">         <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="comment">//密码修改成功</span></span><br><span class="line">            <span class="comment">//密码更正，重新将用户信息设置到session中</span></span><br><span class="line">            user.setUserPassword(newpass);</span><br><span class="line">            request.getSession().setAttribute(Constants.USER_SESSION, user);</span><br><span class="line">            request.setAttribute(<span class="string">&quot;success&quot;</span>, <span class="string">&quot;密码修改成功&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;updatePassword.jsp&quot;</span>).forward(request, response);</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;密码修改失败&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;updatePassword.jsp&quot;</span>).forward(request, response);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="comment">//密码输入错误</span></span><br><span class="line">         request.setAttribute(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;原始密码不正确&quot;</span>);</span><br><span class="line">         request.getRequestDispatcher(<span class="string">&quot;updatePassword.jsp&quot;</span>).forward(request, response);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">      doGet(request,response);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-对应在web-xml文件中添加请求映射"><a href="#3-对应在web-xml文件中添加请求映射" class="headerlink" title="3. 对应在web.xml文件中添加请求映射"></a>3. 对应在web.xml文件中添加请求映射</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--loginServlet登录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zqy.servlet.user.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--UpdatePwdServlet修改密码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>updatePwd<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zqy.servlet.user.UpdatePwdServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>updatePwd<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/updatePwd<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="6）前端jsp页面代码"><a href="#6）前端jsp页面代码" class="headerlink" title="6）前端jsp页面代码"></a>6）前端jsp页面代码</h4><h5 id="1-loginAndRegister-jsp"><a href="#1-loginAndRegister-jsp" class="headerlink" title="1. loginAndRegister.jsp"></a>1. loginAndRegister.jsp</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;登录注册界面&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">   table&#123;</span><br><span class="line">      position:absolute;</span><br><span class="line">      top:5cm;</span><br><span class="line">      left:15cm;</span><br><span class="line">      width:400px;</span><br><span class="line">      height:250px;</span><br><span class="line">      border:2px solid #2BA8E8;</span><br><span class="line">   &#125;</span><br><span class="line">   .input&#123;</span><br><span class="line">      width:260px;</span><br><span class="line">      height:30px;</span><br><span class="line">      font-size:20px;</span><br><span class="line">   &#125;</span><br><span class="line">   .btn&#123;</span><br><span class="line">      cursor:pointer;</span><br><span class="line">      height:40px;</span><br><span class="line">      width:70px;</span><br><span class="line">      font-size:20px;</span><br><span class="line">      font-weight: bold;</span><br><span class="line">   &#125;</span><br><span class="line">   .title&#123;</span><br><span class="line">      font-style: italic;</span><br><span class="line">   &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">  &lt;body bgcolor=<span class="string">&quot;#f5f5f5&quot;</span> text=<span class="string">&quot;black&quot;</span>&gt;</span><br><span class="line">  &lt;!-- 表单开始 --&gt;</span><br><span class="line">          &lt;form name=<span class="string">&quot;form1&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">         &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;operation&quot;</span> value=<span class="string">&quot;register&quot;</span>/&gt;             </span><br><span class="line">             &lt;table border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                   &lt;th colspan=&quot;2&quot; style=&quot;font-size:30px;font-family: 华文行楷&quot;&gt;用户登陆注册&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                   &lt;th colspan=&quot;2&quot; style=&quot;color:red&quot; id=&quot;msg&quot;&gt;$&#123;msg&#125;&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                   &lt;td class=&quot;title&quot;&gt;USERNAME:&lt;/td&gt;</span><br><span class="line">                   &lt;td&gt;&lt;input type=&quot;text&quot; class=&quot;input&quot; name=&quot;userName&quot;&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;   </span><br><span class="line">                   &lt;td class=&quot;title&quot;&gt;PASSWORD:&lt;/td&gt;</span><br><span class="line">                   &lt;td&gt;&lt;input type=&quot;password&quot; class=&quot;input&quot; name=&quot;userPassword&quot;&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                   &lt;td colspan=<span class="string">&quot;2&quot;</span> align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">                      &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;登陆&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn&quot;</span> onclick=<span class="string">&quot;return login()&quot;</span>/&gt;</span><br><span class="line">                      &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;注册&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn&quot;</span> onclick=<span class="string">&quot;return register()&quot;</span>/&gt;</span><br><span class="line">                   &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                   &lt;td colspan=&quot;3&quot; align=&quot;center&quot;&gt;copyRight &amp;copy;&lt;i&gt; 2020 Zhang QingYang&lt;/i&gt;&lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">             &lt;/table&gt;</span><br><span class="line">          &lt;/form&gt;</span><br><span class="line">          &lt;!-- 表单结束 --&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">   <span class="comment">//获取表单对象</span></span><br><span class="line">   <span class="keyword">var</span> form1 = document.form1;</span><br><span class="line">   <span class="comment">//获取错误信息显示位置的对象</span></span><br><span class="line">   <span class="keyword">var</span> msg = document.getElementById(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="function">function <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">var</span> operation = form1.operation.value;</span><br><span class="line">      form1.operation.value = <span class="string">&quot;login&quot;</span>;</span><br><span class="line">      <span class="comment">//获取用户名</span></span><br><span class="line">      <span class="keyword">var</span> username = form1.userName.value;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取密码</span></span><br><span class="line">      <span class="keyword">var</span> password = form1.userPassword.value;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(username.length&lt;<span class="number">1</span>)&#123;</span><br><span class="line">         msg.innerText=<span class="string">&quot;请输入用户名&quot;</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         msg.innerText=<span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(password.length&lt;<span class="number">1</span>)&#123;</span><br><span class="line">         msg.innerText=<span class="string">&quot;请输入密码&quot;</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         msg.innerText=<span class="string">&quot;&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//页面跳转</span></span><br><span class="line">   form1.action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span>;</span><br><span class="line">   form1.submit();</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="function">function <span class="title">register</span><span class="params">()</span></span>&#123;</span><br><span class="line">      form1.operation.value = <span class="string">&quot;register&quot;</span>;</span><br><span class="line">      <span class="comment">//获取用户名</span></span><br><span class="line">      <span class="keyword">var</span> username = form1.userName.value;</span><br><span class="line">      <span class="comment">//获取密码</span></span><br><span class="line">      <span class="keyword">var</span> password = form1.userPassword.value;</span><br><span class="line">      <span class="comment">//验证用户名</span></span><br><span class="line">      <span class="keyword">if</span>(username.length&lt;<span class="number">1</span>)&#123;</span><br><span class="line">         msg.innerText=<span class="string">&quot;请输入用户名&quot;</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(username.length&lt;<span class="number">3</span> || username.length&gt;<span class="number">8</span>)&#123;</span><br><span class="line">         msg.innerText=<span class="string">&quot;用户名长度在3~8之间&quot;</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         msg.innerText=<span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//验证密码</span></span><br><span class="line">      <span class="keyword">if</span>(password.length&lt;<span class="number">1</span>)&#123;</span><br><span class="line">         msg.innerText=<span class="string">&quot;请输入密码&quot;</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(password.length&lt;<span class="number">6</span> || password.length&gt;<span class="number">18</span>)&#123;</span><br><span class="line">         msg.innerText=<span class="string">&quot;密码长度在6~18之间&quot;</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         msg.innerText=<span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      form1.action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span>;</span><br><span class="line">      form1.submit();</span><br><span class="line">   &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>在web.xml中设置成欢迎界面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置欢迎界面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>loginAndRegister.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在web.xml中配置映射请求</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--loginServlet登录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zqy.servlet.user.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="2-updatePassword-jsp"><a href="#2-updatePassword-jsp" class="headerlink" title="2. updatePassword.jsp"></a>2. updatePassword.jsp</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=utf-8&quot;</span> pageEncoding=<span class="string">&quot;utf-8&quot;</span>%&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;  </span><br><span class="line">    &lt;title&gt;My JSP &#x27;updatePassword.jsp&#x27; starting page&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">  .input&#123;</span><br><span class="line">      height:30px;</span><br><span class="line">      width:250px; </span><br><span class="line">      font-size:20px;    </span><br><span class="line">   &#125;</span><br><span class="line">   table&#123;</span><br><span class="line">      position:absolute;</span><br><span class="line">      left:<span class="number">30</span>%;</span><br><span class="line">      border:2px solid purple;</span><br><span class="line">   &#125;</span><br><span class="line">   .btn&#123;</span><br><span class="line">      cursor:pointer;</span><br><span class="line">      height:40px;</span><br><span class="line">      width:70px;</span><br><span class="line">      font-size:20px;</span><br><span class="line">      font-weight: bold;</span><br><span class="line">      border:<span class="number">0</span>;</span><br><span class="line">      background-color: green;</span><br><span class="line">      color:white;</span><br><span class="line">   &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">  &lt;body bgcolor=<span class="string">&quot;#f5f5f5&quot;</span>&gt;</span><br><span class="line">    &lt;form onsubmit=<span class="string">&quot;return check()&quot;</span> name=<span class="string">&quot;form1&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">       &lt;table&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">             &lt;th colspan=&quot;3&quot; style=&quot;font-size:25;font-style: oblique&quot;&gt;用户密码修改&lt;/th&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">             &lt;th colspan=&quot;3&quot; style=&quot;color:green&quot;&gt;$&#123;success&#125;&lt;/th&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">             &lt;td align=&quot;right&quot;&gt;原始密码:&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;oldpass&quot; class=&quot;input&quot;&gt;&lt;/td&gt;</span><br><span class="line">             &lt;td width=&quot;200px&quot; id=&quot;e1&quot; style=&quot;color:red;font-weight:bold&quot;&gt;$&#123;error&#125;&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">             &lt;td align=&quot;right&quot;&gt;新密码:&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;newpass&quot; class=&quot;input&quot;&gt;&lt;/td&gt;</span><br><span class="line">             &lt;td width=&quot;200px&quot; id=&quot;e2&quot; style=&quot;color:red;font-weight:bold&quot;&gt;&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">             &lt;td align=&quot;right&quot;&gt;重复密码:&lt;/td&gt;</span><br><span class="line">             &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;repass&quot; class=&quot;input&quot; onblur=&quot;return reCheck()&quot;&gt;&lt;/td&gt;</span><br><span class="line">             &lt;td width=&quot;200px&quot; id=&quot;e3&quot; style=&quot;color:red;font-weight:bold&quot;&gt;&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">             &lt;th colspan=<span class="string">&quot;3&quot;</span>&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn&quot;</span>/&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;取消&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn&quot;</span>/&gt;</span><br><span class="line">             &lt;/th&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">       &lt;/table&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">   <span class="function">function <span class="title">reCheck</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//获得当前表单对象</span></span><br><span class="line">      <span class="keyword">var</span> form1 = document.form1;</span><br><span class="line">      <span class="comment">//获得新密码</span></span><br><span class="line">      <span class="keyword">var</span> newpass = form1.newpass.value;</span><br><span class="line">      <span class="comment">//获得重复密码</span></span><br><span class="line">      <span class="keyword">var</span> repass = form1.repass.value;</span><br><span class="line">      <span class="comment">//错误信息提示位置</span></span><br><span class="line">      <span class="keyword">var</span> e3 = document.getElementById(<span class="string">&quot;e3&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span>(repass.length&lt;<span class="number">1</span>)&#123;</span><br><span class="line">         e3.innerText=<span class="string">&quot;请输入重复密码&quot;</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(repass != newpass)&#123;</span><br><span class="line">            e3.innerText=<span class="string">&quot;两次密码不一致&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            e3.innerText=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="function">function <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//获得当前表单对象</span></span><br><span class="line">      <span class="keyword">var</span> form1 = document.form1;</span><br><span class="line">      <span class="comment">//获得原始密码</span></span><br><span class="line">      <span class="keyword">var</span> oldpass = form1.oldpass.value;</span><br><span class="line">      <span class="comment">//获得新密码</span></span><br><span class="line">      <span class="keyword">var</span> newpass = form1.newpass.value;</span><br><span class="line">      <span class="keyword">var</span> e1 = document.getElementById(<span class="string">&quot;e1&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> e2 = document.getElementById(<span class="string">&quot;e2&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> e3 = document.getElementById(<span class="string">&quot;e3&quot;</span>);</span><br><span class="line">      <span class="comment">//判断原始密码是否填写</span></span><br><span class="line">      <span class="keyword">if</span>(oldpass.length &lt; <span class="number">1</span>)&#123;</span><br><span class="line">         e1.innerText=<span class="string">&quot;请输入原始密码&quot;</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         e1.innerText=<span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//判断新密码是否填写</span></span><br><span class="line">      <span class="keyword">if</span>(newpass.length &lt; <span class="number">1</span>)&#123;</span><br><span class="line">         e2.innerText=<span class="string">&quot;请输入新密码&quot;</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         e2.innerText=<span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//验证重复密码</span></span><br><span class="line">      <span class="keyword">var</span> v = reCheck();</span><br><span class="line">      <span class="keyword">if</span>(v == <span class="keyword">false</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(oldpass == newpass)&#123;</span><br><span class="line">         e2.innerText = <span class="string">&quot;密码未被改变&quot;</span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         e2.innerText=<span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      form1.action=<span class="string">&quot;/updatePwd&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>在web.xml中配置映射请求</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--UpdatePwdServlet修改密码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>updatePwd<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zqy.servlet.user.UpdatePwdServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>updatePwd<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/updatePwd<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="7）运行测试，略"><a href="#7）运行测试，略" class="headerlink" title="7）运行测试，略"></a>7）运行测试，略</h4><h3 id="3-问答模块"><a href="#3-问答模块" class="headerlink" title="3. 问答模块"></a>3. 问答模块</h3><h4 id="1）★-新冠信息的爬取"><a href="#1）★-新冠信息的爬取" class="headerlink" title="1）★ 新冠信息的爬取"></a>1）★ 新冠信息的爬取</h4><p>这里我尝试过爬取百度知道有关新冠肺炎的知识信息，但由于其反爬机制较为强大并未成功，经过尝试后选择对搜狗问问进行爬取。</p>
<h5 id="1-分析网页"><a href="#1-分析网页" class="headerlink" title="1. 分析网页"></a>1. 分析网页</h5><ul>
<li>使用搜狗搜索关键词“<a href="https://www.sogou.com/sogou?query=%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E&insite=wenwen.sogou.com&pid=sogou-wsse-a9e18cb5dd9d3ab4&rcer=&page=2&ie=utf8">新冠肺炎</a>“，分析URL:</li>
</ul>
<p><a href="https://www.sogou.com/sogou?query=%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E&amp;insite=wenwen.sogou.com&amp;pid=sogou-wsse-a9e18cb5dd9d3ab4&amp;rcer=&amp;page=1&amp;ie=utf8">https://www.sogou.com/sogou?query=%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E&amp;insite=wenwen.sogou.com&amp;pid=sogou-wsse-a9e18cb5dd9d3ab4&amp;rcer=&amp;page=1&amp;ie=utf8</a></p>
<p>可以发现page=””表示页数，所以可以通过改变page后的参数来设置爬取的页数。</p>
<ul>
<li>通过按下F12查看网页源代码</li>
</ul>
<p><img src="/2021/03/19/COVID-19-QA-System/image-20210319163621089.png" alt="image-20210319163621089"></p>
<p>这些a标签中的href就是每个问答对的链接，通过Jsoup的select(“a[target=’_blank’]”)；可以爬去到这些href</p>
<ul>
<li>分析具体问答网页</li>
</ul>
<p>获取到上述链接后，对每一个链接进行访问，进入到详细的问答页面，同样F12查看网页源代码，找到问题和答案部分。</p>
<p><img src="/2021/03/19/COVID-19-QA-System/image-20210319163920815.png" alt="image-20210319163920815"></p>
<p><img src="/2021/03/19/COVID-19-QA-System/image-20210319164148235.png" alt="image-20210319164148235"></p>
<p>同样对他们的标签进行分析，使用Jsoup进行解析，代码见下文。</p>
<ul>
<li>字符处理</li>
</ul>
<p>可以看到网页源代码中的答案有许多无效字符，使用正则表达式进行无效字符的剔除即可。<br>问题字数较少，所以仅保留中文字符即可，正则表达式：replaceAll(“[ ^\ \u4E00 - \ \u9FA5] “,””)</p>
<p>针对答案的特殊字符，使用正则表达式：replaceAll(“[\ \u25c6~\ \u25c7]|[\ \——]|[\ \▲]|[\ \△]]”,””)</p>
<h5 id="2-编写HttpUtil工具类，负责获取HTML页面"><a href="#2-编写HttpUtil工具类，负责获取HTML页面" class="headerlink" title="2. 编写HttpUtil工具类，负责获取HTML页面"></a>2. 编写HttpUtil工具类，负责获取HTML页面</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.util.crawler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.config.RequestConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.conn.PoolingHttpClientConnectionManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PoolingHttpClientConnectionManager cm;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cm = <span class="keyword">new</span> PoolingHttpClientConnectionManager();</span><br><span class="line">        <span class="comment">//设置最大连接数</span></span><br><span class="line">        <span class="keyword">this</span>.cm.setMaxTotal(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置每个主机的最大连接数</span></span><br><span class="line">        <span class="keyword">this</span>.cm.setDefaultMaxPerRoute(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据请求地址下载页面数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doGetHtml</span><span class="params">(String url)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1、获取HttpClient对象</span></span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(<span class="keyword">this</span>.cm).build();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2、创建HttpGet请求对象，设置url地址</span></span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//設置httpGet的头部參數信息</span></span><br><span class="line">        httpGet.setHeader(<span class="string">&quot;User-Agent&quot;</span>,<span class="string">&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/74.0.3729.169 Safari/537.36&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、设置请求信息</span></span><br><span class="line">        httpGet.setConfig(<span class="keyword">this</span>.getConfig());</span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//3、使用HttpClient发起请求，获取响应</span></span><br><span class="line">            response = httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4、解析响应，返回结果</span></span><br><span class="line">            <span class="keyword">if</span>(response.getStatusLine().getStatusCode() == HttpStatus.SC_OK)&#123;</span><br><span class="line">                <span class="comment">//判断响应体Entity是否为空，若不为空则可以使用EntityUtils</span></span><br><span class="line">                <span class="keyword">if</span>(response.getEntity() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> EntityUtils.toString(response.getEntity(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭response</span></span><br><span class="line">            <span class="keyword">if</span>(response != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RequestConfig <span class="title">getConfig</span><span class="params">()</span> </span>&#123;     </span><br><span class="line">        RequestConfig config = RequestConfig.custom()</span><br><span class="line">                .setConnectTimeout(<span class="number">20000</span>)    <span class="comment">//创建连接的最长时间</span></span><br><span class="line">                .setConnectionRequestTimeout(<span class="number">20000</span>)   <span class="comment">//获得连接的最长时间</span></span><br><span class="line">                .setSocketTimeout(<span class="number">10000</span>)    <span class="comment">//数据传输的最长时间</span></span><br><span class="line">                <span class="comment">//.setProxy(proxy)			//如果IP被封，考虑使用代理IP</span></span><br><span class="line">                <span class="comment">//.setCookieSpec(CookieSpecs.STANDARD)</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-编写Spider类，负责解析HTML页面，返回爬取结果"><a href="#3-编写Spider类，负责解析HTML页面，返回爬取结果" class="headerlink" title="3. 编写Spider类，负责解析HTML页面，返回爬取结果"></a>3. 编写Spider类，负责解析HTML页面，返回爬取结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.util.crawler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//爬取搜狗问问页面的问答连接</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Spider</span> </span>&#123;</span><br><span class="line">    <span class="comment">//存放搜索问题的url</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; hrefList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="comment">//hashMap存放问答</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;ArrayList&lt;String&gt;&gt; QAs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHref</span><span class="params">(<span class="keyword">int</span> page)</span></span>&#123;</span><br><span class="line">        HttpUtil httpUtil = <span class="keyword">new</span> HttpUtil();</span><br><span class="line">        <span class="comment">//搜索新冠肺炎url</span></span><br><span class="line">        String url = <span class="string">&quot;https://www.sogou.com/sogou?query=%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E&amp;insite=wenwen.sogou.com&amp;pid=sogou-wsse-a9e18cb5dd9d3ab4&amp;rcer=&amp;page=&quot;</span>+page+<span class="string">&quot;&amp;ie=utf8&quot;</span>;</span><br><span class="line">        String html = httpUtil.doGetHtml(url);</span><br><span class="line">        <span class="comment">//System.out.println(html);</span></span><br><span class="line">        Document document= Jsoup.parse(html);</span><br><span class="line">        <span class="comment">//System.out.println(document);</span></span><br><span class="line">        Elements postItems = document.getElementsByClass(<span class="string">&quot;fb&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Element postItem : postItems)&#123;</span><br><span class="line">            Elements link=postItem.select(<span class="string">&quot;a[target=&#x27;_blank&#x27;]&quot;</span>);</span><br><span class="line">            <span class="comment">//System.out.println(link.attr(&quot;href&quot;));</span></span><br><span class="line">            hrefList.add(link.attr(<span class="string">&quot;href&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回一个数组，第一个元素为问题，第二个元素为答案</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getQuestionAndAnswer</span><span class="params">(String  url)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//第一个元素存问题，第二个元素存答案</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//搜狗问问，搜索新冠肺炎url</span></span><br><span class="line">        HttpUtil httpUtil = <span class="keyword">new</span> HttpUtil();</span><br><span class="line">        String html = httpUtil.doGetHtml(url);</span><br><span class="line">        <span class="comment">//System.out.println(html);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析html页面</span></span><br><span class="line">        Document document = Jsoup.parse(html);</span><br><span class="line">        <span class="comment">//System.out.print(document.text());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得搜索的问题</span></span><br><span class="line">        Element title = document.getElementById(<span class="string">&quot;question_title&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(title != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//System.out.println(title.text());</span></span><br><span class="line">            String question = title.text().replaceAll(<span class="string">&quot;[^\\u4E00-\\u9FA5]&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            temp.add(question);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得搜索的答案</span></span><br><span class="line">        Elements preTag = document.getElementsByTag(<span class="string">&quot;pre&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(preTag != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String answer = preTag.get(<span class="number">0</span>).text().replaceAll(<span class="string">&quot;[\\u25c6~\\u25c7]|[\\——]|[\\▲]|[\\△]]&quot;</span>,<span class="string">&quot;&quot;</span>).trim();</span><br><span class="line">            temp.add(answer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//爬取页号为Page的问题与答案</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;String&gt;&gt; spiderQuestionAndAnswer(<span class="keyword">int</span> page)&#123;</span><br><span class="line">        getHref(page);</span><br><span class="line">        <span class="keyword">for</span>(String href:hrefList)&#123;</span><br><span class="line">            QAs.add(getQuestionAndAnswer(href));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> QAs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="4-设置定时任务，实现定时爬取"><a href="#4-设置定时任务，实现定时爬取" class="headerlink" title="4. 设置定时任务，实现定时爬取"></a>4. 设置定时任务，实现定时爬取</h5><p>我尝试过一次爬取多个页面，当一次爬取5个页面时就会被反爬机制捕获，并将导致短时间内无法再次进行爬取，于是这里采用设置定时任务的方式，每隔固定时间爬取一个页面的数据存入数据库，从而避免了IP的封杀。</p>
<ul>
<li>建立一个TaskListener类，继承ServletContextListener，调用TimerManager类的默认构建方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.servlet.time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zqy.util.crawler.TimerManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> TimerManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在web.xml中设置任务监听器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--TaskListener 监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.zqy.servlet.time.TaskListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>这里引入常量类Constants，将频繁更改的固定数值放入其中，方便后续代码的优化。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constants</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String USER_SESSION = <span class="string">&quot;userSession&quot;</span>;    <span class="comment">//用户Session</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> page = <span class="number">13</span>;   <span class="comment">//爬取的页号</span></span><br><span class="line">    <span class="comment">//设置每天新冠疫情问答数据库更新时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> PERIOD_DAY = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;      <span class="comment">//时间间隔1天</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> UPDATE_HOUR = <span class="number">13</span>;                       <span class="comment">//时</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> UPDATE_MINUTE = <span class="number">0</span>;                     <span class="comment">//分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> UPDATE_SECOND = <span class="number">0</span>;                      <span class="comment">//秒</span></span><br><span class="line">    <span class="comment">//设置显示搜索问题的最佳答案数量（若无正确匹配问题，则显示bestAnsNum个最可能是答案的数据）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> bestAnsNum = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>定义TimerManager类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.util.crawler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zqy.util.Constants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimerManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 设置每天新冠疫情问答数据库更新时间 */</span></span><br><span class="line">        calendar.set(Calendar.HOUR_OF_DAY, Constants.UPDATE_HOUR);</span><br><span class="line">        calendar.set(Calendar.MINUTE, Constants.UPDATE_MINUTE);</span><br><span class="line">        calendar.set(Calendar.SECOND, Constants.UPDATE_SECOND);</span><br><span class="line"></span><br><span class="line">        Date date=calendar.getTime(); <span class="comment">//第一次执行定时任务的时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第一次执行定时任务的时间：&quot;</span>+date);</span><br><span class="line">        <span class="comment">//如果第一次执行定时任务的时间 &lt; 当前的时间</span></span><br><span class="line">        <span class="comment">//此时第一次执行定时任务的时间 + 1 day，以便此任务在下个时间点执行。如果不加一天，任务会立即执行。循环执行的周期则以当前时间为准</span></span><br><span class="line">        <span class="keyword">if</span> (date.before(<span class="keyword">new</span> Date())) &#123;</span><br><span class="line">            date = <span class="keyword">this</span>.addDay(date, <span class="number">1</span>);</span><br><span class="line">            System.out.println(date);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line"></span><br><span class="line">        Task task = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="comment">//安排指定的任务在指定的时间开始进行重复的固定延迟执行。</span></span><br><span class="line">        timer.schedule(task,date,Constants.PERIOD_DAY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加或减少天数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">addDay</span><span class="params">(Date date, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        Calendar startDT = Calendar.getInstance();</span><br><span class="line">        startDT.setTime(date);</span><br><span class="line">        startDT.add(Calendar.DAY_OF_MONTH, num);</span><br><span class="line">        <span class="keyword">return</span> startDT.getTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>定义一个任务类Task，用于执行定时任务</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.util.crawler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zqy.service.qa.QAService;</span><br><span class="line"><span class="keyword">import</span> com.zqy.service.qa.impl.QAServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.zqy.util.Constants;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">//爬取新冠肺炎问答，写入数据库</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前爬取页号为：&quot;</span>+ Constants.page);</span><br><span class="line">        Spider spider = <span class="keyword">new</span> Spider();</span><br><span class="line">        ArrayList&lt;ArrayList&lt;String&gt;&gt; qaArray = spider.spiderQuestionAndAnswer(Constants.page);</span><br><span class="line">        <span class="comment">//更新页号</span></span><br><span class="line">        Constants.page += <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//调用业务层代码</span></span><br><span class="line">        QAService qaService = <span class="keyword">new</span> QAServiceImpl();</span><br><span class="line">        qaService.updateQA(qaArray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="5-运行测试，略"><a href="#5-运行测试，略" class="headerlink" title="5. 运行测试，略"></a>5. 运行测试，略</h5><h4 id="2）QADao接口的编写"><a href="#2）QADao接口的编写" class="headerlink" title="2）QADao接口的编写"></a>2）QADao接口的编写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.dao.qa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zqy.pojo.QA;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QADao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//存入问题-答案</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateQA</span><span class="params">(Connection conn, String question, String answer)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">    <span class="comment">//根据问题，搜索答案</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getBestAns</span><span class="params">(Connection conn, String question)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">    <span class="comment">//根据问题id，搜索答案</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAns</span><span class="params">(Connection conn, <span class="keyword">int</span> id)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">    <span class="comment">//根据页面大小，获取页数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage</span><span class="params">(Connection connection, <span class="keyword">int</span> pageSize)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">    <span class="comment">//根据页面大小和当前页，获取对应的问题-答案列表</span></span><br><span class="line">    <span class="function">List&lt;QA&gt; <span class="title">findAllQA</span><span class="params">(Connection connection, <span class="keyword">int</span> pageSize, <span class="keyword">int</span> currentPage)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3）接口实现类QADaoImpl的编写"><a href="#3）接口实现类QADaoImpl的编写" class="headerlink" title="3）接口实现类QADaoImpl的编写"></a>3）接口实现类QADaoImpl的编写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.dao.qa.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zqy.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.zqy.dao.qa.QADao;</span><br><span class="line"><span class="keyword">import</span> com.zqy.pojo.QA;</span><br><span class="line"><span class="keyword">import</span> com.zqy.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.zqy.service.qa.QAService;</span><br><span class="line"><span class="keyword">import</span> com.zqy.service.qa.impl.QAServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.zqy.util.Constants;</span><br><span class="line"><span class="keyword">import</span> com.zqy.util.textSimilarity.CosineSimilarity;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QADaoImpl</span> <span class="keyword">implements</span> <span class="title">QADao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateQA</span><span class="params">(Connection conn, String question, String answer)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String sql = <span class="string">&quot;insert ignore into covid(question,answer,creationDate) VALUES (?,?,?)&quot;</span>;</span><br><span class="line">            pstm = conn.prepareStatement(sql);</span><br><span class="line">            pstm.setString(<span class="number">1</span>, question);</span><br><span class="line">            pstm.setString(<span class="number">2</span>, answer);</span><br><span class="line">            pstm.setTimestamp(<span class="number">3</span>, <span class="keyword">new</span> Timestamp(System.currentTimeMillis()));</span><br><span class="line">            <span class="keyword">if</span>(pstm.executeUpdate() == <span class="number">1</span>)&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            BaseDao.closeResource(<span class="keyword">null</span>,pstm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getBestAns</span><span class="params">(Connection conn, String question)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        ArrayList&lt;String&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String sql = <span class="string">&quot;select * from covid&quot;</span>;</span><br><span class="line">            pstm = conn.prepareStatement(sql);</span><br><span class="line">            rs = pstm.executeQuery();</span><br><span class="line">            <span class="comment">//获取最高分</span></span><br><span class="line">            <span class="keyword">double</span> maxScore = <span class="number">0.0</span>;</span><br><span class="line">            <span class="comment">//满分</span></span><br><span class="line">            <span class="keyword">double</span> fullScore = <span class="number">1.0</span>;</span><br><span class="line">            <span class="keyword">long</span> fullScoreToLong = Double.doubleToLongBits(fullScore);</span><br><span class="line">            <span class="comment">//设置最佳答案数量</span></span><br><span class="line">            <span class="keyword">int</span> bestAnsNum = Constants.bestAnsNum;</span><br><span class="line">            List&lt;HashMap&lt;String,Object&gt;&gt; lst = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                <span class="keyword">double</span> similarityScore = CosineSimilarity.getSimilarity(rs.getString(<span class="string">&quot;question&quot;</span>),question);</span><br><span class="line">                HashMap&lt;String,Object&gt; hm = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                hm.put(<span class="string">&quot;question&quot;</span>,rs.getString(<span class="string">&quot;question&quot;</span>));</span><br><span class="line">                hm.put(<span class="string">&quot;score&quot;</span>,similarityScore);</span><br><span class="line">                hm.put(<span class="string">&quot;id&quot;</span>,rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                lst.add(hm);</span><br><span class="line">            &#125;</span><br><span class="line">            lst.sort((o1, o2) -&gt; &#123;</span><br><span class="line">                <span class="keyword">long</span> score1 = Double.doubleToLongBits((Double) o1.get(<span class="string">&quot;score&quot;</span>));</span><br><span class="line">                <span class="keyword">long</span> score2 = Double.doubleToLongBits((Double) o2.get(<span class="string">&quot;score&quot;</span>));</span><br><span class="line">                <span class="keyword">if</span> (score1 &gt; score2) &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score1 &lt; score2) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bestAnsNum; i++) &#123;</span><br><span class="line">                StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                sb.append(<span class="string">&quot;问题：&quot;</span>+lst.get(i).get(<span class="string">&quot;question&quot;</span>)+<span class="string">&quot;\n&quot;</span>);<span class="comment">//添加问题</span></span><br><span class="line">                sb.append(<span class="string">&quot;答案：&quot;</span>+getAns(conn, (Integer) lst.get(i).get(<span class="string">&quot;id&quot;</span>))+<span class="string">&#x27;\n&#x27;</span>);<span class="comment">//添加答案</span></span><br><span class="line">                sb.append(<span class="string">&quot;答案评分：&quot;</span>+lst.get(i).get(<span class="string">&quot;score&quot;</span>)+<span class="string">&quot;\n\n&quot;</span>);<span class="comment">//添加评分</span></span><br><span class="line">                ans.add(sb.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            BaseDao.closeResource(<span class="keyword">null</span>,pstm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAns</span><span class="params">(Connection conn, <span class="keyword">int</span> id)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        String ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String sql = <span class="string">&quot;select answer from covid where id = ?&quot;</span>;</span><br><span class="line">            Object[] params = &#123;id&#125;;</span><br><span class="line">            rs = BaseDao.execute(conn,pstm,rs,sql,params);</span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">                ans = rs.getString(<span class="string">&quot;answer&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            BaseDao.closeResource(<span class="keyword">null</span>,pstm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage</span><span class="params">(Connection conn, <span class="keyword">int</span> pageSize)</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> totalNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> totalPage = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String sql = <span class="string">&quot;select count(*) from covid&quot;</span>;</span><br><span class="line">            pstm = conn.prepareStatement(sql);</span><br><span class="line">            rs = pstm.executeQuery();</span><br><span class="line">            <span class="keyword">if</span> (rs.next())&#123;</span><br><span class="line">                totalNum = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(totalNum % pageSize == <span class="number">0</span>)&#123;</span><br><span class="line">                totalPage = totalNum / pageSize;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                totalPage = totalNum / pageSize + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            BaseDao.closeResource(<span class="keyword">null</span>,pstm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totalPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;QA&gt; <span class="title">findAllQA</span><span class="params">(Connection conn, <span class="keyword">int</span> pageSize, <span class="keyword">int</span> currentPage)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;QA&gt; qaList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String sql = <span class="string">&quot;select * from covid limit ?, ?&quot;</span>;</span><br><span class="line">            Object[] params = &#123;(currentPage-<span class="number">1</span>)*pageSize,pageSize&#125;;</span><br><span class="line">            rs = BaseDao.execute(conn,pstm,rs,sql,params);</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                QA qa = <span class="keyword">new</span> QA();</span><br><span class="line">                qa.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                qa.setQuestion(rs.getString(<span class="string">&quot;question&quot;</span>));</span><br><span class="line">                qa.setAnswer(rs.getString(<span class="string">&quot;answer&quot;</span>));</span><br><span class="line">                qaList.add(qa);</span><br><span class="line">            &#125;</span><br><span class="line">            BaseDao.closeResource(<span class="keyword">null</span>,pstm,rs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> qaList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4）QAService业务层接口的编写"><a href="#4）QAService业务层接口的编写" class="headerlink" title="4）QAService业务层接口的编写"></a>4）QAService业务层接口的编写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.service.qa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zqy.pojo.QA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QAService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//一次更新多条数据，规定：传入参数为一个数组，数据元素仍为一个数组：第一个元素为问题，第二个元素为答案</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateQA</span><span class="params">(ArrayList&lt;ArrayList&lt;String&gt;&gt; qaArray)</span></span>;</span><br><span class="line">    <span class="comment">//根据问题，搜索答案</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getBestAns</span><span class="params">(String question)</span></span>;</span><br><span class="line">    <span class="comment">//根据页面大小，计算页数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage</span><span class="params">(<span class="keyword">int</span> pageSize)</span></span>;</span><br><span class="line">    <span class="comment">//根据页面大小和当前页，获取对应的问题-答案列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;QA&gt; <span class="title">findAllQA</span><span class="params">(<span class="keyword">int</span> pageSize, <span class="keyword">int</span> currentPage)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5）接口实现类QAServiceImpl的编写"><a href="#5）接口实现类QAServiceImpl的编写" class="headerlink" title="5）接口实现类QAServiceImpl的编写"></a>5）接口实现类QAServiceImpl的编写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.service.qa.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zqy.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.zqy.dao.qa.QADao;</span><br><span class="line"><span class="keyword">import</span> com.zqy.dao.qa.impl.QADaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.zqy.pojo.QA;</span><br><span class="line"><span class="keyword">import</span> com.zqy.service.qa.QAService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QAServiceImpl</span> <span class="keyword">implements</span> <span class="title">QAService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//引入Dao</span></span><br><span class="line">    <span class="keyword">private</span> QADao qaDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QAServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        qaDao = <span class="keyword">new</span> QADaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateQA</span><span class="params">(ArrayList&lt;ArrayList&lt;String&gt;&gt; qaArray)</span> </span>&#123;</span><br><span class="line">        Connection connection = BaseDao.getConn();</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//通过业务层调用对应的具体的数据库操作</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; qaArray.size(); i++) &#123;</span><br><span class="line">                String question = qaArray.get(i).get(<span class="number">0</span>);</span><br><span class="line">                String answer = qaArray.get(i).get(<span class="number">1</span>);</span><br><span class="line">                flag = qaDao.updateQA(connection,question,answer);</span><br><span class="line">                <span class="keyword">if</span>(flag)&#123;<span class="comment">//若执行成功</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;已完成数据载入：&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot; question:&quot;</span>+question);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">getBestAns</span><span class="params">(String question)</span> </span>&#123;</span><br><span class="line">        Connection connection = BaseDao.getConn();</span><br><span class="line">        ArrayList&lt;String&gt; ans = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//通过业务层调用对应的具体的数据库操作</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ans = qaDao.getBestAns(connection,question);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        Connection connection = BaseDao.getConn();</span><br><span class="line">        <span class="keyword">int</span> totalPage = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//通过业务层调用对应的具体的数据库操作</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            totalPage = qaDao.getTotalPage(connection,pageSize);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totalPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;QA&gt; <span class="title">findAllQA</span><span class="params">(<span class="keyword">int</span> pageSize, <span class="keyword">int</span> currentPage)</span> </span>&#123;</span><br><span class="line">        Connection connection = BaseDao.getConn();</span><br><span class="line">        List&lt;QA&gt; qaList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//通过业务层调用对应的具体的数据库操作</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            qaList = qaDao.findAllQA(connection,pageSize,currentPage);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> qaList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6）问答模块Servlet层的编写"><a href="#6）问答模块Servlet层的编写" class="headerlink" title="6）问答模块Servlet层的编写"></a>6）问答模块Servlet层的编写</h4><h5 id="1-SearchServlet的编写，负责处理用户的问题搜索请求（加入了自然语言处理，在数据库中进行问题的相似度匹配）"><a href="#1-SearchServlet的编写，负责处理用户的问题搜索请求（加入了自然语言处理，在数据库中进行问题的相似度匹配）" class="headerlink" title="1. SearchServlet的编写，负责处理用户的问题搜索请求（加入了自然语言处理，在数据库中进行问题的相似度匹配）"></a>1. SearchServlet的编写，负责处理用户的问题搜索请求（加入了自然语言处理，在数据库中进行问题的相似度匹配）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.servlet.qa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zqy.service.qa.QAService;</span><br><span class="line"><span class="keyword">import</span> com.zqy.service.qa.impl.QAServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.zqy.service.user.UserService;</span><br><span class="line"><span class="keyword">import</span> com.zqy.service.user.impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//Servlet：控制层、调用业务层代码</span></span><br><span class="line">        QAService qaService = <span class="keyword">new</span> QAServiceImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取前端输入的问题</span></span><br><span class="line">        String quesion = req.getParameter(<span class="string">&quot;question&quot;</span>);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;question&quot;</span>,quesion);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取最佳答案字符串数组，包括问题、答案、答案评分</span></span><br><span class="line">        ArrayList&lt;String&gt; bestAns = qaService.getBestAns(quesion);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录最高分数，用来输出提示信息</span></span><br><span class="line">        String score = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//页面前端显示答案：这里选择直接用字符串拼接的方式，输出一个大字符串</span></span><br><span class="line">        String showAns = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bestAns.size(); i++) &#123;</span><br><span class="line">            String qas = bestAns.get(i);<span class="comment">//存放：问题、答案、评分</span></span><br><span class="line">            sb.append(qas);</span><br><span class="line">            <span class="comment">//获取最高的评分</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                score = qas.substring(qas.toString().lastIndexOf(<span class="string">&quot;：&quot;</span>)+<span class="number">1</span>).trim();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(score!= <span class="keyword">null</span> &amp;&amp; score.equals(<span class="string">&quot;1.0&quot;</span>))&#123;</span><br><span class="line">            req.setAttribute(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;已找到精确答案!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            req.setAttribute(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;已找到近似答案!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        showAns = sb.toString();</span><br><span class="line">        req.setAttribute(<span class="string">&quot;answer&quot;</span>,showAns);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;search.jsp&quot;</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-ShowQAServlet的编写，负责向前端展示数据库的部分信息。"><a href="#2-ShowQAServlet的编写，负责向前端展示数据库的部分信息。" class="headerlink" title="2. ShowQAServlet的编写，负责向前端展示数据库的部分信息。"></a>2. ShowQAServlet的编写，负责向前端展示数据库的部分信息。</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.servlet.qa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zqy.pojo.QA;</span><br><span class="line"><span class="keyword">import</span> com.zqy.service.qa.QAService;</span><br><span class="line"><span class="keyword">import</span> com.zqy.service.qa.impl.QAServiceImpl;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowQAServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String cp = req.getParameter(<span class="string">&quot;currentPage&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> currentPage = Integer.parseInt(cp);</span><br><span class="line">        <span class="keyword">if</span>(currentPage&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            currentPage = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        QAService qaService = <span class="keyword">new</span> QAServiceImpl();</span><br><span class="line">        <span class="keyword">int</span> totalPage = qaService.getTotalPage(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(currentPage&gt;totalPage)&#123;</span><br><span class="line">            currentPage = totalPage;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;QA&gt; qaList = qaService.findAllQA(<span class="number">10</span>, currentPage);</span><br><span class="line"></span><br><span class="line">        req.setAttribute(<span class="string">&quot;currentPage&quot;</span>, currentPage);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;totalPage&quot;</span>, totalPage);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;qaList&quot;</span>, qaList);</span><br><span class="line"></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;showQA.jsp&quot;</span>).forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-对应在web-xml文件中添加请求映射-1"><a href="#3-对应在web-xml文件中添加请求映射-1" class="headerlink" title="3. 对应在web.xml文件中添加请求映射"></a>3. 对应在web.xml文件中添加请求映射</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SearchServlet从数据库搜索问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SearchServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zqy.servlet.qa.SearchServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SearchServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/search<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--显示数据库信息到页面中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ShowQAServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zqy.servlet.qa.ShowQAServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ShowQAServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/show<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="7）前端jsp页面代码"><a href="#7）前端jsp页面代码" class="headerlink" title="7）前端jsp页面代码"></a>7）前端jsp页面代码</h4><h5 id="1-main-jsp"><a href="#1-main-jsp" class="headerlink" title="1. main.jsp"></a>1. main.jsp</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;My JSP &#x27;main.jsp&#x27; starting page&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;frameset rows=<span class="string">&quot;25%,*&quot;</span> border=<span class="string">&quot;5px&quot;</span> bordercolor=<span class="string">&quot;black&quot;</span> frameborder=<span class="string">&quot;yes&quot;</span>&gt;</span><br><span class="line">   &lt;frame src=<span class="string">&quot;top.jsp&quot;</span> name=<span class="string">&quot;top&quot;</span> noresize scrolling=<span class="string">&quot;no&quot;</span>/&gt;</span><br><span class="line">   &lt;frameset cols=<span class="string">&quot;15%,*&quot;</span>&gt;</span><br><span class="line">      &lt;frame src=<span class="string">&quot;left.jsp&quot;</span> name=<span class="string">&quot;left&quot;</span> noresize/&gt;</span><br><span class="line">      &lt;frame src=<span class="string">&quot;updatePassword.jsp&quot;</span> name=<span class="string">&quot;right&quot;</span>/&gt;</span><br><span class="line">   &lt;/frameset&gt;</span><br><span class="line">  &lt;/frameset&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h5 id="2-left-jsp"><a href="#2-left-jsp" class="headerlink" title="2. left.jsp"></a>2. left.jsp</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt; </span><br><span class="line">    &lt;title&gt;My JSP &#x27;left.jsp&#x27; starting page&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">   ul&#123;</span><br><span class="line">      list-style-type:none;</span><br><span class="line">      &lt;!--background-color:#1D9BE7;--&gt;</span><br><span class="line">      border:2px solid purple;</span><br><span class="line">      width:120px;</span><br><span class="line">      height:240px;</span><br><span class="line">   &#125;</span><br><span class="line">   ul li&#123;</span><br><span class="line">      padding:15px;</span><br><span class="line">   &#125;</span><br><span class="line">   a&#123;</span><br><span class="line">      text-decoration: none;</span><br><span class="line">      color:black;</span><br><span class="line">   &#125;</span><br><span class="line">   a:HOVER &#123;</span><br><span class="line">      text-decoration:underline;</span><br><span class="line">      color:red;</span><br><span class="line">   &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">  &lt;body bgcolor=<span class="string">&quot;#ffdead&quot;</span>&gt;</span><br><span class="line">       &lt;ul&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href=&quot;search.jsp&quot; target=&quot;right&quot;&gt;问题搜索&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href=&quot;show?currentPage=1&quot; target=&quot;right&quot;&gt;常见问题&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href=&quot;updatePassword.jsp&quot; target=&quot;right&quot;&gt;密码修改&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href=&quot;https://coderzqy.github.io/&quot; target=&quot;main&quot;&gt;友情链接&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href=&quot;javascript:void(0)&quot;&gt;帮助&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">       &lt;/ul&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h5 id="3-top-jsp"><a href="#3-top-jsp" class="headerlink" title="3. top.jsp"></a>3. top.jsp</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;utf-8&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt; </span><br><span class="line">    &lt;title&gt;My JSP &#x27;top.jsp&#x27; starting page&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">   h1&#123;</span><br><span class="line">      font-size:45px;</span><br><span class="line">      font-family:华文行楷;</span><br><span class="line">      color:black</span><br><span class="line">   &#125;</span><br><span class="line">   #time&#123;</span><br><span class="line">      position:absolute;</span><br><span class="line">      left:<span class="number">75</span>%;</span><br><span class="line">   &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">  &lt;body bgcolor=<span class="string">&quot;#ffdead&quot;</span> onload=<span class="string">&quot;getNowTime()&quot;</span>&gt;</span><br><span class="line">    &lt;div style=&quot;text-align: center;&quot;&gt;&lt;h1&gt;新冠肺炎知识与防护自动问答系统&lt;br&gt;(COVID-19 Intelligent QA System)&lt;/h1&gt;&lt;/div&gt;</span><br><span class="line">    &lt;span style=&quot;text-indent:3cm&quot;&gt;欢迎你，$&#123;userSession.userName&#125;&lt;/span&gt;</span><br><span class="line">    &lt;span id=&quot;time&quot;&gt;当前时间: &lt;span id=&quot;nowtime&quot;&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;javascript:window.location.replace(&#x27;loginAndRegister.jsp&#x27;)&quot; target=&quot;_top&quot;&gt;退出系统&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="function">function <span class="title">getNowTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="comment">//获得显示时间的位置</span></span><br><span class="line">         <span class="keyword">var</span> showtime = document.getElementById(<span class="string">&quot;nowtime&quot;</span>);</span><br><span class="line">         <span class="comment">//获取当前系统时间</span></span><br><span class="line">         <span class="keyword">var</span> date = <span class="keyword">new</span> Date();</span><br><span class="line">         <span class="comment">//获取年月日时分秒</span></span><br><span class="line">         <span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line">         <span class="keyword">var</span> month = date.getMonth()+<span class="number">1</span>;</span><br><span class="line">         <span class="keyword">if</span>(month.toString().length  &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            month = <span class="string">&quot;0&quot;</span>+month;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">var</span> day = date.getDate();</span><br><span class="line">         <span class="keyword">if</span>(day.toString().length  &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            day = <span class="string">&quot;0&quot;</span>+day;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">var</span> hour = date.getHours();</span><br><span class="line">         <span class="keyword">if</span>(hour.toString().length  &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            hour = <span class="string">&quot;0&quot;</span>+hour;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">var</span> minu = date.getMinutes();</span><br><span class="line">         <span class="keyword">if</span>(minu.toString().length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            minu = <span class="string">&quot;0&quot;</span>+minu;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">var</span> second = date.getSeconds();</span><br><span class="line">         <span class="keyword">if</span>(second.toString().length &lt;<span class="number">2</span>)&#123;</span><br><span class="line">            second = <span class="string">&quot;0&quot;</span>+second;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">var</span> nowtime = year+<span class="string">&quot;/&quot;</span>+month+<span class="string">&quot;/&quot;</span>+day+<span class="string">&quot; &quot;</span>+hour+<span class="string">&quot;:&quot;</span>+minu+<span class="string">&quot;:&quot;</span>+second;</span><br><span class="line">         showtime.innerHTML=<span class="string">&quot;&lt;font color=&#x27;black&#x27;&gt;&quot;</span>+nowtime+<span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">         window.setTimeout(<span class="string">&quot;getNowTime()&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h5 id="4-search-jsp"><a href="#4-search-jsp" class="headerlink" title="4. search.jsp"></a>4. search.jsp</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=utf-8&quot;</span> pageEncoding=<span class="string">&quot;utf-8&quot;</span>%&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String path = request.getContextPath();</span><br><span class="line">    String basePath = request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;My JSP &#x27;updatePassword.jsp&#x27; starting page&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .input&#123;</span><br><span class="line">        height:30px;</span><br><span class="line">        width:600px;</span><br><span class="line">        font-size:20px;</span><br><span class="line">        align:<span class="string">&quot;center&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    .btn&#123;</span><br><span class="line">        cursor:pointer;</span><br><span class="line">        height:30px;</span><br><span class="line">        width:70px;</span><br><span class="line">        font-size:20px;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">        border:<span class="number">0</span>;</span><br><span class="line">        background-color: green;</span><br><span class="line">        color:white;</span><br><span class="line">    &#125;</span><br><span class="line">    .boxes&#123;</span><br><span class="line">        font-size:18px;</span><br><span class="line">        color:rebeccapurple;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body bgcolor=<span class="string">&quot;#f5f5f5&quot;</span>&gt;</span><br><span class="line">&lt;form onsubmit=<span class="string">&quot;return check()&quot;</span> name=<span class="string">&quot;form1&quot;</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th colspan=&quot;2&quot; style=&quot;font-size:25;font-style: oblique&quot;&gt;新冠肺炎知识搜索&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th colspan=&quot;2&quot; style=&quot;color:red&quot;&gt;$&#123;flag&#125;&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;question&quot; class=&quot;input&quot; value=&quot;$&#123;question&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;搜索&quot; class=&quot;btn&quot;/&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td width=&quot;200px&quot; id=&quot;e1&quot; style=&quot;color:red;font-weight:bold&quot;&gt;$&#123;error&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;textarea rows=&quot;20&quot; cols=&quot;120&quot; readonly=&quot;readonly&quot; class=&quot;boxes&quot;&gt;$&#123;answer&#125;&lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function">function <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获得当前表单对象</span></span><br><span class="line">        <span class="keyword">var</span> form1 = document.form1;</span><br><span class="line">        <span class="comment">//获得问题</span></span><br><span class="line">        <span class="keyword">var</span> question = form1.question.value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> e1 = document.getElementById(<span class="string">&quot;e1&quot;</span>);</span><br><span class="line">        <span class="comment">//判断问题是否填写</span></span><br><span class="line">        <span class="keyword">if</span>(question.length &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            e1.innerText=<span class="string">&quot;问题不能为空&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            e1.innerText=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        form1.action=<span class="string">&quot;/search&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h5 id="5-showQA-jsp"><a href="#5-showQA-jsp" class="headerlink" title="5. showQA.jsp"></a>5. showQA.jsp</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String path = request.getContextPath();</span><br><span class="line">    String basePath = request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;My JSP &#x27;showQA.jsp.jsp&#x27; starting page&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body bgcolor=<span class="string">&quot;#f5f5f5&quot;</span>&gt;</span><br><span class="line">        &lt;form&gt;</span><br><span class="line">            &lt;table border=<span class="string">&quot;1&quot;</span> cellpadding=<span class="string">&quot;0&quot;</span> cellspacing=<span class="string">&quot;0&quot;</span> bordercolor=<span class="string">&quot;black&quot;</span> width=<span class="string">&quot;800px&quot;</span>&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th colspan=&quot;5&quot;&gt;新冠知识数据库信息&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;问题&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;答案&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;c:forEach items=<span class="string">&quot;$&#123;qaList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;qa&quot;</span>&gt;</span><br><span class="line">                    &lt;tr onmouseover=<span class="string">&quot;this.bgColor=&#x27;lightblue&#x27;&quot;</span> onmouseout=<span class="string">&quot;this.bgColor=&#x27;&#x27;&quot;</span> style=<span class="string">&quot;cursor:pointer&quot;</span>&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;qa.id&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;qa.question&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;qa.answer&#125;&lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &lt;/c:forEach&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td align=<span class="string">&quot;right&quot;</span> colspan=<span class="string">&quot;5&quot;</span>&gt;</span><br><span class="line">                        &lt;a href=&quot;show?currentPage=1&quot;&gt;首页&lt;/a&gt;</span><br><span class="line">                        &lt;a href=&quot;show?currentPage=$&#123;currentPage-1&#125;&quot;&gt;上一页&lt;/a&gt;</span><br><span class="line">                        &lt;a href=&quot;show?currentPage=$&#123;currentPage+1&#125;&quot;&gt;下一页&lt;/a&gt;</span><br><span class="line">                        &lt;a href=&quot;show?currentPage=$&#123;totalPage&#125;&quot;&gt;尾页&lt;/a&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>


<h4 id="8）自然语言处理（NLP）"><a href="#8）自然语言处理（NLP）" class="headerlink" title="8）自然语言处理（NLP）"></a>8）自然语言处理（NLP）</h4><p>采用余弦相似度计算字符串相似度的方式，将用户输入的问题和数据库中已有的问题进行匹配，本系统选择将相似度最高的三个可能答案作为最佳答案返回，输出到前端显示。</p>
<h5 id="1-理论知识"><a href="#1-理论知识" class="headerlink" title="1. 理论知识"></a>1. 理论知识</h5><p>核心公式：</p>
<p><img src="/2021/03/19/COVID-19-QA-System/image-20210319181142222.png" alt="image-20210319181142222"></p>
<p>余弦值越接近1，也就是两个向量越相似，这就叫”余弦相似性”，<br>余弦值越接近0，也就是两个向量越不相似，也就是这两个字符串越不相似。</p>
<h5 id="2-计算过程示例"><a href="#2-计算过程示例" class="headerlink" title="2. 计算过程示例"></a>2. 计算过程示例</h5><p>举一个例子来说明，用上述理论计算文本的相似性。为了简单起见，先从句子着手。</p>
<p><strong>句子A</strong>：这只皮靴号码大了。那只号码合适。</p>
<p><strong>句子B</strong>：这只皮靴号码不小，那只更合适。</p>
<p>怎样计算上面两句话的相似程度？</p>
<p>基本思路是：如果这两句话的用词越相似，它们的内容就应该越相似。因此，可以从词频入手，计算它们的相似程度。</p>
<p><strong>第一步：分词</strong></p>
<p>句子A：这只/皮靴/号码/大了。那只/号码/合适。</p>
<p>句子B：这只/皮靴/号码/不/小，那只/更/合适。</p>
<p><strong>第二步：计算词频</strong>（也就是每个词语出现的频率）</p>
<p>句子A：这只1，皮靴1，号码2，大了1。那只1，合适1，不0，小0，更0</p>
<p>句子B：这只1，皮靴1，号码1，大了0。那只1，合适1，不1，小1，更1</p>
<p><strong>第三步：写出词频向量</strong></p>
<p>　　句子A：(1，1，2，1，1，1，0，0，0)</p>
<p>　　句子B：(1，1，1，0，1，1，1，1，1)</p>
<p><strong>第四步：计算cos值</strong></p>
<p><img src="/2021/03/19/COVID-19-QA-System/1090617-20180815214345288-1095555724.png" alt="img"></p>
<p>计算结果中夹角的余弦值为0.81非常接近于1，所以，上面的句子A和句子B是基本相似的</p>
<h5 id="3-代码编写"><a href="#3-代码编写" class="headerlink" title="3. 代码编写"></a>3. 代码编写</h5><ul>
<li>用到的jar包（maven依赖）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--结合操作工具包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--bean实体注解工具包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--汉语言包，主要用于分词--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hankcs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hanlp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>portable-1.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--用于集合操作--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>分词工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.util.textSimilarity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hankcs.hanlp.HanLP;</span><br><span class="line"><span class="keyword">import</span> com.hankcs.hanlp.seg.common.Term;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**中文分词工具类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tokenizer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**分词*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Word&gt; <span class="title">segment</span><span class="params">(String sentence)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、 采用HanLP中文自然语言处理中标准分词进行分词</span></span><br><span class="line">        List&lt;Term&gt; termList = HanLP.segment(sentence);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上面控制台打印信息就是这里输出的</span></span><br><span class="line">        <span class="comment">//System.out.println(termList.toString());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、重新封装到Word对象中（term.word代表分词后的词语，term.nature代表改词的词性）</span></span><br><span class="line">        <span class="keyword">return</span> termList.stream().map(term -&gt; <span class="keyword">new</span> Word(term.word, term.nature.toString())).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Word类用于封装分词结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.util.textSimilarity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**封装分词结果*/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Word</span> <span class="keyword">implements</span> <span class="title">Comparable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 词名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 词性</span></span><br><span class="line">    <span class="keyword">private</span> String pos;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 权重，用于词向量分析</span></span><br><span class="line">    <span class="keyword">private</span> Float weight;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPos</span><span class="params">(String pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pos = pos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(Float weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Word</span><span class="params">(String name, String pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pos = pos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (getClass() != obj.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Word other = (Word) obj;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(<span class="keyword">this</span>.name, other.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</span><br><span class="line">            str.append(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pos != <span class="keyword">null</span>) &#123;</span><br><span class="line">            str.append(<span class="string">&quot;/&quot;</span>).append(pos);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.name == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Word)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String t = ((Word) o).getName();</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>编写相似率具体实现工具类CosineSimilarity</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.util.textSimilarity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判定方式：余弦相似度，通过计算两个向量的夹角余弦值来评估他们的相似度 余弦夹角原理： 向量a=(x1,y1),向量b=(x2,y2) similarity=a.b/|a|*|b| a.b=x1x2+y1y2</span></span><br><span class="line"><span class="comment"> * |a|=根号[(x1)^2+(y1)^2],|b|=根号[(x2)^2+(y2)^2]*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CosineSimilarity</span> </span>&#123;</span><br><span class="line">    <span class="comment">//protected static final Logger LOGGER = LoggerFactory.getLogger(CosineSimilarity.class);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、计算两个字符串的相似度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getSimilarity</span><span class="params">(String text1, String text2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果为空，或者字符长度为0，则代表完全相同</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(text1) &amp;&amp; StringUtils.isBlank(text2)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果一个为0或者空，一个不为，那说明完全不相似</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(text1) || StringUtils.isBlank(text2)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这个代表如果两个字符串相等那当然返回1了（这个我为了让它也分词计算一下，所以注释掉了）</span></span><br><span class="line">        <span class="keyword">if</span> (text1.equalsIgnoreCase(text2)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第一步：进行分词</span></span><br><span class="line">        List&lt;Word&gt; words1 = Tokenizer.segment(text1);</span><br><span class="line">        List&lt;Word&gt; words2 = Tokenizer.segment(text2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getSimilarity(words1, words2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2、对于计算出的相似度保留小数点后六位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getSimilarity</span><span class="params">(List&lt;Word&gt; words1, List&lt;Word&gt; words2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> score = getSimilarityImpl(words1, words2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(int) (score * 1000000 + 0.5)其实代表保留小数点后六位 ,因为1034234.213强制转换不就是1034234。对于强制转换添加0.5就等于四舍五入</span></span><br><span class="line">        score = (<span class="keyword">int</span>) (score * <span class="number">1000000</span> + <span class="number">0.5</span>) / (<span class="keyword">double</span>) <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本相似度计算 判定方式：余弦相似度，通过计算两个向量的夹角余弦值来评估他们的相似度 余弦夹角原理： 向量a=(x1,y1),向量b=(x2,y2) similarity=a.b/|a|*|b| a.b=x1x2+y1y2</span></span><br><span class="line"><span class="comment">     * |a|=根号[(x1)^2+(y1)^2],|b|=根号[(x2)^2+(y2)^2]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getSimilarityImpl</span><span class="params">(List&lt;Word&gt; words1, List&lt;Word&gt; words2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向每一个Word对象的属性都注入weight（权重）属性值</span></span><br><span class="line">        taggingWeightByFrequency(words1, words2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二步：计算词频</span></span><br><span class="line">        <span class="comment">//通过上一步让每个Word对象都有权重值，那么在封装到map中（key是词，value是该词出现的次数（即权重））</span></span><br><span class="line">        Map&lt;String, Float&gt; weightMap1 = getFastSearchMap(words1);</span><br><span class="line">        Map&lt;String, Float&gt; weightMap2 = getFastSearchMap(words2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将所有词都装入set容器中</span></span><br><span class="line">        Set&lt;Word&gt; words = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        words.addAll(words1);</span><br><span class="line">        words.addAll(words2);</span><br><span class="line"></span><br><span class="line">        AtomicFloat ab = <span class="keyword">new</span> AtomicFloat();<span class="comment">// a.b</span></span><br><span class="line">        AtomicFloat aa = <span class="keyword">new</span> AtomicFloat();<span class="comment">// |a|的平方</span></span><br><span class="line">        AtomicFloat bb = <span class="keyword">new</span> AtomicFloat();<span class="comment">// |b|的平方</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三步：写出词频向量，后进行计算</span></span><br><span class="line">        words.parallelStream().forEach(word -&gt; &#123;</span><br><span class="line">            <span class="comment">//看同一词在a、b两个集合出现的此次</span></span><br><span class="line">            Float x1 = weightMap1.get(word.getName());</span><br><span class="line">            Float x2 = weightMap2.get(word.getName());</span><br><span class="line">            <span class="keyword">if</span> (x1 != <span class="keyword">null</span> &amp;&amp; x2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//x1x2</span></span><br><span class="line">                <span class="keyword">float</span> oneOfTheDimension = x1 * x2;</span><br><span class="line">                <span class="comment">//+</span></span><br><span class="line">                ab.addAndGet(oneOfTheDimension);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//(x1)^2</span></span><br><span class="line">                <span class="keyword">float</span> oneOfTheDimension = x1 * x1;</span><br><span class="line">                <span class="comment">//+</span></span><br><span class="line">                aa.addAndGet(oneOfTheDimension);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//(x2)^2</span></span><br><span class="line">                <span class="keyword">float</span> oneOfTheDimension = x2 * x2;</span><br><span class="line">                <span class="comment">//+</span></span><br><span class="line">                bb.addAndGet(oneOfTheDimension);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//|a| 对aa开方</span></span><br><span class="line">        <span class="keyword">double</span> aaa = Math.sqrt(aa.doubleValue());</span><br><span class="line">        <span class="comment">//|b| 对bb开方</span></span><br><span class="line">        <span class="keyword">double</span> bbb = Math.sqrt(bb.doubleValue());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用BigDecimal保证精确计算浮点数</span></span><br><span class="line">        <span class="comment">//double aabb = aaa * bbb;</span></span><br><span class="line">        BigDecimal aabb = BigDecimal.valueOf(aaa).multiply(BigDecimal.valueOf(bbb));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//similarity=a.b/|a|*|b|</span></span><br><span class="line">        <span class="comment">//divide参数说明：aabb被除数,9表示小数点后保留9位，最后一个表示用标准的四舍五入法</span></span><br><span class="line">        <span class="keyword">double</span> cos = BigDecimal.valueOf(ab.get()).divide(aabb, <span class="number">9</span>, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">        <span class="keyword">return</span> cos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向每一个Word对象的属性都注入weight（权重）属性值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">taggingWeightByFrequency</span><span class="params">(List&lt;Word&gt; words1, List&lt;Word&gt; words2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (words1.get(<span class="number">0</span>).getWeight() != <span class="keyword">null</span> &amp;&amp; words2.get(<span class="number">0</span>).getWeight() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//词频统计（key是词，value是该词在这段句子中出现的次数）</span></span><br><span class="line">        Map&lt;String, AtomicInteger&gt; frequency1 = getFrequency(words1);</span><br><span class="line">        Map&lt;String, AtomicInteger&gt; frequency2 = getFrequency(words2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是DEBUG模式输出词频统计信息</span></span><br><span class="line"><span class="comment">//        if (LOGGER.isDebugEnabled()) &#123;</span></span><br><span class="line"><span class="comment">//            LOGGER.debug(&quot;词频统计1：\n&#123;&#125;&quot;, getWordsFrequencyString(frequency1));</span></span><br><span class="line"><span class="comment">//            LOGGER.debug(&quot;词频统计2：\n&#123;&#125;&quot;, getWordsFrequencyString(frequency2));</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">// 标注权重（该词出现的次数）</span></span><br><span class="line">        words1.parallelStream().forEach(word -&gt; word.setWeight(frequency1.get(word.getName()).floatValue()));</span><br><span class="line">        words2.parallelStream().forEach(word -&gt; word.setWeight(frequency2.get(word.getName()).floatValue()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计词频</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 词频统计图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, AtomicInteger&gt; <span class="title">getFrequency</span><span class="params">(List&lt;Word&gt; words)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, AtomicInteger&gt; freq = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//这步很帅哦</span></span><br><span class="line">        words.forEach(i -&gt; freq.computeIfAbsent(i.getName(), k -&gt; <span class="keyword">new</span> AtomicInteger()).incrementAndGet());</span><br><span class="line">        <span class="keyword">return</span> freq;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出：词频统计信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getWordsFrequencyString</span><span class="params">(Map&lt;String, AtomicInteger&gt; frequency)</span> </span>&#123;</span><br><span class="line">        StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (frequency != <span class="keyword">null</span> &amp;&amp; !frequency.isEmpty()) &#123;</span><br><span class="line">            AtomicInteger integer = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">            frequency.entrySet().stream().sorted((a, b) -&gt; b.getValue().get() - a.getValue().get()).forEach(</span><br><span class="line">                    i -&gt; str.append(<span class="string">&quot;\t&quot;</span>).append(integer.incrementAndGet()).append(<span class="string">&quot;、&quot;</span>).append(i.getKey()).append(<span class="string">&quot;=&quot;</span>)</span><br><span class="line">                            .append(i.getValue()).append(<span class="string">&quot;\n&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        str.setLength(str.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造权重快速搜索容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> Map&lt;String, Float&gt; <span class="title">getFastSearchMap</span><span class="params">(List&lt;Word&gt; words)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(words)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Float&gt; weightMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(words.size());</span><br><span class="line"></span><br><span class="line">        words.parallelStream().forEach(i -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.getWeight() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                weightMap.put(i.getName(), i.getWeight());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;no word weight info:&quot;</span> + i.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> weightMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>AtomicFloat原子类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zqy.util.textSimilarity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 张庆洋</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2021/3/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicFloat</span> <span class="keyword">extends</span> <span class="title">Number</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger bits;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AtomicFloat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AtomicFloat</span><span class="params">(<span class="keyword">float</span> initialValue)</span> </span>&#123;</span><br><span class="line">        bits = <span class="keyword">new</span> AtomicInteger(Float.floatToIntBits(initialValue));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//叠加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">float</span> <span class="title">addAndGet</span><span class="params">(<span class="keyword">float</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> expect;</span><br><span class="line">        <span class="keyword">float</span> update;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            expect = get();</span><br><span class="line">            update = expect + delta;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!<span class="keyword">this</span>.compareAndSet(expect, update));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> update;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">float</span> <span class="title">getAndAdd</span><span class="params">(<span class="keyword">float</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> expect;</span><br><span class="line">        <span class="keyword">float</span> update;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            expect = get();</span><br><span class="line">            update = expect + delta;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!<span class="keyword">this</span>.compareAndSet(expect, update));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> expect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">float</span> <span class="title">getAndDecrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getAndAdd(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">float</span> <span class="title">decrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addAndGet(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">float</span> <span class="title">getAndIncrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getAndAdd(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">float</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addAndGet(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">float</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">float</span> newValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> expect;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            expect = get();</span><br><span class="line">        &#125; <span class="keyword">while</span> (!<span class="keyword">this</span>.compareAndSet(expect, newValue));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> expect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">float</span> expect, <span class="keyword">float</span> update)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bits.compareAndSet(Float.floatToIntBits(expect), Float.floatToIntBits(update));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">float</span> newValue)</span> </span>&#123;</span><br><span class="line">        bits.set(Float.floatToIntBits(newValue));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">float</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Float.intBitsToFloat(bits.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">floatValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">doubleValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">double</span>) floatValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">longValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">long</span>) get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Float.toString(get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>简要总结</li>
</ul>
<p> <strong>（1）先分词：</strong> 这里通过采用HanLP中文自然语言处理中标准分词进行分词。 </p>
<p> <strong>（2）统计词频：</strong> 就统计上面词出现的次数。</p>
<p> <strong>（3）通过每一个词出现的次数，变成一个向量，通过向量公式计算相似率。</strong></p>
<h4 id="9）运行测试，略"><a href="#9）运行测试，略" class="headerlink" title="9）运行测试，略"></a>9）运行测试，略</h4><h2 id="3、系统界面"><a href="#3、系统界面" class="headerlink" title="3、系统界面"></a>3、系统界面</h2><ul>
<li>主界面：</li>
</ul>
<p><img src="/2021/03/19/COVID-19-QA-System/image-20210319201612853.png" alt="image-20210319201612853"></p>
<ul>
<li>问题搜索</li>
</ul>
<p><img src="/2021/03/19/COVID-19-QA-System/image-20210319201715863.png" alt="image-20210319201715863"></p>
<ul>
<li>常见问题</li>
</ul>
<p><img src="/2021/03/19/COVID-19-QA-System/image-20210319201753125.png" alt="image-20210319201753125"></p>
<ul>
<li>密码修改界面</li>
</ul>
<p><img src="/2021/03/19/COVID-19-QA-System/image-20210319201812105.png" alt="image-20210319201812105"></p>
<ul>
<li>问答数据库部分展示</li>
</ul>
<p><img src="/2021/03/19/COVID-19-QA-System/image-20210319201852152.png" alt="image-20210319201852152"></p>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>java爬虫</tag>
        <tag>问答系统</tag>
      </tags>
  </entry>
  <entry>
    <title>索引调优</title>
    <url>/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<h1 id="PJ——索引调优"><a href="#PJ——索引调优" class="headerlink" title="PJ——索引调优"></a>PJ——索引调优</h1><h2 id="1、任务要求"><a href="#1、任务要求" class="headerlink" title="1、任务要求"></a>1、任务要求</h2><ul>
<li><p>阅读材料：<a href="https://www.vldb.org/conf/1995/P562.PDF">J. M. Hellerstein, J. F. Naughton, A. Pfeffer. Generalized Search Trees for Database Systems. In VLDB 1995.</a></p>
</li>
<li><p>背景描述：GiST 的意思是通用的搜索树（Generalized Search Tree），它是一种平衡树结构的访问方法，在系统中作为一个基本模版，可以使用它实现任意索引模式。B-trees、R-trees和许多其它的索引模式都可以用 GiST 实现。</p>
</li>
<li><p>作业要求：</p>
<ol>
<li><p>阅读材料的简要阅读报告 (pdf)</p>
</li>
<li><p>索引实践报告（二选一）</p>
<ol>
<li>对PG代码中的Gist使用性能进行分析，并形成报告 (pdf)<ul>
<li>PG支持快速造数据，数据量建议百万条及以上</li>
<li>主要为 <strong>Gist，B-trees，R-trees，RD-trees</strong>之间的性能比较分析，参考「参考材料2」</li>
</ul>
</li>
<li>用PG中的Gist实现一类索引，并形成报告 (pdf, source codes)<ul>
<li>可选索引：<strong>B+trees，Hash，倒排索引</strong></li>
<li>实现规范参见「参考材料3」</li>
<li>源码组织类似「参考材料4」即可，包含测试和README</li>
</ul>
</li>
</ol>
</li>
<li><p>README，标明小组人员及分工表</p>
</li>
</ol>
<ul>
<li>以上所有文件压缩在一个zip文件内，文件名「姓名1_学号1，姓名2 _学号2….zip」</li>
<li>推荐使用PostgreSQL 14.x Linux</li>
</ul>
</li>
<li><p>参考材料</p>
<ol>
<li><a href="https://www.postgresql.org/docs/current/btree-gist.html">PostgreSQL: Documentation: 14: F.7. btree_gist</a></li>
<li><a href="https://www.mengqingzhong.com/2020/10/01/postgresql-index-gist-5/">PostgreSQL索引(5) – GiST – PostgreSQL数据库内核探究 (mengqingzhong.com)</a></li>
<li><a href="https://www.postgresql.org/docs/current/gist-extensibility.html">PostgreSQL: Documentation: 14: 65.3. Extensibility</a></li>
<li><a href="https://github.com/jinyyu/tlsh_gist">jinyyu/tlsh_gist (github.com)</a></li>
</ol>
</li>
<li><p>附加说明</p>
<ul>
<li><p>小组/个人作业，每组提交一份文件，每组成员得分相同</p>
</li>
<li><p>四个作业之一，取已做作业中的最高分作为作业得分</p>
</li>
<li><p>本次作业结束后可换组</p>
</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h2 id="2、材料阅读报告"><a href="#2、材料阅读报告" class="headerlink" title="2、材料阅读报告"></a>2、材料阅读报告</h2><h3 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h3><h4 id="1、实现搜索树扩展的两种主要思路"><a href="#1、实现搜索树扩展的两种主要思路" class="headerlink" title="1、实现搜索树扩展的两种主要思路"></a>1、实现搜索树扩展的两种主要思路</h4><ol>
<li>$Specialized\space Search\space Tree$：为解决特定的问题实现专用的搜索树。问题：<strong>实现和维护搜索树的工作量巨大</strong>；随着新应用产生，需要<strong>重新开发</strong>一种搜索树</li>
<li>$Search\space Trees\space For\space Extensible\space Data\space Types$：为避免开发新的搜索树类型，扩展其支持的数据类型。问题：虽然扩展了支持的数据类型，但是并没有扩展搜索树上可支持的查询的种类，依然只能支持相等或者范围查询（<strong>不灵活</strong>）</li>
</ol>
<h4 id="2、Gist-优点"><a href="#2、Gist-优点" class="headerlink" title="2、Gist 优点"></a>2、Gist 优点</h4><ol>
<li>在支持的<u>数据类型</u>和<u>查询种类</u>方面都很容易扩展（<strong>可扩展性</strong>）</li>
<li>可以实现基于同一个代码库实现不同的索引，支持不同的应用（<strong>统一性</strong>）</li>
<li>很容易配置，为了实现不同用途的搜索树，只需要在数据库中注册 $6$ 种方法（<strong>易配置</strong>）</li>
</ol>
<h4 id="3、Gist-存在的问题"><a href="#3、Gist-存在的问题" class="headerlink" title="3、Gist 存在的问题"></a>3、Gist 存在的问题</h4><ul>
<li>$Gist$ 产生的搜索树<u>并不总是可以有效地支持查询</u>，何时以何种方式在一些非标准化的问题上构建一棵高效的查询树，仍需要进一步通过试验进行探索。</li>
</ul>
<h4 id="4、文章结构"><a href="#4、文章结构" class="headerlink" title="4、文章结构"></a>4、文章结构</h4><ul>
<li><p>第 $2$ 节：说明并概括了数据库搜索树的基本特性</p>
</li>
<li><p>第 $3$ 节：介绍了广义搜索树对象及其结构、属性和行为</p>
</li>
<li><p>第 $4$ 节：提供了三种不同类型的搜索树的 $GiST$ 实现</p>
</li>
<li><p>第 $5$ 节：介绍了一些性能结果，探讨了构建有效搜索树所涉及的问题</p>
</li>
<li><p>第 $6$ 节：检查了在成熟的 $DBMS$ 中实现 $GiST$ 时需要考虑的一些细节</p>
</li>
<li><p>第 $7$ 节：最后总结了这项工作的重要性，以及未来的研究方向</p>
</li>
</ul>
<h3 id="2-The-Gist-of-Database-Search-Trees"><a href="#2-The-Gist-of-Database-Search-Trees" class="headerlink" title="2. The Gist of Database Search Trees"></a>2. The Gist of Database Search Trees</h3><h4 id="1、搜索树介绍"><a href="#1、搜索树介绍" class="headerlink" title="1、搜索树介绍"></a>1、搜索树介绍</h4><ul>
<li>简单示意图如下：</li>
</ul>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/Sketch of a database search tree.png" alt="Sketch of a database search tree" style="zoom:80%;">

<ul>
<li><p>搜索原理：每个内部节点都包含一系列 $key$ 和 $pointer$。要搜索与查询谓词 $q$ 匹配的元组，需要从根节点开始查找。对于节点上的每个指针，如果关联的 $key$ 与 $q$ 一致，即 $key $不排除指针下方存储的数据可能匹配 $q$ 的可能性，则遍历指针下方的子树，直到找到所有匹配的数据。</p>
</li>
<li><p>$key$ 的唯一限制：必须在逻辑上匹配存储在它下面的每一个数据，以便一致性检查不会遗漏任何有效数据。在 B+tree 和 R-tree 中，$key$ 的<strong>本质</strong>是一个 <u>“包含” 谓词</u>：它描述了一个连续的区域，其中包含 $pointer$ 下的所有数据。但是，“包含” 谓词并不是唯一可能出现的关系。就像在 R-tree 中，节点上的 $key$ 可能出现 <u>“重叠” 这样的关系</u>，即一个节点上的两个 $key$ 下面可能保存着某些相同的元组。</p>
</li>
</ul>
<h4 id="2、Gist-设计思路"><a href="#2、Gist-设计思路" class="headerlink" title="2、Gist 设计思路"></a>2、Gist 设计思路</h4><ul>
<li><p>$key$ 的设计：搜索关键字 $key$ 是可以对其下的每一个数据都成立的任意谓词。如果给定这样一个灵活的数据结构，用户可以通过将数据组织成任意嵌套的子类别来自由地形成树，每一个都可以用一些特殊的谓词来标记。反过来，抓住数据库搜索树的<strong>本质</strong>：它是数据集分区的层次结构，每一个分区都有一个分类，用以保存分区中的所有数据，可以基于分类进行<u>任意谓词</u>的搜索。</p>
</li>
<li><p>谓词 $q$ 的设计：为了支持对给定谓词 $q$ 的搜索，用户必须提供一个返回布尔类型的方法来判断 $q$ 是否与给定的 $key$ 一致，搜索通过遍历与 $key$ 关联的指针来进行。当节点数据过多或者占用空间过大时，通过用户提供的分裂算法来控制数据的分组，并且可以使用用户提供的 $key$ 完成对分组的表征。因此，通过向用户公开关键方法和拆分方法，可以构建任意的搜索树，支持可扩展的查询集。</p>
</li>
</ul>
<h3 id="3-The-Generalized-Search-Tree"><a href="#3-The-Generalized-Search-Tree" class="headerlink" title="3. The Generalized  Search Tree"></a>3. The Generalized  Search Tree</h3><h4 id="3-1-structure"><a href="#3-1-structure" class="headerlink" title="3.1 structure"></a>3.1 structure</h4><p>​    $Gist$  是一颗平衡树，它的每个节点的扇出在 $kM$ 和 $M$ 之间，其中 $\frac{2}{M}\leqslant k\leqslant \frac{1}{2}$，根节点的扇出可以在 $2$ 和 $M$ 之间。其中常数 k 被称为最小填充因子，叶子节点包含 $(p,\space ptr)$ 这样的键值对，其中 $p$ 是被用作搜索关键字的谓词，而 $ptr$ 是<u>数据库中某个元组的标识符</u>。非叶子节点包含 $(p,\space ptr)$ 这样的键值对，其中 $p$ 是被用作搜索关键字的谓词，而 $ptr$ 是<u>指向另一个节点的指针</u></p>
<p>​    谓词可以包含任意数量的自由变量，只要树的叶子节点引用的任意单个元组能够装下，为了方便说明，这里假设树中的各项占用空间大小是一样的，可变大小的项在第 $6$ 节介绍。假设给定项 $E=(p,\space ptr)$ 的实现中，可以访问 $E$ 当前所在的节点</p>
<h4 id="3-2-Properties"><a href="#3-2-Properties" class="headerlink" title="3.2 Properties"></a>3.2 Properties</h4><p>以下属性在 $Gist$ 中是固定的：</p>
<ol>
<li>除了根节点外每个节点包含 $kM$ 到 $M$ 个索引项</li>
<li>每个叶节点中的索引项 $(p,\space ptr)$ 在用指定的元组实例化时，$p$ 为 $true$（即 $p$ 对元组成立）</li>
<li>每个非叶子节点中的索引项 $(p,\space ptr)$，当使用从 $ptr$ 可达的任意元组对其实例化时，$p$ 为 $true$。和 $R-tree$ 不同的是：对于某个从<br>$ptr$ 可达的索引项 $(p’,\space ptr’)$，不要求 $p’\rightarrow p$，只要 $p$ 和 $p’$ 都适用于从 $ptr’$ 可达的元组</li>
<li>根节点至少有两个子节点，除非它本身也是叶子节点</li>
<li>所有叶子节点出现在同一层</li>
</ol>
<h4 id="3-3-Key-Method"><a href="#3-3-Key-Method" class="headerlink" title="3.3 Key Method"></a>3.3 Key Method</h4><p>​    原则上，$Gist$ 中的 $key$ 可以是任意的谓词。实际使用中，$key$ 来自用户定义的对象，同时提供 $Gist$ 需要的一些方法的实现。例如， B+tree 中 $key$ 是数字类型，标识数据的范围；R-tree 中 $key$ 的类型是外接矩阵，标识区域等等。</p>
<p>​    以下 $6$ 个关键的方法，是预定义的需要用户实现的方法：</p>
<ol>
<li>$\mathbf{Consistent}(E,q)$：给定一个索引项 $E=(p,\space ptr)$ 以及一个查询谓词 $q$，如果 $p\wedge q$ 一定不满足，返回 $false$，否则返回 $true$。==注意==：这里不需要精确查找，$\mathbf{Consistent}$ 有可能产生误报，会导致不必要的子树的查询，从而<strong>影响性能</strong>，但算法<strong>正确性不受影响</strong>。</li>
<li>$\mathbf{Union}(P)$：给定一个索引项的集合 $P$，包含索引项 $(p_1,ptr_1),…,(p_n,ptr_n)$，可以通过 $(p_1\vee p_2\vee … p_n)\rightarrow r$ 的形式返回谓词 $r$，$r$ 包含 $ptr_1$ 到 $ptr_n$ 所有的元组</li>
<li>$\mathbf{Compress}(E)$：给定索引项 $E=(p,\space ptr)$，返回索引项 $(\pi,ptr)$，其中 $\pi$ 是 $p$ 的压缩表示</li>
<li>$\mathbf{Decompress}(E)$：给定一个压缩后的索引项 $E=(\pi,\space ptr)$，其中，$\pi=\mathbf{Compress}(p)$，返回一个索引项 $(r,ptr)$，满足 $p\rightarrow r$。==注意==：这可能是一种有损的压缩，因为不需要满足 $p\leftrightarrow r$</li>
<li>$\mathbf{Penalty}(E_1,E_2)$：给定两个索引项 $E_1=(p_1,\space ptr_1)$，$E_2=(p_2,\space ptr_2)$，返回一个将 $E_2$ 插入以 $E_1$ 为根的子树的代价。该方法用于辅助插入和分裂算法</li>
<li>$\mathbf{PickSplit}(P)$：给定一个包含 $M+1$ 个索引项的节点 $P$，将 $P$ 分裂为两个集合 $P_1$ 和 $P_2$，每一个至少包含 $kM$ 个索引项，通常希望以一种最优的方式进行拆分，但最终取决于用户</li>
</ol>
<h4 id="3-4-Tree-Methods"><a href="#3-4-Tree-Methods" class="headerlink" title="3.4 Tree Methods"></a>3.4 Tree Methods</h4><p>​    上一小节提到的方法需要开发者提供，本小节的方法是由 $Gist$ 提供，==注意==：$keys$ 在节点上是压缩的，从节点读取时需要解压缩，后续不在赘述。</p>
<h5 id="1-Search"><a href="#1-Search" class="headerlink" title="1. Search"></a>1. Search</h5><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Algorithm Search(R, q)</span><br><span class="line"></span><br><span class="line">Input: GiST rooted at R, predicate q </span><br><span class="line"></span><br><span class="line">Output: all tuples that satisfy q </span><br><span class="line"></span><br><span class="line">Sketch: Recursively descend all paths in tree whose keys are consistent with q. </span><br><span class="line"></span><br><span class="line">S1: [Search subtrees] If R is not a leaf, check each entry E on R to determine whether Consistent(E, q). For all entries that are Consistent, invoke Search on the subtree whose root node is referenced by E.ptr.</span><br><span class="line"></span><br><span class="line">S2: [Search leaf node] If R is a leaf, check each entry E on R to determine whether Consistent(E, q). If E is Consistent, it is a qualifying entry. At this point E.ptr could be fetched to check q accurately, or this check could be left to the calling process.</span><br></pre></td></tr></table></figure>
<p>​    ==注意==：查询谓词 $q$ 可以是精确匹配（相等）谓词，也可以是同时有多个值满足的谓词。后者包括 ”range“ 或 window“ 谓词，如在 B+tree 或 R-tree 中，还有不基于连续区域的谓词（例如集合中的包含谓词）</p>
<h5 id="2-Search-In-Linearly-Ordered-Domains"><a href="#2-Search-In-Linearly-Ordered-Domains" class="headerlink" title="2. Search In Linearly Ordered Domains"></a>2. Search In Linearly Ordered Domains</h5><p>​    如果被索引的<strong>数据线性有序</strong>，且查询通常是相等或者范围这样的谓词，那么本小节中定义的 $FindMin$ 和 $Next$ 方法可以实现更高效地搜索。要使此选项可用，用户需要在创建搜索树的时候执行一些<strong>额外的步骤</strong>：</p>
<ul>
<li>$\mathbf{IsOrdered}$ 是在创建树的时候设置的一个静态属性，默认值是 false；需要设置为 true</li>
<li>$\mathbf{Compare}(E_1,E_2)$ 需要被注册，给定两个索引项 $E_1=(p_1,\space ptr_1)$ 和 $E_2=(p_2,\space ptr_2)$，$\mathbf{Compare}$ 方法返回 $p_1$ 是否在 $p_2$ 之前，或者 $p_1$ 在 $p_2$ 之后，或者 $p_1$ 和 $p_2$ 相等。$\mathbf{Compare}$ 用于在每个节点内插入数据</li>
<li>$\mathbf{PickSplit}$ 方法必须保证 $P$ 分裂为 $P_1$ 和 $P_2$ 节点后，对于任意 $P_1$ 上的索引项 $E_1$、$P_2$ 上的索引项 $E_2$，$\mathbf{Compare}(E_1,E_2)$ 返回 $E_1$ 在 $E_2$</li>
<li>保证一个节点内没有两个重叠的 $key$，即一个节点内的任意 $E_1$ 和 $E_2$，$\mathbf{Consistent}(E_1,E_2.p)=false$</li>
</ul>
<p>​    如果执行了上面 $4$ 个步骤，则可以通过调用 $FindMin$ 并重复调用 $Next$ 来处理相等和范围查询。而其他类型的谓词仍然可以通过通用的搜索方法来处理，$FindMin/Next$ 比使用 $Serach$ 遍历更高效，因为 $FindMin$ 和 $Next$ 只沿着一个根到叶子的路径访问非叶子节点</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Algorithm FindMin(R, q) </span><br><span class="line"></span><br><span class="line">Input: GiST rooted at R, predicate q </span><br><span class="line"></span><br><span class="line">Output: minimum tuple in linear order that satisfies q </span><br><span class="line"></span><br><span class="line">Sketch: descend leftmost branch of tree whose keys are Consistent with q. When a leaf node is reached, return the first key that is Consistent with q. </span><br><span class="line"></span><br><span class="line">FM1: [Search subtrees] If R is not a leaf, find the first entry E in order such that Consistent(E, q) . If such an E can be found, invoke FindMin on the subtree whose root node is referenced by E :ptr. If no such entry is found, return NULL. </span><br><span class="line"></span><br><span class="line">FM2: [Search leaf node] If R is a leaf, find the first entry E on R such that Consistent(E, q), and return E. If no such entry exists, return NULL.</span><br></pre></td></tr></table></figure>
<p>​    给定一个满足谓词 $q$ 的索引项 $E$，$Next$ 方法返回下一个满足 $q$ 的索引项，如果不存在则返回 $NULL$。如果是为了查找 $Next$ 只会在叶子节点上被调用</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Algorithm Next(R, q, E) </span><br><span class="line"></span><br><span class="line">Input: GiST rooted at R, predicate q, current entry E </span><br><span class="line"></span><br><span class="line">Output: next entry in linear order that satisfies q </span><br><span class="line"></span><br><span class="line">Sketch: return next entry on the same level of the tree if it satisfies q. Else return NULL. </span><br><span class="line"></span><br><span class="line">N1: [next on node] If E is not the rightmost entry on its node, and N is the next entry to the right of E in order, and Consistent(N, q), then return N. If :Consistent(N, q), return NULL. </span><br><span class="line"></span><br><span class="line">N2: [next on neighboring node] If E is the righmost entry on its node, let P be the next node to the right of R on the same level of the tree (this can be found via tree traversal, or via sideways pointers in the tree, when available [LY81].) If P is non-existent, return NULL. Otherwise, let N be the leftmost entry on P . If Consistent(N, q), then return N, else return NULL.</span><br></pre></td></tr></table></figure>
<h5 id="3-Insert"><a href="#3-Insert" class="headerlink" title="3. Insert"></a>3. Insert</h5><p>​    插入流程保证 $Gist$ 的平衡，它与 R-tree 的插入非常相似，它是 B+tree 更简单的插入流程的泛化。插入允许指定插入 $level$，这允许后续方法使用 <strong>Insert</strong> 从树的内部节点重新插入数据。假设叶子节点是 $0$ 层，层号从叶子节点向上不断增加，新插入的项目出现在 $level=0$ 层</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Algorithm Insert(R, E, l) </span><br><span class="line"></span><br><span class="line">Input: GiST rooted at R, entry E = (p, ptr), and level l, where p is a predicate such that p holds for all tuples reachable from ptr. </span><br><span class="line"></span><br><span class="line">Output: new GiST resulting from insert of E at level l. </span><br><span class="line"></span><br><span class="line">Sketch: find where E should go, and add it there, splitting if necessary to make room. </span><br><span class="line"></span><br><span class="line">I1. [invoke ChooseSubtree to find where E should go] Let L = ChooseSubtree(R, E, l) </span><br><span class="line"></span><br><span class="line">I2. If there is room for E on L, install E on L (in order according to Compare, if IsOrdered.) Otherwise invoke Split(R, L, E). </span><br><span class="line"></span><br><span class="line">I3. [propagate changes upward] AdjustKeys(R, L).</span><br></pre></td></tr></table></figure>
<p>​    <strong>ChooseSubtree</strong> 可用于在树的任何 $level$ 找到插入的最佳节点。当 <strong>IsOrdered</strong> 属性是 true 时，必须仔细编写 <strong>Penalty</strong> 方法以确保 <strong>ChooseSubtree</strong> 按顺序到达正确的叶子节点。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Algorithm ChooseSubtree(R, E, l) </span><br><span class="line"></span><br><span class="line">Input: subtree rooted at R, entry E = (p, ptr), level l </span><br><span class="line"></span><br><span class="line">Output: node at level l best suited to hold entry with characteristic predicate E.p </span><br><span class="line"></span><br><span class="line">Sketch: Recursively descend tree minimizing Penalty </span><br><span class="line"></span><br><span class="line">CS1. If R is at level l, return R; </span><br><span class="line"></span><br><span class="line">CS2. Else among all entries F = (q, ptr&#x27;) on R find the one such that Penalty(F, E) is minimal. Return ChooseSubtree(F.ptr&#x27;, E, l).</span><br></pre></td></tr></table></figure>
<p>​    <strong>split</strong> 算法利用用户自定义的 <strong>PickSplit</strong> 方法来决定如何拆分节点，包括处理正在进行插入的新元组。一旦数据分成两份，<strong>Split</strong> 就会为其中一份生成新的节点，将其插入树中，并更新树中新节点之上的 $key$</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Algorithm Split(R, N, E) </span><br><span class="line"></span><br><span class="line">Input: GiST R with node N, and a new entry E = (p, ptr). </span><br><span class="line"></span><br><span class="line">Output: the GiST with N split in two and E inserted. </span><br><span class="line"></span><br><span class="line">Sketch: split keys of N along with E into two groups according to PickSplit. Put one group onto a new node, and Insert the new node into the parent of N. </span><br><span class="line"></span><br><span class="line">SP1: Invoke PickSplit on the union of the elements of N and fEg, put one of the two partitions on node N, and put the remaining partition on a new node N0 . </span><br><span class="line"></span><br><span class="line">SP2: [Insert entry for N0 in parent] Let EN&#x27; = (q, ptr&#x27;), where q is the Union of all entries on N&#x27;, and ptr&#x27; is a pointer to N&#x27;. If there is room for EN&#x27; on Parent(N), install EN&#x27; on Parent(N) (in order if IsOrdered.) Otherwise invoke Split(R, Parent(N), EN&#x27;).</span><br><span class="line"></span><br><span class="line">SP3: Modify the entry F which points to N, so that F.p is the Union of all entries on N.</span><br></pre></td></tr></table></figure>
<p>​    步骤 SP3 修改父节点信息，以显示节点 $N$ 的修改。 这些修改通过插入流程中的步骤 I3 向上传播到树中的其他部分，同时传播了由于插入 $N’$ 引起的树结构的变化。</p>
<p>​    <strong>AdjustKeys</strong> 方法确保一组谓词之上的 key 适用于下面的所有元组</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Algorithm AdjustKeys(R, N) </span><br><span class="line"></span><br><span class="line">Input: GiST rooted at R, tree node N </span><br><span class="line"></span><br><span class="line">Output: the GiST with ancestors of N containing correct and specific keys </span><br><span class="line"></span><br><span class="line">Sketch: ascend parents from N in the tree, making the predicates be accurate characterizations of the subtrees. Stop after root, or when a predicate is found that is already accurate.</span><br><span class="line"></span><br><span class="line">PR1: If N is the root, or the entry which points to N has an already-accurate representation of the Union of the entries on N, then return. </span><br><span class="line"></span><br><span class="line">PR2: Otherwise, modify the entry E which points to N so that E.p is the Union of all entries on N. Then AdjustKeys(R, Parent(N).)</span><br></pre></td></tr></table></figure>
<p>​    ==注意==：当 $\mathbf{IsOrdered}=true$ 时，<strong>AdjustKeys</strong> 通常不执行任何工作，因为这种情况下，节点上的谓词通常将数据分为几个范围，不需因为简单的插入或者删除而进行修改，<strong>AdjustKeys</strong> 会在步骤 PR1 中检测到这种情况，从而避免在树中的更高的 $level$ 调用 <strong>AdjustKeys</strong>，这种情况下，如果有需要可以完全绕过 <strong>AdjustKeys</strong>、</p>
<h5 id="4-Delete"><a href="#4-Delete" class="headerlink" title="4. Delete"></a>4. Delete</h5><p>​    删除算法保持树的平衡，同时尽可能保持树中 $key$ 的信息。当树中的 $key$ 存在线性顺序时，使用 B+tree 风格的 ”$borrow\space or\space coalesc$“ 技术。否则，使用 R-tree 风格的重新插入技术。篇幅原因，文中省略删除算法</p>
<h3 id="4-The-Gist-for-Three-Applications"><a href="#4-The-Gist-for-Three-Applications" class="headerlink" title="4. The Gist for Three Applications"></a>4. The Gist for Three Applications</h3><p>这一章的内容是给出了三个基于 $Gist$ 实现的具体的索引类型，包括 B+tree、R-tree 和 RD-tree，其中主要描述了实现这几种索引类型时，$Gist$ 定义的需要用户实现的接口是如何实现的。</p>
<h4 id="4-1-GiSTs-Over-mathbb-Z-B-trees"><a href="#4-1-GiSTs-Over-mathbb-Z-B-trees" class="headerlink" title="4.1 GiSTs Over $\mathbb{Z}$ (B+trees)"></a>4.1 GiSTs Over $\mathbb{Z}$ (B+trees)</h4><h4 id="4-2-GiSTs-Over-Polygons-in-mathbb-R-R-trees"><a href="#4-2-GiSTs-Over-Polygons-in-mathbb-R-R-trees" class="headerlink" title="4.2 GiSTs Over Polygons in $\mathbb{R}$ (R-trees)"></a>4.2 GiSTs Over Polygons in $\mathbb{R}$ (R-trees)</h4><h4 id="4-3-GiSTs-Over-mathcal-P-mathbb-Z-RD-trees"><a href="#4-3-GiSTs-Over-mathcal-P-mathbb-Z-RD-trees" class="headerlink" title="4.3 GiSTs Over $\mathcal{P}(\mathbb{Z})$ (RD-trees)"></a>4.3 GiSTs Over $\mathcal{P}(\mathbb{Z})$ (RD-trees)</h4><h3 id="5-Gist-Performance-Issues"><a href="#5-Gist-Performance-Issues" class="headerlink" title="5. Gist Performance Issues"></a>5. Gist Performance Issues</h3><h4 id="1-无重叠-key"><a href="#1-无重叠-key" class="headerlink" title="1. 无重叠 $key$"></a>1. 无重叠 $key$</h4><ul>
<li>对于没有重叠 $key$ 的平衡树（如 B+tree）需要检查的最大节点数（I/O 次数）很容易检验：对于<u>无重叠数据</u>的 $point\space query$，查询次数是<u>树的高度</u>。对于一个 $n$ 个元组的数据库而言是 $O(log\space n)$，这个上限不能保证。</li>
<li>但是，对于有重叠 $key$ 的树而言，相同的数据可能出现在不同的节点上，这会导致对树中的多条路径进行查询。Gist 的性能随着节点上出现重叠 $key$ 的情况而变化。</li>
</ul>
<h4 id="2-有重叠-key"><a href="#2-有重叠-key" class="headerlink" title="2. 有重叠 $key$"></a>2. 有重叠 $key$</h4><h5 id="1、主要原因"><a href="#1、主要原因" class="headerlink" title="1、主要原因"></a>1、主要原因</h5><ul>
<li><h5 id="数据重叠和-key-压缩带来的信息损失"><a href="#数据重叠和-key-压缩带来的信息损失" class="headerlink" title="数据重叠和 $key$ 压缩带来的信息损失"></a><strong>数据重叠</strong>和 $key$ 压缩带来的<strong>信息损失</strong></h5><ul>
<li><p>数据重叠：如果树中的数据出现重叠，那么 $key$ 很可能也出现重叠。例如数据集中的数据完全相同，这种情况下会生成低效的索引，利用顺序扫描可能更合适</p>
</li>
<li><p>压缩带来的信息损失：即使两个原始数据可能不重叠，但如果 $Compress/Decompress$ 方法不能产生精确的 $key$，那么可能导致数据重叠。例如 R-tree，$Compress$ 方法生成外接矩形，如果源数据不是矩形的，那么可能导致数据有损</p>
</li>
</ul>
</li>
</ul>
<h5 id="2、性能的影响"><a href="#2、性能的影响" class="headerlink" title="2、性能的影响"></a>2、性能的影响</h5><p>​    上述两个因素对性能的影响如下图所示，初始时没有数据重叠或者压缩导致精度丢失的问题，此时<u>具有最佳的性能</u>。随着数据重叠的增加或压缩导致的精度问题出现，性能开始下降。最坏情况下任意的查询语句都会命中所有的 $key$，这种情况下<u>需要遍历整棵树</u></p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/Compression Loss.png" alt="Compression Loss" style="zoom:70%;">

<h5 id="3、模型验证"><a href="#3、模型验证" class="headerlink" title="3、模型验证"></a>3、模型验证</h5><p>​    选择 RD-trees 来验证性能（I/O 次数）在上图参数空间中的变化：</p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/performance in the parameter space.png" alt="performance in the parameter space" style="zoom:70%;">

<h3 id="6-Implementation-Issues"><a href="#6-Implementation-Issues" class="headerlink" title="6. Implementation Issues"></a>6. Implementation Issues</h3><p>总结实现 $Gist$ 需要考虑的问题：</p>
<ul>
<li><p><strong>In-memory Efficiency</strong>：上一小节讨论了 $Gist$ 如何提升磁盘访问方面的效率，为简化内存管理方面的开销，将 $node$ 对象的实现开放为可扩展的。例如，可以重载线性排序的 $Gist$ 的 $node$ 实现，以支持二分查找；可以重载支持 hB-tree 的 $node$ 实现，以支持 hB-tree 所需的专用内部结构</p>
</li>
<li><p><strong>Concurrencu-control, Recovery and Consistency</strong>：高并发、可恢复性、一致性是数据库的关键</p>
</li>
<li><p><strong>Variable-Length Keys</strong>：通常允许变长 $key$ 是一个非常有用的特性，特别是 $Gist$ 中允许使用压缩算法。但是这需要在实现树操作方法时尤其小心，例如 <strong>Insert</strong> 和 <strong>Split</strong></p>
</li>
<li><p><strong>Bulk Loading</strong>：在无序的数据上，如何在一个大的已经存在的数据集上有效构建索引，当前仍不清晰。应该为 $Gist$ 扩展 <strong>Bulk Load</strong> 方法，来实现不同类型的数据集的批量加载</p>
</li>
<li><p><strong>Optimizer Integration</strong>：要将 $Gist$ 和查询优化器集成，必须让优化器知道哪些查询谓词与哪些 $Gist$ 是匹配的。而估算 $Gist$ 的代价更困难，需要进一步研究</p>
</li>
<li><p><strong>Coding Detail</strong>：两种建议实现 $Gist$ 的方式：</p>
<ul>
<li>$Extensible\space GiST$：像 $POSTGRES$ 或者 $Illustra$ 一样，在运行时可扩展，这样可以非常<strong>方便</strong>使用；</li>
<li>$Template\space GiST$：像 $SHORE$ 一样，在编译时可扩展，这样可以<strong>更高效</strong>。</li>
</ul>
<p>以上两种方式基于相同的代码库构建，不需要复制逻辑</p>
</li>
</ul>
<h3 id="7-Summary-and-Future-Work"><a href="#7-Summary-and-Future-Work" class="headerlink" title="7. Summary and Future Work"></a>7. Summary and Future Work</h3><ul>
<li><p>Gist 对搜索树进行了抽象，提取了它们的一些共同特征，对各种搜索树进行了结构上的<strong>统一</strong></p>
</li>
<li><p>Gist 具有非常好的<strong>扩展性</strong>，允许对任意的数据集进行索引和查询，这引出了何时以何种方式生成搜索树的问题</p>
</li>
<li><p>Gist 的可扩展性引发的研究问题：</p>
<ul>
<li><u>可索引性</u>（$Indexability$）：$Gist$ 虽然提供了一种为任意类型建立索引的方法，但是对于 ”可索引性“ 还<strong>缺乏理论</strong>来描述：对于一个给定的数据集，针对给定的查询是否能够使用索引</li>
<li><u>索引非标准数据</u>（$Indexing Non-Standard Domains$）：实际上，对一些<strong>非标准数据</strong>，例如集合、图形、序列、图片、音频、视频等，探索这些数据类型，会对理论探索提供一些有趣的反馈。对集合数据的 RD-tree 的研究已经开始：已经在 $SHORE$ 和 $Illustra$ 中实现了 RD-tree，只是用的时 R-tree 而不是 $Gist$。一旦从 R-tree 转到 $Gist$ 上，也可以通过实现新的 $PickSplit$ 方法和新的谓词实现这一点</li>
<li><u>查询优化和代价评估</u>（$Query\space Optimization\space and\space Cost\space Estimation$）：需要考虑搜索 $Gist$ 的代价，当前代价评估对 B+ tree 而言时准确且合理的，对 R-tree 而言可能相对差一些。R-tree 上的代价评估已经有一些工作已经完成，但是对更通用的 Gist 而言还有很多工作要做。另外，需要由用户实现的接口可能是非常耗时的操作，这些方法的 CPU cost 要注册给优化器。然后优化器在做代价评估时，将这些 CPU cost 正确地纳入计算中</li>
<li><u>有损 $key$ 压缩技术</u>（$Lossy\space Key\space Compression\space Technique$）：随着新的数据类型被索引，可能有必要找到新的有损压缩算法，来保留 Gist 的属性</li>
<li>算法提升（$Algorithmic\space Improvement$）：$Gist$ 的插入算法基于 R-tree 的插入算法。R-tree 使用了某种修改过的算法，对于空间数据似乎有一些性能的提升。特别是，R-tree 在分裂期间 ”强制重新插入“ 能获得很好的收益。如果这些技术证明是有益的，它们会被纳入到 Gist 中，作为可选项或者默认选项。要统一 R-tree 和 R-tree 中的并发控制和恢复方面的内容修改还需要一些工作</li>
</ul>
</li>
</ul>
<h2 id="3、Gist-索引性能分析报告"><a href="#3、Gist-索引性能分析报告" class="headerlink" title="3、Gist 索引性能分析报告"></a>3、Gist 索引性能分析报告</h2><h3 id="一、性能指标"><a href="#一、性能指标" class="headerlink" title="一、性能指标"></a>一、性能指标</h3><h4 id="1-SQL-处理过程"><a href="#1-SQL-处理过程" class="headerlink" title="1. SQL 处理过程"></a>1. SQL 处理过程</h4><ul>
<li>查询编译<ul>
<li>查询分析：由 SQL 查询语句生成<strong>查询树</strong></li>
<li>查询重写：对查询树<strong>重写</strong>并生成新的查询树，以提供对规则和视图的支持</li>
<li>查询优化<ul>
<li>生成路径：由查询树计算最优路径</li>
<li><strong>生成计划</strong>：根据最优路径，生成执行计划和执行树。</li>
</ul>
</li>
</ul>
</li>
<li>查询执行<ul>
<li>执行计划：执行执行树的每个 node，最终返回结果给用户 terminal</li>
<li>调度：将请求分配到合适的处理模块</li>
<li>附件命令处理：处理建表、备份等命令</li>
</ul>
</li>
</ul>
<h4 id="2-计划树分析"><a href="#2-计划树分析" class="headerlink" title="2. 计划树分析"></a>2. 计划树分析</h4><h5 id="2-1-EXPLAIN-工具"><a href="#2-1-EXPLAIN-工具" class="headerlink" title="2.1 EXPLAIN 工具"></a>2.1 EXPLAIN 工具</h5><p>​    <strong>EXPLAIN</strong> 命令：可以查看规划器生成的查询计划。查询计划的结构是一个<strong>计划结点</strong>的树，EXPLAIN 给计划树中每个结点都输出一行，显示基本的结点类型和计划器为该计划结点的执行所做的<strong>开销估计</strong>。第一行（最上层的结点）是对该计划的总执行开销的估计，一个上层结点的开销包括它的所有子结点的开销。</p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/explain 分析执行计划.png" alt="explain 分析执行计划" style="zoom: 67%;">

<ul>
<li><p><strong>ANALYZE</strong>，执行命令并且显示实际的<strong>运行时间</strong>和其他统计信息，这个参数默认被设置为 FALSE</p>
</li>
<li><p>VERBOSE，显示关于计划的<strong>额外信息</strong>。特别是：计划树中每个结点的输出列列表、模式限定的表和函数名、总是把表达式中的变量标上它们的范围表别名，以及总是打印统计信息被显示的每个触发器的名称，这个参数默认被设置为 FALSE</p>
</li>
<li><p>COSTS，包括每一个计划结点的<strong>估计启动</strong>和<strong>总代价</strong>，以及估计的行数和每行的宽度，这个参数默认被设置为 TRUE</p>
</li>
<li><p>BUFFERS，显示关于<strong>缓冲区</strong>（共享块、本地块、临时块读和写的块数）使用的信息，可用于识别查询的哪些部分是 I/O 密集程度最高的。该参数默认被设置为 FALSE 且只能和 ANALYZE 参数一起使用，</p>
</li>
<li><p>TIMING，在输出中包括<strong>实际启动时间</strong>以及在<strong>每个结点中花掉的时间</strong>。只有当 ANALYZE 也被启用时，这个参数才能使用，它的默认被设置为 TRUE</p>
</li>
<li><p>FORMAT，指定输出格式，可以是 TEXT、XML、JSON 或者 YAML。非文本输出包含和文本输出格式相同的信息，但是更容易被程序解析，这个参数默认被设置为 TEXT</p>
</li>
</ul>
<h5 id="2-2-EXPLAIN-结果说明"><a href="#2-2-EXPLAIN-结果说明" class="headerlink" title="2.2 EXPLAIN 结果说明"></a>2.2 EXPLAIN 结果说明</h5><h5 id="1-执行类型"><a href="#1-执行类型" class="headerlink" title="1. 执行类型"></a>1. 执行类型</h5><ul>
<li>全表扫描|顺序扫描 (Seq Scan)：将表的所有数据块从头到尾读一遍，然后从数据块中找到符号条件的数据块</li>
<li><strong>索引扫描</strong> (Index Scan)：在索引中找到数据行的物理位置，然后再到表的数据块中把相应的数据读出来</li>
<li>位图扫描 (Bitmap Index Scan $\rightarrow$ Bitmap Heap Scan)：索引的一种方式，把满足条件的行或块在内存中建一个位图，扫描完索引后，再根据位图到表的数据文件把数据读取出来</li>
<li>条件过滤 (Filter)：一般时在 WHERE 上过滤条件</li>
<li>嵌套循环 (Nestloop Join)：内表被外表驱动，外表返回的每一行数据都要在内表中检索到匹配的行。注意：外表（驱动表）选择小的表，内表（被驱动表）的连接字段要有索引，否则性能会很慢</li>
<li>Hash 连接 (Hash Join)：优化器用 $2$ 个表中较小的表，并利用连接键在内存中建立散列表，然后扫描较大的表并探测散列表，找出与散列表匹配的行</li>
<li>合并连接 (Merge Join)：如果源数据上有索引或结果已经排好序，在执行排序合并连接时不需要排序，此时合并连接的性能优于 Hash Join</li>
</ul>
<h5 id="2-cost-值"><a href="#2-cost-值" class="headerlink" title="2. cost 值"></a>2. cost 值</h5><ul>
<li>顺序扫描一个数据块，cost值定为 $1$</li>
<li>随机扫描一个数据块，cost值定为 $4$</li>
<li>处理一个数据行的 CPU，cost值为 $0.01$</li>
<li>处理一个索引行的 CPU，cost值为 $0.005$</li>
<li>每个操作符的 CPU，cost值为 $0.0025$</li>
</ul>
<h5 id="3-Buffers"><a href="#3-Buffers" class="headerlink" title="3. Buffers"></a>3. Buffers</h5><ul>
<li>shared read=1，代表数据来自磁盘而并非缓存</li>
<li>shared hit=1，说明数据已经在cache中</li>
</ul>
<h5 id="4-Time"><a href="#4-Time" class="headerlink" title="4. Time"></a>4. Time</h5><ul>
<li>Planning Time，生成执行计划的时间</li>
<li>Execution Time，执行计划的时间</li>
</ul>
<h5 id="5-其他信息"><a href="#5-其他信息" class="headerlink" title="5. 其他信息"></a>5. 其他信息</h5><ul>
<li>rows，表示返回多少行</li>
<li>width，表示每行平均宽度</li>
<li>actual time，实际花费的时间</li>
<li>loops=1，循环的次数</li>
<li>Output，输出的字段名</li>
</ul>
<h5 id="2-3-规划器的统计数据"><a href="#2-3-规划器的统计数据" class="headerlink" title="2.3 规划器的统计数据"></a>2.3 规划器的统计数据</h5><p>​    统计信息：每个表和索引中的<strong>记录总数</strong>以及每个表和索引<strong>占据的磁盘块数</strong>，这两个信息被保存在 pg_class 的 reltuples 和 relpages 字段中，可以使用如下语句检索这些信息。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> relname,relkind,reltuples,relpages <span class="keyword">from</span> pg_class;</span><br></pre></td></tr></table></figure>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/统计数据.png" alt="统计数据" style="zoom:67%;">

<p>​    ==注意==：出于效率考虑，reltuples 和 relpages <strong>不是实时更新</strong>的， 因此它们通常包含可能有些过时的数值。 它们被 VACUUM、ANALYZE和几个 DDL 命令更新，比如 CREATE INDEX。一个独立的 ANALYZE（没有和 VACUUM 在一起的） 生成一个 reltuples 的近似数值， 因为它并没有读取表里的每一行。规划器将把 pg_class 表里面的数值调整为和当前的物理表尺寸匹配，以此获取一个更接近的近似值。</p>
<h4 id="3-性能分析方法"><a href="#3-性能分析方法" class="headerlink" title="3. 性能分析方法"></a>3. 性能分析方法</h4><ul>
<li><p>首先，我们分析了一条 SQL 语句是如何工作的， 发现影响查询性能的关键是生成路径和生成计划两个模块</p>
</li>
<li><p>然后，我们查看 SQL 语句的执行计划并重点关注规划器如何使用统计信息</p>
</li>
<li><p>最后，从两个方面对 Gist 索引进行性能分析</p>
<ul>
<li>索引有效性：我们通过 EXPLAIN 命令获取 SQL 语句相关的统计信息，对比使用索引前后的执行时间来比较索引的有效性</li>
<li>索引使用情况：查看索引使用的统计情况的表：pg_stat_user_indexes；使用命令：select * from pg_stat_all_indexes where relname = ‘t_btree’进行查看</li>
</ul>
</li>
</ul>
<h3 id="二、PostgreSQL-索引"><a href="#二、PostgreSQL-索引" class="headerlink" title="二、PostgreSQL 索引"></a>二、PostgreSQL 索引</h3><ul>
<li>PG 中提供的 $10$ 种索引：</li>
</ul>
<ol>
<li><strong>B-tree</strong> 索引：适合所有的数据类型，支持可以排成某些顺序的数据的<u>等式</u>和<u>范围查询</u></li>
<li>Hash 索引：<strong>只能</strong>处理简单的<u>等式</u>比较</li>
<li>GIN 索引：用于包含多个组件值的数据值（如数组）的 “<strong>反向索引</strong>“</li>
<li>Gist 索引：它是一种平衡树结构的访问方法，是可以实现许多不同索引方案的基本<strong>模板</strong></li>
<li>SP-Gist 索引：类似 Gist，是一个通用的索引接口，但是 SP-Gist 使用了<strong>空间分区</strong>的方法，使得 SP-Gist 可以更好的支持非平衡数据结构，例如：quad-trees、k-d tree、radis tree</li>
<li>BRIN 索引：是<strong>块级索引</strong>，有别于 B-tree 等索引，BRIN 记录并不是以行号为单位记录索引明细，而是记录每个数据块或者每段连续的数据块的统计信息。因此BRIN索引空间占用特别的小，对数据写入、更新、删除的影响也很小</li>
<li>RUM 索引：是一个索引插件，由 Postgrespro 开源，适合全文检索，属于 <strong>GIN 的增强版本</strong></li>
<li>Bloom 索引：是 PostgreSQL 基于 bloom filter 构造的一个索引接口，属于 lossy 索引，可以收敛结果集（排除绝对不满足条件的结果，剩余的结果里再挑选满足条件的结果），因此需要二次 check，bloom 支持任意列组合的等值查询</li>
<li>ZomboDB 索引：是 PostgreSQL 与 ElasticSearch 结合的一个索引接口，可以直接读写 ES，实现数据的透明搜索</li>
<li>BitMap 索引：是 Greenplum 的索引接口，类似 GIN 倒排，只是 BitMap 的 key 是列的值，value 是 BIT（每个BIT对应一行），而不是行号 list 或 tree</li>
</ol>
<blockquote>
<p>默认情况下，CREATE INDEX 命令创建的是 B-tree 索引</p>
</blockquote>
<h4 id="1-B-tree-索引"><a href="#1-B-tree-索引" class="headerlink" title="1. B-tree 索引"></a>1. B-tree 索引</h4><ul>
<li>应用场景：适合所有的数据类型，支持排序，支持大于、小于、等于、大于或等于、小于或等于的搜索</li>
<li>运行 demo 测试 B-tree 索引对性能的提升：</li>
</ul>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/b-tree 索引示例.png" alt="b-tree 索引示例" style="zoom: 70%;">

<ul>
<li><p>==问题==：我们在这里创建的索引类型是 B-tree，并不支持位图索引。而上图的执行计划中可以看到有个 “Bitmap Heap Scan”，为什么实际执行的却是基于位图索引的扫描？</p>
<ul>
<li><p>PostgreSQL 开发者核心团队的成员 Tom Lane 给出的解释：</p>
<p>A plain indexscan fetches one tuple-pointer at a time from the index,  and immediately visits that tuple in the table.  A bitmap scan fetches  all the tuple-pointers from the index in one go, sorts them using an  in-memory “bitmap” data structure, and then visits the table tuples in  physical tuple-location order</p>
<p>翻译：普通的索引扫描一次读一条索引项，而 BitMap Heap Scan 一次性将满足条件的索引项全部取出，并在内存中进行排序, 然后根据取出的索引项访问表数据。由于 BitMap Heap Scan 会输出整个数据块的数据，因此需要 recheck，对输出的索引项进行过滤</p>
</li>
<li><p>其他解释：如果数据相关性较低，规划器认为，如果它执行普通的索引扫描，它将跳过整个表（物化视图）以获取所指示的行，从而导致大量随机 IO，这比顺序 IO 慢得多。通过执行位图扫描，它改进了这一点，因为位图本身就将索引中的行 “排序” 成它在表中找到它们的顺序，从而使表的读取更加顺序化。但位图扫描也并不总是有效。</p>
</li>
<li><p>我们的理解：在读取数据量比较小时，index scan 比较合适；在读取数据量比较大的情况下，bitmap index scan 会更有优势，可减少随机读取，提升 I/O 效率</p>
</li>
</ul>
</li>
<li><p>解决：由于我们后面要对比不同索引的性能，因此不希望系统自动优化使用位图索引扫描，通过 <u>set enable_bitmapscan = off</u>  禁用该优化器开关，从而来确保进行的是索引扫描</p>
</li>
<li><p>执行 B-tree 索引扫描的查询计划：</p>
</li>
</ul>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/b-tree 索引示例（禁用位图扫描）.png" alt="b-tree 索引示例（禁用位图扫描）" style="zoom:70%;">

<h4 id="2-Gist-索引"><a href="#2-Gist-索引" class="headerlink" title="2. Gist 索引"></a>2. Gist 索引</h4><p>应用场景：是一个通用的索引接口，可以使用 Gist 实现 B-tree、R-tree 等索引结构。不同的类型，支持的索引检索也各不一样：</p>
<ol>
<li>几何类型，支持位置搜索（包含、相交、在上下左右等），按距离排序</li>
<li>范围类型，支持位置搜索（包含、相交、在左右等）</li>
<li>IP类型，支持位置搜索（包含、相交、在左右等）</li>
<li>空间类型（PostGIS），支持位置搜索（包含、相交、在上下左右等），按距离排序</li>
<li>标量类型，支持按距离排序</li>
</ol>
<h5 id="2-1-几何类型检索（R-tree）"><a href="#2-1-几何类型检索（R-tree）" class="headerlink" title="2.1 几何类型检索（R-tree）"></a>2.1 几何类型检索（R-tree）</h5><img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/gist(r-tree) 索引示例.png" alt="gist(r-tree) 索引示例" style="zoom:70%;">

<h5 id="2-2-标量类型排序（B-tree）"><a href="#2-2-标量类型排序（B-tree）" class="headerlink" title="2.2 标量类型排序（B-tree）"></a>2.2 标量类型排序（B-tree）</h5><ul>
<li><p>扩展 Gist 功能：因为 Gist 可以实现 B-tree 的索引结构，所以也可以在例如数字这种标量类型上使用 Gist 索引（虽然一般都不如B-tree索引效果好），这里需要使用 <strong>btree_gist 索引插件</strong>，它对 B-tree 固有的操作符增加了 Gist 功能</p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/btree_gist 索引插件对比.png" alt="btree_gist 索引插件对比" style="zoom:70%;">
</li>
<li><p>性能分析</p>
<ul>
<li><p>添加 Gist 索引前后性能对比</p>
<ul>
<li>使用索引前：</li>
</ul>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/标量类型排序 使用Gist索引前.png" alt="标量类型排序 使用Gist索引前" style="zoom: 60%;">

<ul>
<li>使用索引后：</li>
</ul>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/标量类型排序 使用Gist索引后.png" alt="标量类型排序 使用Gist索引后" style="zoom:60%;">
</li>
<li><p>Gist 索引和 B-tree 索引对比</p>
<ul>
<li><strong>性能对比</strong></li>
</ul>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/B-tree 索引和 Gist 索引性能对比.png" alt="B-tree 索引和 Gist 索引性能对比" style="zoom:67%;">

<ul>
<li><p><strong>占用空间对比</strong></p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/B-tree 索引和 Gist 占用空间对比.png" alt="B-tree 索引和 Gist 占用空间对比" style="zoom:67%;">
</li>
</ul>
</li>
</ul>
</li>
<li><p>总结 Gist 和 B-tree 索引比较的优缺点：</p>
<ul>
<li>优点：和 B-tree 索引类似，同样适用于其他的数据类型。和 B-tree 索引相比，Gist 多字段索引在查询条件中包含索引字段的任何子集都会使用索引扫描，而 B-tree 索引只有查询条件包含第一个索引字段才会使用索引扫描</li>
<li>缺点：Gist 索引性能上略差于 B-tree，且创建耗时较长，占用空间也比较大</li>
</ul>
</li>
</ul>
<h5 id="2-3-全文检索（RD-tree）"><a href="#2-3-全文检索（RD-tree）" class="headerlink" title="2.3 全文检索（RD-tree）"></a>2.3 全文检索（RD-tree）</h5><ul>
<li><p>全文检索：通过自然语言文档的集合来找到那些匹配一个查询的检索</p>
</li>
<li><p>PostgreSQL 提供了两种数据类型用于支持全文检索：</p>
<ul>
<li><p>tsvector：是一个无重复值的 lexemes 排序列表，即一些同一个词的不同变种的标准化</p>
</li>
<li><p>tsquery：存储用于检索的词汇，并且使用布尔操作符 &amp;(AND)，|(OR) 和 !(NOT) 来组合它们，括号用来强调操作符的分组</p>
</li>
<li><p>示意图：</p>
</li>
</ul>
</li>
</ul>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/PG中全文检索的简要介绍.png" alt="PG中全文检索的简要介绍" style="zoom: 70%;">

<ul>
<li>添加 Gist（RD-tree） 索引前后性能对比</li>
</ul>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/gist(RD-tree) 索引示例.png" alt="gist(RD-tree) 索引示例" style="zoom:70%;">

<h3 id="三、Gist-性能对比实验"><a href="#三、Gist-性能对比实验" class="headerlink" title="三、Gist 性能对比实验"></a>三、Gist 性能对比实验</h3><blockquote>
<p>上一小节主要关注：PG 中 B-trees 索引和 Gist 索引的测试，以及添加索引后性能的提升</p>
<p>本小节主要进行：<strong>Gist，B-trees，R-trees，RD-trees</strong> 之间的性能比较分析</p>
</blockquote>
<h4 id="1-实验设置"><a href="#1-实验设置" class="headerlink" title="1. 实验设置"></a>1. 实验设置</h4><h5 id="1-1-数据集准备"><a href="#1-1-数据集准备" class="headerlink" title="1.1 数据集准备"></a>1.1 数据集准备</h5><p>​    我们的实验共分为三个部分：分别是对 Gist 实现的 B-tree、R-tree 以及 RD-tree 三种索引的性能对比分析。</p>
<p>​    为了让实验结果更加可靠，我们分别为 B-tree、R-tree 索引各准备了 $4$ 个数据表，数据量分别为一百万条、两百万条、五百万条和一千万条；RD-tree 为 $3$ 个数据表，数据量分别为一百万条、两百万条、五百万条，用以观察不同数据量下各索引的性能变化以及性能瓶颈。各数据表的详细参数如下：</p>
<table>
<thead>
<tr>
<th align="center">索引类型</th>
<th align="center">数据量</th>
<th align="center">数据类型</th>
<th align="center">查询项</th>
</tr>
</thead>
<tbody><tr>
<td align="center">B-tree</td>
<td align="center">1M，2M，5M，10M</td>
<td align="center">id : <strong>integer</strong>，name : <strong>text</strong></td>
<td align="center">id</td>
</tr>
<tr>
<td align="center">R-tree</td>
<td align="center">1M，2M，5M，10M</td>
<td align="center">id : <strong>integer</strong>，p : <strong>point</strong></td>
<td align="center">p</td>
</tr>
<tr>
<td align="center">RD-tree</td>
<td align="center">1M，2M，5M</td>
<td align="center">id : <strong>integer</strong>，words : <strong>text</strong>，words_tsv : <strong>tsvector</strong></td>
<td align="center">words_tsv</td>
</tr>
</tbody></table>
<p>​    数据构造方面，对于 B-tree 和 R-tree 索引的数据表，我们采用 PostgreSQL 自带的数据生成函数 generate_series 进行快速数据生成。以生成一百万条数据的数据表为例，我们使用的生成语句具体如下：</p>
<ul>
<li>B-tree 数据生成语句</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> btree1m(id <span class="type">integer</span>, name text);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> btree1m(id, name)</span><br><span class="line"><span class="keyword">select</span> s.id, <span class="built_in">substring</span>(md5(random()::<span class="type">varchar</span>), <span class="number">2</span>, <span class="number">8</span>)</span><br><span class="line"><span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">1000000</span>) <span class="keyword">as</span> s(id)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> random();</span><br></pre></td></tr></table></figure>
<ul>
<li>R-tree 数据生成语句</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> rtree1m(id <span class="type">integer</span>, p point);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> rtree1m(id, point)</span><br><span class="line"><span class="keyword">select</span> s.id, point(<span class="built_in">ceil</span>(random()<span class="operator">*</span><span class="number">10000</span>), <span class="built_in">ceil</span>(random()<span class="operator">*</span><span class="number">10000</span>))</span><br><span class="line"><span class="keyword">from</span> generate_series (<span class="number">1</span>, <span class="number">1000000</span>) <span class="keyword">as</span> s(id);</span><br></pre></td></tr></table></figure>
<p>​    对于 RD-tree，由于其数据类型（文档）要求比较特殊，仅使用 generate_series 无法满足要求，因此我们使用 python 中的 psycopg2库，先从含有 $1087$ 个单词的文档中随机抽取单词组成字符串，再插入数据表中，待数据插入完成后，统一使用 to_tsvector 语句生成词素，以完成数据构造，具体生成代码如下：</p>
<ul>
<li>RD-tree 数据生成语句</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_rdtree_data</span>(<span class="params">filename</span>):</span></span><br><span class="line">    file = <span class="built_in">open</span>(filename,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf_8&quot;</span>)</span><br><span class="line">    raw_data = file.read()</span><br><span class="line">    file.close()</span><br><span class="line">    word_sets = raw_data.split(<span class="string">&quot; &quot;</span>,<span class="number">1085</span>)</span><br><span class="line">    n = <span class="built_in">len</span>(word_sets)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    conn = psycopg2.connect(<span class="string">&quot;dbname=gist_pj user=postgres password=123456&quot;</span>)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">    tables = [<span class="string">&#x27;rdtree1m&#x27;</span>,<span class="string">&#x27;rdtree2m&#x27;</span>,<span class="string">&#x27;rdtree5m&#x27;</span>,<span class="string">&#x27;rdtree10m&#x27;</span>]</span><br><span class="line">    data_nums = [<span class="number">1000000</span>, <span class="number">2000000</span>, <span class="number">5000000</span>, <span class="number">10000000</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, table <span class="keyword">in</span> <span class="built_in">enumerate</span>(tables):</span><br><span class="line">        print(<span class="string">&quot;Creating %s...&quot;</span>%(table))</span><br><span class="line">        cur.execute(<span class="string">&#x27;create table &#x27;</span> + table + <span class="string">&#x27;(id integer, words text);&#x27;</span>)</span><br><span class="line">        conn.commit()</span><br><span class="line">        print(<span class="string">&quot;%s created. Start inserting...&quot;</span>%(table))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(data_nums[i]):</span><br><span class="line">            word_num = random.randint(<span class="number">1</span>, <span class="number">20</span>)</span><br><span class="line">            words = []</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(word_num):</span><br><span class="line">                idnum = random.randint(<span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">                words.append(word_sets[idnum])</span><br><span class="line">            words = <span class="string">&#x27; &#x27;</span>.join(words)</span><br><span class="line"></span><br><span class="line">            cur.execute(<span class="string">&#x27;insert into &#x27;</span> + table + <span class="string">&#x27;(id, words) values(&#x27;</span> + <span class="built_in">str</span>(j) + <span class="string">&#x27;, \&#x27;&#x27;</span> + words + <span class="string">&#x27;\&#x27;);&#x27;</span>)</span><br><span class="line">            conn.commit()</span><br><span class="line">            <span class="keyword">if</span> (j+<span class="number">1</span>) %<span class="number">100000</span> == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">&quot;Inserted %d words into %s&quot;</span>%(j+<span class="number">1</span>,table))</span><br><span class="line">        print(<span class="string">&quot;%s insert completed&quot;</span>%(table))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_tsvector</span>():</span></span><br><span class="line">    conn = psycopg2.connect(<span class="string">&quot;dbname=gist_pj user=postgres password=123456&quot;</span>)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">    tables = [<span class="string">&#x27;rdtree1m&#x27;</span>,<span class="string">&#x27;rdtree2m&#x27;</span>,<span class="string">&#x27;rdtree5m&#x27;</span>,<span class="string">&#x27;rdtree10m&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> table <span class="keyword">in</span> tables:</span><br><span class="line">        cur.execute(<span class="string">&#x27;alter table &#x27;</span> + table + <span class="string">&#x27; add words_tsv tsvector;&#x27;</span>)</span><br><span class="line">        print(<span class="string">&quot;words_tsv added successful for %s&quot;</span>%(table))</span><br><span class="line"></span><br><span class="line">        cur.execute(<span class="string">&#x27;update &#x27;</span> + table + <span class="string">&#x27; set words_tsv = to_tsvector(words);&#x27;</span>)</span><br><span class="line">        print(<span class="string">&quot;words_tsv set successful for %s&quot;</span>%(table))</span><br><span class="line">        conn.commit()</span><br></pre></td></tr></table></figure>
<p>​    最后生成的数据表样式如下（以1M数据表为例）：</p>
<ul>
<li>B-tree</li>
</ul>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/性能对比实验：B-tree 数据表显示.png" alt="性能对比实验：B-tree 数据表显示" style="zoom:70%;">

<ul>
<li>R-tree</li>
</ul>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/性能对比实验：R-tree 数据表显示.png" alt="性能对比实验：R-tree 数据表显示" style="zoom:70%;">

<ul>
<li>RD-tree</li>
</ul>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/性能对比实验：RD-tree 数据表显示.png" alt="性能对比实验：RD-tree 数据表显示" style="zoom:60%;">

<h5 id="1-2-实验过程"><a href="#1-2-实验过程" class="headerlink" title="1.2 实验过程"></a>1.2 实验过程</h5><p>​    在 PostgreSQL 中自带原生的 B-tree索引和 R-tree 索引，但是没有原生的 RD-tree 索引（由Gist实现），因此本次性能分析实验我们使用 Gist 实现的 B-tree 索引和原生 B-tree索引、Gist 实现的 R-tree 索引和原生 R-tree索引以及 RD-tree 索引与无索引扫描进行性能比较。</p>
<p>​    本次性能分析实验主要比较查询语句的性能，具体如下</p>
<ul>
<li>B-tree 会进行<u>等值查询（=）</u>、<u>非等值查询（&gt;, &lt;）</u>、<u>查询后排序</u>三项</li>
<li>R-tree 进行<u>范围查询（&lt;@）</u>以及<u>KNN排序（$\leftrightarrow$）</u></li>
<li>RD-tree 进行<u>匹配查询（@@）</u></li>
</ul>
<p>​    每种查询语句会在每个数据表上分别执行多次，取平均值作为查询性能的表示以减小误差，同时可以观察查询次数对查询性能的影响。其中等值查询会分别进行 $100/1000/10000/100000$ 次，其余查询分别进行 $10/100/1000$ 次。每次查询时，查询条件均由 python 脚本随机生成。</p>
<h4 id="2-B-tree-索引性能分析"><a href="#2-B-tree-索引性能分析" class="headerlink" title="2. B-tree 索引性能分析"></a>2. B-tree 索引性能分析</h4><h5 id="2-1-等值查询"><a href="#2-1-等值查询" class="headerlink" title="2.1 等值查询"></a>2.1 等值查询</h5><p>​    我们分别使用 PostgreSQL 原生的 B-tree 索引（以下由B-tree代替）和由 Gist 实现的 B-tree 索引（以下由 Gist 代替）在四种规模（$1M/2M/5M/10M$）的数据表上分别进行了 $100/1000/10000/100000$ 次查询，以平均执行时间（ms）作为性能衡量标准，结果如下表所示：</p>
<table align="center">
<tr align="center">
    <td rowspan="2"></td>
    <td rowspan="2">数据量（M=百万）</td>
    <td colspan="4">查询次数</td>
</tr>
<tr align="center">
    <td>100</td>
    <td>1000</td>
    <td>10000</td>
    <td>100000</td>
</tr>
<tr align="center">
    <td rowspan="4">B-tree</td>
    <td>1M</td>
    <td>0.03318</td>
    <td>0.024798</td>
    <td>0.018192</td>
    <td>0.012111</td>  
</tr>
<tr align="center">
    <td>2M</td>
    <td>0.05135</td>
    <td>0.03864</td>
    <td>0.021669</td>
    <td>0.012036</td>
</tr>
<tr align="center">
    <td>5M</td>
    <td>0.06037</td>
    <td>0.052307</td>
    <td>0.031731</td>
    <td>0.024</td>
</tr>
<tr align="center">
    <td>10M</td>
    <td>0.06896</td>
    <td>0.057676</td>
    <td>0.044845</td>
    <td>0.034928</td>
</tr>
<tr align="center">
    <td rowspan="4">Gist</td>
    <td>1M</td>
    <td>0.07688</td>
    <td>0.049448</td>
    <td>0.028194</td>
    <td>0.023334</td>  
</tr>
<tr align="center">
    <td>2M</td>
    <td>0.09679</td>
    <td>0.047306</td>
    <td>0.038662</td>
    <td>0.029991</td>
</tr>
<tr align="center">
    <td>5M</td>
    <td>0.10706</td>
    <td>0.061588</td>
    <td>0.060014</td>
    <td>0.039931</td>
</tr>
<tr align="center">
    <td>10M</td>
    <td>0.14233</td>
    <td>0.121944</td>
    <td>0.071411</td>
    <td>0.058829</td>
</tr>
</table>


<p>​    从上表可以看出，在不同查询次数下，B-tree 和 Gist 都存在一定的性能差距，这里我们以十万次查询的性能为例：</p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/B-tree和Gist等值查询性能对比.png" alt="B-tree和Gist等值查询性能对比" style="zoom: 70%;">

<p>​    可以看到：<strong>随着数据量逐渐增大，两种索引的查询时间都有所增加，但在四种数据集下，Gist 的查询时间都是 B-tree 的==两倍==左右</strong>。关于这一点其实在 PostgreSQL 的官方文档已有说明：使用 Gist 实现的 B-tree 性能并不会优于原生。在之后的非等值查询和排序实验中也能够发现，Gist 的性能相对 B-tree 有较明显的劣势。</p>
<p>​    同时我们还注意到，<strong>随着查询次数的增加，两种索引的查询速度都有变快的趋势</strong>。以 B-tree 为例：</p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/Btree等值查询时间与查询次数的关系.png" alt="Btree等值查询时间与查询次数的关系" style="zoom:70%;">

<p>​    可以看到，在四种数据集下，随着查询次数的增加，B-tree 索引的查询时间都有逐渐缩短的趋势。我们猜测这是因为 PostgreSQL 会将查询完成的数据项放入缓存中，若下次再次查询到此项可以加速访问。而随着查询次数增多，缓存的数据项也增多，查询命中率也增大，最终造成这种现象。</p>
<h5 id="2-2-非等值查询"><a href="#2-2-非等值查询" class="headerlink" title="2.2 非等值查询"></a>2.2 非等值查询</h5><p>​    我们使用 B-tree 和 Gist 在四张数据表上进行了非等值查询，由于相较于等值查询而言耗时更长，因此我们将查询次数下调至$10/100/1000$次。</p>
<p>​    同时在非等值查询情境下，我们观察到即使已经建立了索引，数据库依然倾向于使用顺序扫描或位图扫描的情况时有发生，因此我们增加了<strong>无索引</strong>时的查询性能实验进行对比，结果如下表所示：</p>
<table align="center">
<tr align="center">
    <td rowspan="2"></td>
    <td rowspan="2">数据量</td>
    <td colspan="4">查询次数</td>
</tr>
<tr align="center">
    <td>10</td>
    <td>100</td>
    <td>1000</td>
</tr>
<tr align="center">
    <td rowspan="4">B-tree</td>
    <td>1M</td>
    <td>61.979</td>
    <td>67.41578</td>
    <td>63.08512</td> 
</tr>
<tr align="center">
    <td>2M</td>
    <td>150.8887</td>
    <td>116.6069</td>
    <td>122.6648</td>
</tr>
<tr align="center">
    <td>5M</td>
    <td>276.8287</td>
    <td>408.0294</td>
    <td>409.7867</td>
</tr>
<tr align="center">
    <td>10M</td>
    <td>821.6075</td>
    <td>853.392</td>
    <td>807.5114</td>
</tr>
<tr align="center">
    <td rowspan="4">Gist</td>
    <td>1M</td>
    <td>107.5504</td>
    <td>77.20416</td>
    <td>79.64227</td>
</tr>
<tr align="center">
    <td>2M</td>
    <td>201.8327</td>
    <td>174.0398</td>
    <td>184.9779</td>
</tr>
<tr align="center">
    <td>5M</td>
    <td>596.5293</td>
    <td>552.2071</td>
    <td>537.8044</td>
</tr>
<tr align="center">
    <td>10M</td>
    <td>772.0948</td>
    <td>923.3244</td>
    <td>1046.903</td>
</tr>
<tr align="center">
    <td rowspan="4">无索引</td>
    <td>1M</td>
    <td>91.2538</td>
    <td>109.5809</td>
    <td>99.35411</td> 
</tr>
<tr align="center">
    <td>2M</td>
    <td>216.5602</td>
    <td>206.1646</td>
    <td>172.2122</td>
</tr>
<tr align="center">
    <td>5M</td>
    <td>473.8722</td>
    <td>447.3681</td>
    <td>457.0516</td>
</tr>
<tr align="center">
    <td>10M</td>
    <td>1170.888</td>
    <td>871.7418</td>
    <td>843.4366</td>
</tr>
</table>


<p>​    通过上述数据我们可以观察到，在非等值查询条件下，<strong>B-tree 的性能依然是整体优于 Gist，但是差距不再像等值查询时相差两倍那么明显</strong>。同时值得注意的是，<strong>无索引时的查询性能不再像等值查询时那样远远慢于有索引查询了</strong>。我们以 $1000$ 次查询的性能数据为例：</p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/B-tree、Gist和无索引三种情况非等值查询性能对比.png" alt="B-tree、Gist和无索引三种情况非等值查询性能对比" style="zoom:70%;">

<p>​    从上表可以看出，B-tree 的查询性能依然整体优于无索引查询，但是差距并不明显；而 ==随着数据量的增大 Gist 的性能逐渐劣于无索引查询，并且差距越来越大==。我们认为这是由于非等值查询导致需要搜索的数据项增多，索引查询需要耗费更多时间在索引层，相比之下直接在数据层进行扫描可能会更快。可以预见，当数据量进一步提高时，B-tree 的性能也会逐渐劣于无索引扫描。</p>
<p>​    我们还发现了另外一个不同于等值查询的现象：==在非等值查询中，随着查询次数的增加，查询性能可能不再像等值查询时那样获得提升，而是有所下降==，我们以 Gist 索引为例：</p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/Gist非等值查询时间与查询次数的关系.png" alt="Gist非等值查询时间与查询次数的关系" style="zoom:70%;">

<p>​    当使用 Gist 索引时，查询 $1000$ 次的平均用时相比查询 $100$ 次而言反而有所升高，这在一千万规模的数据集上非常明显。我们认为这是因为非等值查询会占用更多的缓存空间，让数据库系统没法在缓存区保留已查询数据项，从而使查询性能不再提升，而是随着查询次数增多不断下降。</p>
<h5 id="2-3-查询后排序"><a href="#2-3-查询后排序" class="headerlink" title="2.3 查询后排序"></a>2.3 查询后排序</h5><p>​    我们使用 B-tree 和 Gist 在四张数据表上进行了增加排序的非等值查询，以下是实验结果：</p>
<table align="center">
<tr align="center">
    <td rowspan="2"></td>
    <td rowspan="2">数据量</td>
    <td colspan="4">查询次数</td>
</tr>
<tr align="center">
    <td>10</td>
    <td>100</td>
    <td>1000</td>
</tr>
<tr align="center">
    <td rowspan="4">B-tree</td>
    <td>1M</td>
    <td>177.2743</td>
    <td>211.1747</td>
    <td>196.704</td> 
</tr>
<tr align="center">
    <td>2M</td>
    <td>482.5123</td>
    <td>421.7937</td>
    <td>400.1802</td>
</tr>
<tr align="center">
    <td>5M</td>
    <td>8856.351</td>
    <td>7346.194</td>
    <td>-</td>
</tr>
<tr align="center">
    <td>10M</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
</tr>
<tr align="center">
    <td rowspan="4">Gist</td>
    <td>1M</td>
    <td>456.3699</td>
    <td>395.4264</td>
    <td>358.9771</td>
</tr>
<tr align="center">
    <td>2M</td>
    <td>892.9861</td>
    <td>746.8035</td>
    <td>768.7536</td>
</tr>
<tr align="center">
    <td>5M</td>
    <td>10058.31</td>
    <td>9237.658</td>
    <td>-</td>
</tr>
<tr align="center">
    <td>10M</td>
    <td>-</td>
    <td>-</td>
    <td>-</td>
</tr>
<tr align="center">
    <td rowspan="4">无索引</td>
    <td>1M</td>
    <td>359.9617</td>
    <td>369.8334</td>
    <td>372.0706</td> 
</tr>
<tr align="center">
    <td>2M</td>
    <td>730.1155</td>
    <td>777.723</td>
    <td>704.2577</td>
</tr>
<tr align="center">
    <td>5M</td>
    <td>1445.078</td>
    <td>1919.576</td>
    <td>2063.705</td>
</tr>
<tr align="center">
    <td>10M</td>
    <td>2851.832</td>
    <td>3133.163</td>
    <td>3026.798</td>
</tr>
</table>


<blockquote>
<p>注：由于查询用时过长，这里我们并未记录 $5$M-$1000$ 次查询结果以及 $10$M 数据量的查询结果</p>
</blockquote>
<p>​    显然，与不排序的非等值查询相比，<strong>增加排序的查询明显要耗费更多时间</strong>。出现这种情况，可能是因为在数据量过大的情况下，缓存已经不够用，需要更加频繁的 I/O 进行数据交换，从而严重影响了索引的性能。我们以 B-tree 为例：</p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/B-tree排序与非排序查询性能对比.png" alt="B-tree排序与非排序查询性能对比" style="zoom:70%;">

<p>​    <strong>带排序的非等值查询用时相比非排序增加了==三倍==左右</strong>，Gist 索引的情况也与之相似，除此以外，当数据量来到五百万以上时，<strong>索引查询用时陡升</strong>，以 Gist 为例：</p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/Gist查询后排序时间与数据量的关系.png" alt="Gist查询后排序时间与数据量的关系" style="zoom:70%;">

<p>​    下图给出了无索引情况下查询后排序时间与数据量间的关系，需要特别指出的是：**无索引查询排序的用时与数据量增加成正比，而且==并没有出现索引查询时性能急剧下降的情况==**。</p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/无索引查询后排序时间与数据量的关系.png" alt="无索引查询后排序时间与数据量的关系" style="zoom:70%;">

<h5 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h5><p>​    我们针对 B-tree 索引分别进行了等值查询、非等值查询和查询后排序，性能对比如下：</p>
<ul>
<li><p>Gist vs B-tree：实验结果显示 PostgreSQL <strong>原生的 B-tree</strong> 在三种场景下性能<strong>均优于</strong> <strong>Gist 实现的 B-tree</strong></p>
</li>
<li><p>Gist、B-tre vs 无索引：</p>
<ul>
<li>在<strong>等值查询</strong>中：两种索引的查询性能<strong>远远优于无索引查询</strong></li>
<li>在<strong>非等值查询</strong>中：随着数据量逐渐增大，索引查询的性能逐渐<strong>被无索引查询超越</strong>，尤其是在排序情景下，数据量足够大时，索引查询有可能会遭遇严重的性能瓶颈，导致性能断崖式下降，反而不使用索引的效果更好</li>
</ul>
</li>
</ul>
<h4 id="3-R-tree-索引性能分析"><a href="#3-R-tree-索引性能分析" class="headerlink" title="3. R-tree 索引性能分析"></a>3. R-tree 索引性能分析</h4><h5 id="3-1-范围查询"><a href="#3-1-范围查询" class="headerlink" title="3.1 范围查询"></a>3.1 范围查询</h5><p>​    我们分别使用 PostgreSQL 原生的 R-tree 索引（以下由 R-tree 代替）和由 Gist 实现的 R-tree 索引（以下由 Gist 代替）在四种规模（$1M/2M/5M/10M$）的数据表上分别进行了 $10/100/1000$ 次范围查询（&lt;@ box），以平均执行时间（ms）作为性能衡量标准，结果如下表所示。需要说明的是，在使用 R-tree 索引的场景中，<strong>无索引扫描的性能要远远落后于索引扫描</strong>，因此在 R-tree 查询性能分析中我们不再对比无索引扫描性能。</p>
<table align="center">
<tr align="center">
    <td rowspan="2"></td>
    <td rowspan="2">数据量</td>
    <td colspan="4">查询次数</td>
</tr>
<tr align="center">
    <td>10</td>
    <td>100</td>
    <td>1000</td>
</tr>
<tr align="center">
    <td rowspan="4">R-tree</td>
    <td>1M</td>
    <td>49.6526</td>
    <td>52.8736</td>
    <td>47.26513</td> 
</tr>
<tr align="center">
    <td>2M</td>
    <td>117.0581</td>
    <td>120.0193</td>
    <td>106.7405</td>
</tr>
<tr align="center">
    <td>5M</td>
    <td>1138.945</td>
    <td>2136.78</td>
    <td>2231.591</td>
</tr>
<tr align="center">
    <td>10M</td>
    <td>3743.78</td>
    <td>6100.476</td>
    <td>9216.125</td>
</tr>
<tr align="center">
    <td rowspan="4">Gist</td>
    <td>1M</td>
    <td>131.6751</td>
    <td>97.39799</td>
    <td>79.05427</td>
</tr>
<tr align="center">
    <td>2M</td>
    <td>139.4353</td>
    <td>109.159</td>
    <td>135.2277</td>
</tr>
<tr align="center">
    <td>5M</td>
    <td>1144.158</td>
    <td>3627.209</td>
    <td>2551.51</td>
</tr>
<tr align="center">
    <td>10M</td>
    <td>3458.488</td>
    <td>6852.235</td>
    <td>9485.287</td>
</tr>
</table>


<p>​    由上表可以看出，整体而言 R-tree 索引的范围查询性能要优于 Gist 索引。我们以 $1000$ 次查询次数的结果为例进行分析：</p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/R-tree和Gist范围查询性能对比.png" alt="R-tree和Gist范围查询性能对比" style="zoom:70%;">

<p>​    可以看到，在四种规模的数据集中，<strong>R-tree 索引的性能都要略优于 Gist</strong>，但是差异并不十分明显，并且<strong>随着数据规模的增大，两者的性能逐渐接近。</strong></p>
<p>​    我们还发现，对于两种索引而言，在相同的数据集但<strong>不同查询次数下查询性能会出现较大波动</strong>，并且<strong>在数据集规模越大时这一现象越明显</strong>，同时使用 Gist 索引时这一现象也更明显。</p>
<p>​    我们先分析 R-tree 索引。我们认为查询 $10$ 次的结果误差仍然比较大，因此更多考虑查询 $100$ 和 $1000$ 次的结果，比较分析如下：</p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/R-tree性能与查询次数的关系.png" alt="R-tree性能与查询次数的关系" style="zoom:77%;">

<p>​    由图表可知，当数据规模为一百万、两百万、五百万条时，不同查询次数下 R-tree 索引查询性能变化并不大，当数据规模来到一千万时，<u>查询 $1000$ 次时的查询性能要明显劣于查询 $100$ 次时</u>。造成这种现象的原因，我们认为和 B-tree 索引是类似的：<strong>当查询次数增多后，缓存空间被大量占用导致查询性能出现了瓶颈</strong>。</p>
<p>​    我们再来看 Gist 索引的情况。和 R-tree 相比，Gist 索引的查询性能变化要更明显，如下图所示：</p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/Gist性能与查询次数的关系.png" alt="Gist性能与查询次数的关系" style="zoom:70%;">

<p>​    可以看到，相比 R-tree 索引，Gist 索引在四种规模数据集中，<strong>不同查询次数下查询性能波动比较大</strong>。我们认为这可能是因为两种索引底层的缓存利用机制有所区别，而 R-tree 索引针对范围查询这一特定的应用场景进行了一定的优化，所以表现得更加稳定。</p>
<h5 id="3-2-KNN排序"><a href="#3-2-KNN排序" class="headerlink" title="3.2 KNN排序"></a>3.2 KNN排序</h5><p>​    我们使用 R-tree 和 Gist 在四张数据表上进行了 KNN 排序，其中每张表返回的 point 数量与该表的规模正成比（数据量/$100$），以更好地体现不同规模数据集下两种索引性能表现的差异，结果如下表所示：</p>
<table align="center">
<tr align="center">
    <td rowspan="2"></td>
    <td rowspan="2">数据量</td>
    <td colspan="4">查询次数</td>
</tr>
<tr align="center">
    <td>10</td>
    <td>100</td>
    <td>1000</td>
</tr>
<tr align="center">
    <td rowspan="4">R-tree</td>
    <td>1M</td>
    <td>30.0405</td>
    <td>13.84511</td>
    <td>11.68973</td> 
</tr>
<tr align="center">
    <td>2M</td>
    <td>43.0087</td>
    <td>24.04613</td>
    <td>23.02512</td>
</tr>
<tr align="center">
    <td>5M</td>
    <td>265.9871</td>
    <td>243.214</td>
    <td>261.8839</td>
</tr>
<tr align="center">
    <td>10M</td>
    <td>736.0935</td>
    <td>696.9722</td>
    <td>662.0441</td>
</tr>
<tr align="center">
    <td rowspan="4">Gist</td>
    <td>1M</td>
    <td>17.9497</td>
    <td>11.12343</td>
    <td>10.8992</td>
</tr>
<tr align="center">
    <td>2M</td>
    <td>39.178</td>
    <td>22.71717</td>
    <td>22.4646</td>
</tr>
<tr align="center">
    <td>5M</td>
    <td>240.5831</td>
    <td>239.0794</td>
    <td>239.3458</td>
</tr>
<tr align="center">
    <td>10M</td>
    <td>671.5387</td>
    <td>650.6201</td>
    <td>658.2245</td>
</tr>
</table>


<p>​    整体上看，两种索引在 KNN 排序场景下的性能差距并不大，<strong>Gist 的性能要略优于 R-tree</strong>。我们以 $1000$ 次查询结果为例：</p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/R-tree和GistKNN查询性能对比.png" alt="R-tree和GistKNN查询性能对比" style="zoom:70%;">

<p>​    可以看到两种索引的查询用时在四个规模的数据集下都比较接近，Gist 相较而言要略快一些。并且不同查询次数对两种索引的性能影响也微乎其微。</p>
<h5 id="3-3-总结"><a href="#3-3-总结" class="headerlink" title="3.3 总结"></a>3.3 总结</h5><p>​    我们针对 R-tree 索引进行了范围查询和 KNN 排序两种场景下的性能实验，结果显示 PostgreSQL 原生的 R-tree 与 Gist 实现的 R-tree 性能差异并不如 B-tree 那么明显</p>
<ul>
<li>在 <strong>KNN 排序场景下，两者的查询性能几乎相同</strong></li>
<li>在范围查询中，<strong>Gist 在不同查询次数下性能波动比较大，而 R-tree 更加稳定</strong>，我们认为 R-tree 针对特定应用场景对缓存利用进行了一些优化以获得更稳定的性能</li>
</ul>
<h4 id="4-RD-tree-索引性能分析"><a href="#4-RD-tree-索引性能分析" class="headerlink" title="4. RD-tree 索引性能分析"></a>4. RD-tree 索引性能分析</h4><h5 id="4-1-全文检索"><a href="#4-1-全文检索" class="headerlink" title="4.1 全文检索"></a>4.1 全文检索</h5><p>​    由于 PostgreSQL 并没有原生的 RD-tree 索引，只有通过 Gist 实现的 RD-tree 索引，因此本节我们仅进行了 Gist 索引与无索引查询的性能对比实验。</p>
<p>​    我们通过 python 脚本，从含有 $1087$ 个单词的文本中以随机数量随机抽取单词并组合成句子，分别生成了含有一百万、两百万、五百万数据项的数据集，并在这些数据集上进行了全文检索（匹配查询），查询用时结果如下：</p>
<table align="center">
<tr align="center">
    <td rowspan="2"></td>
    <td rowspan="2">数据量</td>
    <td colspan="4">查询次数</td>
</tr>
<tr align="center">
    <td>10</td>
    <td>100</td>
    <td>1000</td>
</tr>
<tr align="center">
    <td rowspan="3">Gist</td>
    <td>1M</td>
    <td>402.1559</td>
    <td>467.6958</td>
    <td>505.8494</td> 
</tr>
<tr align="center">
    <td>2M</td>
    <td>1323.648</td>
    <td>1351.347</td>
    <td>1399.162</td>
</tr>
<tr align="center">
    <td>5M</td>
    <td>2755.076</td>
    <td>3912.203</td>
    <td>3888.738</td>
</tr>
<tr align="center">
    <td rowspan="3">无索引</td>
    <td>1M</td>
    <td>941.5422</td>
    <td>1024.426</td>
    <td>1144.391</td>
</tr>
<tr align="center">
    <td>2M</td>
    <td>1749.347</td>
    <td>2744.705</td>
    <td>1780.661</td>
</tr>
<tr align="center">
    <td>5M</td>
    <td>3277.635</td>
    <td>3398.889</td>
    <td>4955.399</td>
</tr>
</table>


<p>​    由于查询 $10$ 次的结果误差依然比较大，因此我们更多考虑查询 $100/1000$次的结果进行性能分析：</p>
<img src="/2022/10/18/%E7%B4%A2%E5%BC%95%E8%B0%83%E4%BC%98/Gist实现的RD-tree与无索引的性能对比.png" alt="Gist实现的RD-tree与无索引的性能对比" style="zoom:70%;">

<p>​    从上图可以看出，<strong>当数据量不大时（一百万条），Gist 索引的查询性能要远快于无索引的查询性能，约为==两倍==左右。而随着数据量逐渐增大，两者的差距开始不断缩小</strong>。</p>
<p>​    值得注意的是：<strong>在无索引查询的性能数据中，当查询次数为 100 次时，在两百万和五百万的数据集上出现==比较大的数据波动==，与查询次数为 1000 次的性能数据差异较大</strong>。</p>
<h5 id="4-2-总结"><a href="#4-2-总结" class="headerlink" title="4.2 总结"></a>4.2 总结</h5><p>​    通过在三种不同规模的数据集上分别进行 Gist 索引和无索引的全文检索后，我们发现 Gist 索引的性能在小规模数据集上<strong>明显优于</strong>无索引查询，而当数据集不断增大时，两者的性能差距逐渐缩小，但是 Gist 索引<strong>依然优于</strong>无索引查询性能。</p>
<h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><ul>
<li>准备工作<ul>
<li>性能指标：首先我们分析了一条 SQL 语句的处理过程，发现通过 EXPLAIN 命令可以查看规划器生成的查询计划，里面提供了大量统计信息，这里我们选用执行时间作为本次性能分析实验评判的主要标准，以访问内存/Cache的次数和索引使用情况作为辅助指标</li>
<li>索引测试：然后我们按照官方文档，测试了 PostgreSQL 中的原生 B-tree 索引对性能的提升，以及 Gist 索引在三种应用场景下对性能的提升：几何类型检索（Gist 实现的 R-tree）、标量类型排序（Gist 实现的 B-tree）和全文检索（Gist 实现的 RD-tree）。其中我们发现由于系统内部自动优化，<strong>当数据量比较大时并没有使用索引扫描，实际使用的是位图扫描</strong>，因此需要额外进行设置来禁止位图扫描，索引测试为后续的性能分析实验排除了自动优化等可能带来的潜在干扰</li>
</ul>
</li>
<li>主要工作：我们使用 Gist 实现的 B-tree、R-tree 和 RD-tree 对比了 PostgreSQL 中原生的索引以及无索引扫描在各种特定场景下的查询性能，包括 1)  B-tree 的等值查询、非等值查询、排序；2) R-tree 的范围查询、KNN 排序；3) RD-tree 的全文检索</li>
<li>实验结论<ul>
<li>Gist 实现的 B-tree 和 R-tree 索引在对应的场景下其查询性能相比原生索引<strong>并没有优势</strong>，尤其是 B-tree 索引，在三种场景下均全面落后于原生索引</li>
<li>对于 Gist 实现的 RD-tree 索引，其查询性能在小规模数据集上<strong>明显优于</strong>无索引查询，而随着数据集规模的增大，两者的差距会不断缩小</li>
<li>虽然 Gist 索引相比原生索引在性能上并无显著优势，但得益于 Gist 结构的泛用性和<strong>可扩展性</strong>，使得 Gist 能够执行更加复杂的任务，这是 B-tree、R-tree 等原生索引无法企及的优势</li>
<li>另外，本次实验中我们还发现，不论是 Gist 索引，还是其它原生索引在面对较大规模的数据集时，都存在<strong>性能大幅下降</strong>的情况，我们认为这可能是因为索引扫描本身就需要占用更多的缓存空间，当数据规模过大时造成了缓存空间不够的情况，需要系统做更频繁的数据交换，使得性能遇到瓶颈。所以我们在对数据表建立索引时，应当时刻关注系统资源利用情况，以免遭遇类似性能问题</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>course</category>
      </categories>
      <tags>
        <tag>FDU-数据库系统管理与调优课程</tag>
      </tags>
  </entry>
</search>
